
AirSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004570  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004738  08004738  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004738  08004738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004740  08004740  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000020  08004764  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08004764  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dca  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001715  00000000  00000000  00029e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  0002b530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000758  00000000  00000000  0002bd50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a171  00000000  00000000  0002c4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000081df  00000000  00000000  00046619  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b8bb  00000000  00000000  0004e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea0b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d4  00000000  00000000  000ea130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046e0 	.word	0x080046e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080046e0 	.word	0x080046e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t airlevel[4]={100,150,200,230};
 80004ce:	4a27      	ldr	r2, [pc, #156]	; (800056c <main+0xa4>)
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004d8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t colevel[4]={100,150,200,230};
 80004dc:	4a23      	ldr	r2, [pc, #140]	; (800056c <main+0xa4>)
 80004de:	463b      	mov	r3, r7
 80004e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004e4:	e883 0003 	stmia.w	r3, {r0, r1}
	SensorInit(&AirSensing, &hadc1, AIRR);
 80004e8:	4a21      	ldr	r2, [pc, #132]	; (8000570 <main+0xa8>)
 80004ea:	4922      	ldr	r1, [pc, #136]	; (8000574 <main+0xac>)
 80004ec:	4822      	ldr	r0, [pc, #136]	; (8000578 <main+0xb0>)
 80004ee:	f000 fa8a 	bl	8000a06 <SensorInit>
	SensorInit(&CoSensing, &hadc2, COO);
 80004f2:	4a22      	ldr	r2, [pc, #136]	; (800057c <main+0xb4>)
 80004f4:	4922      	ldr	r1, [pc, #136]	; (8000580 <main+0xb8>)
 80004f6:	4823      	ldr	r0, [pc, #140]	; (8000584 <main+0xbc>)
 80004f8:	f000 fa85 	bl	8000a06 <SensorInit>
	SetSensorAirLevels(&AirSensing, airlevel);
 80004fc:	f107 0308 	add.w	r3, r7, #8
 8000500:	4619      	mov	r1, r3
 8000502:	481d      	ldr	r0, [pc, #116]	; (8000578 <main+0xb0>)
 8000504:	f000 fb4a 	bl	8000b9c <SetSensorAirLevels>
	SetSensorAirLevels(&CoSensing,  colevel);
 8000508:	463b      	mov	r3, r7
 800050a:	4619      	mov	r1, r3
 800050c:	481d      	ldr	r0, [pc, #116]	; (8000584 <main+0xbc>)
 800050e:	f000 fb45 	bl	8000b9c <SetSensorAirLevels>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fd77 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f837 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f991 	bl	8000840 <MX_GPIO_Init>
  MX_ADC1_Init();
 800051e:	f000 f891 	bl	8000644 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000522:	f000 f8ff 	bl	8000724 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f95b 	bl	80007e0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
AirSensing.CallibrationSamples=10;
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <main+0xb0>)
 800052c:	220a      	movs	r2, #10
 800052e:	845a      	strh	r2, [r3, #34]	; 0x22
CoSensing.CallibrationSamples=10;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <main+0xbc>)
 8000532:	220a      	movs	r2, #10
 8000534:	845a      	strh	r2, [r3, #34]	; 0x22

  while (1)
  {
	  DisplaySensorState(&AirSensing);
 8000536:	4810      	ldr	r0, [pc, #64]	; (8000578 <main+0xb0>)
 8000538:	f000 fbe6 	bl	8000d08 <DisplaySensorState>
	  DisplaySensorState(&CoSensing);
 800053c:	4811      	ldr	r0, [pc, #68]	; (8000584 <main+0xbc>)
 800053e:	f000 fbe3 	bl	8000d08 <DisplaySensorState>

	  if(AirSensing.calibrated==0 || CoSensing.calibrated==0)
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <main+0xb0>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d003      	beq.n	8000552 <main+0x8a>
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <main+0xbc>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d104      	bne.n	800055c <main+0x94>
	  {
		  SensorCalibrate(&AirSensing, &CoSensing);
 8000552:	490c      	ldr	r1, [pc, #48]	; (8000584 <main+0xbc>)
 8000554:	4808      	ldr	r0, [pc, #32]	; (8000578 <main+0xb0>)
 8000556:	f000 fb31 	bl	8000bbc <SensorCalibrate>
 800055a:	e005      	b.n	8000568 <main+0xa0>
	  } else
	  {
		  EvaluateSensor(&AirSensing);
 800055c:	4806      	ldr	r0, [pc, #24]	; (8000578 <main+0xb0>)
 800055e:	f000 fa78 	bl	8000a52 <EvaluateSensor>
		  EvaluateSensor(&CoSensing);
 8000562:	4808      	ldr	r0, [pc, #32]	; (8000584 <main+0xbc>)
 8000564:	f000 fa75 	bl	8000a52 <EvaluateSensor>
	  DisplaySensorState(&AirSensing);
 8000568:	e7e5      	b.n	8000536 <main+0x6e>
 800056a:	bf00      	nop
 800056c:	080046f8 	.word	0x080046f8
 8000570:	20000000 	.word	0x20000000
 8000574:	200000d0 	.word	0x200000d0
 8000578:	200000a0 	.word	0x200000a0
 800057c:	20000008 	.word	0x20000008
 8000580:	20000050 	.word	0x20000050
 8000584:	20000120 	.word	0x20000120

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b09e      	sub	sp, #120	; 0x78
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000592:	2228      	movs	r2, #40	; 0x28
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f004 f899 	bl	80046ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	223c      	movs	r2, #60	; 0x3c
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 f88b 	bl	80046ce <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005d8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 f98e 	bl	8002900 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ea:	f000 f9dd 	bl	80009a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000604:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000608:	2101      	movs	r1, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f003 f880 	bl	8003710 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000616:	f000 f9c7 	bl	80009a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 800061a:	2382      	movs	r3, #130	; 0x82
 800061c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	4618      	mov	r0, r3
 800062c:	f003 faa6 	bl	8003b7c <HAL_RCCEx_PeriphCLKConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000636:	f000 f9b7 	bl	80009a8 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3778      	adds	r7, #120	; 0x78
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
 8000664:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000666:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <MX_ADC1_Init+0xdc>)
 8000668:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800066c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800066e:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <MX_ADC1_Init+0xdc>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000674:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <MX_ADC1_Init+0xdc>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800067a:	4b29      	ldr	r3, [pc, #164]	; (8000720 <MX_ADC1_Init+0xdc>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <MX_ADC1_Init+0xdc>)
 8000682:	2200      	movs	r2, #0
 8000684:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <MX_ADC1_Init+0xdc>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <MX_ADC1_Init+0xdc>)
 8000690:	2200      	movs	r2, #0
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <MX_ADC1_Init+0xdc>)
 8000696:	2201      	movs	r2, #1
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <MX_ADC1_Init+0xdc>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_ADC1_Init+0xdc>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_ADC1_Init+0xdc>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_ADC1_Init+0xdc>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_ADC1_Init+0xdc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_ADC1_Init+0xdc>)
 80006bc:	2201      	movs	r2, #1
 80006be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	4817      	ldr	r0, [pc, #92]	; (8000720 <MX_ADC1_Init+0xdc>)
 80006c2:	f000 fd27 	bl	8001114 <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80006cc:	f000 f96c 	bl	80009a8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	4811      	ldr	r0, [pc, #68]	; (8000720 <MX_ADC1_Init+0xdc>)
 80006dc:	f001 fc3a 	bl	8001f54 <HAL_ADCEx_MultiModeConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80006e6:	f000 f95f 	bl	80009a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4619      	mov	r1, r3
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <MX_ADC1_Init+0xdc>)
 8000708:	f001 f938 	bl	800197c <HAL_ADC_ConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000712:	f000 f949 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000d0 	.word	0x200000d0

08000724 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
 8000738:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <MX_ADC2_Init+0xb4>)
 800073c:	4a27      	ldr	r2, [pc, #156]	; (80007dc <MX_ADC2_Init+0xb8>)
 800073e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <MX_ADC2_Init+0xb4>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000746:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_ADC2_Init+0xb4>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_ADC2_Init+0xb4>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <MX_ADC2_Init+0xb4>)
 8000754:	2200      	movs	r2, #0
 8000756:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_ADC2_Init+0xb4>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_ADC2_Init+0xb4>)
 8000762:	2200      	movs	r2, #0
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_ADC2_Init+0xb4>)
 8000768:	2201      	movs	r2, #1
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_ADC2_Init+0xb4>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_ADC2_Init+0xb4>)
 8000774:	2201      	movs	r2, #1
 8000776:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_ADC2_Init+0xb4>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_ADC2_Init+0xb4>)
 8000782:	2204      	movs	r2, #4
 8000784:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_ADC2_Init+0xb4>)
 8000788:	2200      	movs	r2, #0
 800078a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_ADC2_Init+0xb4>)
 800078e:	2200      	movs	r2, #0
 8000790:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000792:	4811      	ldr	r0, [pc, #68]	; (80007d8 <MX_ADC2_Init+0xb4>)
 8000794:	f000 fcbe 	bl	8001114 <HAL_ADC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800079e:	f000 f903 	bl	80009a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007a2:	2305      	movs	r3, #5
 80007a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <MX_ADC2_Init+0xb4>)
 80007c0:	f001 f8dc 	bl	800197c <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80007ca:	f000 f8ed 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000050 	.word	0x20000050
 80007dc:	50000100 	.word	0x50000100

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007e6:	4a15      	ldr	r2, [pc, #84]	; (800083c <MX_USART2_UART_Init+0x5c>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000824:	f003 fb5a 	bl	8003edc <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 f8bb 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000150 	.word	0x20000150
 800083c:	40004400 	.word	0x40004400

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000856:	4b50      	ldr	r3, [pc, #320]	; (8000998 <MX_GPIO_Init+0x158>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a4f      	ldr	r2, [pc, #316]	; (8000998 <MX_GPIO_Init+0x158>)
 800085c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000860:	6153      	str	r3, [r2, #20]
 8000862:	4b4d      	ldr	r3, [pc, #308]	; (8000998 <MX_GPIO_Init+0x158>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b4a      	ldr	r3, [pc, #296]	; (8000998 <MX_GPIO_Init+0x158>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a49      	ldr	r2, [pc, #292]	; (8000998 <MX_GPIO_Init+0x158>)
 8000874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b47      	ldr	r3, [pc, #284]	; (8000998 <MX_GPIO_Init+0x158>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b44      	ldr	r3, [pc, #272]	; (8000998 <MX_GPIO_Init+0x158>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a43      	ldr	r2, [pc, #268]	; (8000998 <MX_GPIO_Init+0x158>)
 800088c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b41      	ldr	r3, [pc, #260]	; (8000998 <MX_GPIO_Init+0x158>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <MX_GPIO_Init+0x158>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a3d      	ldr	r2, [pc, #244]	; (8000998 <MX_GPIO_Init+0x158>)
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <MX_GPIO_Init+0x158>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b38      	ldr	r3, [pc, #224]	; (8000998 <MX_GPIO_Init+0x158>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a37      	ldr	r2, [pc, #220]	; (8000998 <MX_GPIO_Init+0x158>)
 80008bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c0:	6153      	str	r3, [r2, #20]
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <MX_GPIO_Init+0x158>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 80008ce:	2200      	movs	r2, #0
 80008d0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80008d4:	4831      	ldr	r0, [pc, #196]	; (800099c <MX_GPIO_Init+0x15c>)
 80008d6:	f001 fffb 	bl	80028d0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 80008da:	2337      	movs	r3, #55	; 0x37
 80008dc:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008de:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <MX_GPIO_Init+0x160>)
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	482b      	ldr	r0, [pc, #172]	; (800099c <MX_GPIO_Init+0x15c>)
 80008ee:	f001 fe75 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 80008f2:	f64f 7308 	movw	r3, #65288	; 0xff08
 80008f6:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4824      	ldr	r0, [pc, #144]	; (800099c <MX_GPIO_Init+0x15c>)
 800090c:	f001 fe66 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000910:	2301      	movs	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000926:	f001 fe59 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800092a:	23e0      	movs	r3, #224	; 0xe0
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800093a:	2305      	movs	r3, #5
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f001 fe48 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800094c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800095e:	230e      	movs	r3, #14
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f001 fe36 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000970:	23c0      	movs	r3, #192	; 0xc0
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000974:	2312      	movs	r3, #18
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000978:	2301      	movs	r3, #1
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000980:	2304      	movs	r3, #4
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <MX_GPIO_Init+0x164>)
 800098c:	f001 fe26 	bl	80025dc <HAL_GPIO_Init>

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	48001000 	.word	0x48001000
 80009a0:	10120000 	.word	0x10120000
 80009a4:	48000400 	.word	0x48000400

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <GetAdcValue>:
#include <stdint.h>
#include <string.h>


uint16_t GetAdcValue(SensorStruct *ptr)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b084      	sub	sp, #16
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
  uint16_t value=0;
 80009be:	2300      	movs	r3, #0
 80009c0:	81fb      	strh	r3, [r7, #14]
  HAL_ADC_Start(ptr->hAdc);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fd84 	bl	80014d4 <HAL_ADC_Start>
  	if (HAL_ADC_PollForConversion(ptr->hAdc, 100) == HAL_OK)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	69db      	ldr	r3, [r3, #28]
 80009d0:	2164      	movs	r1, #100	; 0x64
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 feca 	bl	800176c <HAL_ADC_PollForConversion>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d106      	bne.n	80009ec <GetAdcValue+0x36>
  		{
  		  value=HAL_ADC_GetValue(ptr->hAdc);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 ffbc 	bl	8001960 <HAL_ADC_GetValue>
 80009e8:	4603      	mov	r3, r0
 80009ea:	81fb      	strh	r3, [r7, #14]
  		}
  	HAL_Delay (10);
 80009ec:	200a      	movs	r0, #10
 80009ee:	f000 fb6f 	bl	80010d0 <HAL_Delay>
  	HAL_ADC_Stop (ptr->hAdc);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fe82 	bl	8001700 <HAL_ADC_Stop>
  	return value;
 80009fc:	89fb      	ldrh	r3, [r7, #14]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <SensorInit>:

void SensorInit(SensorStruct *ptr, ADC_HandleTypeDef *hAdc, uint16_t *DisplayPins)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b084      	sub	sp, #16
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
  ptr->hAdc=hAdc;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	68ba      	ldr	r2, [r7, #8]
 8000a16:	61da      	str	r2, [r3, #28]
  memcpy(ptr->Display,DisplayPins,sizeof(DisplayPins)*4);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	2210      	movs	r2, #16
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f003 fe49 	bl	80046b8 <memcpy>
  ptr->CallibrationSamples=100;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2264      	movs	r2, #100	; 0x64
 8000a2a:	845a      	strh	r2, [r3, #34]	; 0x22

}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <GetSensorMeasurements>:

void GetSensorMeasurements(SensorStruct *ptr)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
		  ptr->CurrentValue=GetAdcValue(ptr);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ffba 	bl	80009b6 <GetAdcValue>
 8000a42:	4603      	mov	r3, r0
 8000a44:	461a      	mov	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	831a      	strh	r2, [r3, #24]
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <EvaluateSensor>:

void EvaluateSensor(SensorStruct *ptr)
{
 8000a52:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	GetSensorMeasurements(ptr);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ffe9 	bl	8000a34 <GetSensorMeasurements>
	if(ptr->CurrentValue <= ptr->CalibrationValue + ptr->AirLevels[0]) {ptr->Quality=Green;}else
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8b1b      	ldrh	r3, [r3, #24]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	f04f 0400 	mov.w	r4, #0
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	e9d2 5604 	ldrd	r5, r6, [r2, #16]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8000a76:	fa1f fb82 	uxth.w	fp, r2
 8000a7a:	f04f 0c00 	mov.w	ip, #0
 8000a7e:	eb1b 0105 	adds.w	r1, fp, r5
 8000a82:	eb4c 0206 	adc.w	r2, ip, r6
 8000a86:	42a2      	cmp	r2, r4
 8000a88:	bf08      	it	eq
 8000a8a:	4299      	cmpeq	r1, r3
 8000a8c:	d304      	bcc.n	8000a98 <EvaluateSensor+0x46>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2020 	strb.w	r2, [r3, #32]

		if(ptr->CurrentValue >= ptr->CalibrationValue + ptr->AirLevels[1] && ptr->CurrentValue <  ptr->CalibrationValue + ptr->AirLevels[2]) {ptr->Quality=Blue;}else

			if(ptr->CurrentValue >= ptr->CalibrationValue + ptr->AirLevels[2] && ptr->CurrentValue < ptr->CalibrationValue + ptr->AirLevels[3] ) {ptr->Quality=Orange;}else
				if(ptr->CurrentValue >= ptr->CalibrationValue + ptr->AirLevels[3]) {ptr->Quality=Red;}
}
 8000a96:	e07c      	b.n	8000b92 <EvaluateSensor+0x140>
		if(ptr->CurrentValue >= ptr->CalibrationValue + ptr->AirLevels[1] && ptr->CurrentValue <  ptr->CalibrationValue + ptr->AirLevels[2]) {ptr->Quality=Blue;}else
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	8b1b      	ldrh	r3, [r3, #24]
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	f04f 0200 	mov.w	r2, #0
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	e9d3 5604 	ldrd	r5, r6, [r3, #16]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000aac:	fa1f fb83 	uxth.w	fp, r3
 8000ab0:	f04f 0c00 	mov.w	ip, #0
 8000ab4:	eb1b 0305 	adds.w	r3, fp, r5
 8000ab8:	eb4c 0406 	adc.w	r4, ip, r6
 8000abc:	42a2      	cmp	r2, r4
 8000abe:	bf08      	it	eq
 8000ac0:	4299      	cmpeq	r1, r3
 8000ac2:	d31a      	bcc.n	8000afa <EvaluateSensor+0xa8>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	8b1b      	ldrh	r3, [r3, #24]
 8000ac8:	b299      	uxth	r1, r3
 8000aca:	f04f 0200 	mov.w	r2, #0
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	e9d3 5604 	ldrd	r5, r6, [r3, #16]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ad8:	fa1f fb83 	uxth.w	fp, r3
 8000adc:	f04f 0c00 	mov.w	ip, #0
 8000ae0:	eb1b 0305 	adds.w	r3, fp, r5
 8000ae4:	eb4c 0406 	adc.w	r4, ip, r6
 8000ae8:	42a2      	cmp	r2, r4
 8000aea:	bf08      	it	eq
 8000aec:	4299      	cmpeq	r1, r3
 8000aee:	d204      	bcs.n	8000afa <EvaluateSensor+0xa8>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2201      	movs	r2, #1
 8000af4:	f883 2020 	strb.w	r2, [r3, #32]
 8000af8:	e04b      	b.n	8000b92 <EvaluateSensor+0x140>
			if(ptr->CurrentValue >= ptr->CalibrationValue + ptr->AirLevels[2] && ptr->CurrentValue < ptr->CalibrationValue + ptr->AirLevels[3] ) {ptr->Quality=Orange;}else
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	8b1b      	ldrh	r3, [r3, #24]
 8000afe:	b299      	uxth	r1, r3
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	e9d3 5604 	ldrd	r5, r6, [r3, #16]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b0e:	fa1f fb83 	uxth.w	fp, r3
 8000b12:	f04f 0c00 	mov.w	ip, #0
 8000b16:	eb1b 0305 	adds.w	r3, fp, r5
 8000b1a:	eb4c 0406 	adc.w	r4, ip, r6
 8000b1e:	42a2      	cmp	r2, r4
 8000b20:	bf08      	it	eq
 8000b22:	4299      	cmpeq	r1, r3
 8000b24:	d31a      	bcc.n	8000b5c <EvaluateSensor+0x10a>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	8b1b      	ldrh	r3, [r3, #24]
 8000b2a:	b299      	uxth	r1, r3
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	e9d3 5604 	ldrd	r5, r6, [r3, #16]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b3a:	fa1f fb83 	uxth.w	fp, r3
 8000b3e:	f04f 0c00 	mov.w	ip, #0
 8000b42:	eb1b 0305 	adds.w	r3, fp, r5
 8000b46:	eb4c 0406 	adc.w	r4, ip, r6
 8000b4a:	42a2      	cmp	r2, r4
 8000b4c:	bf08      	it	eq
 8000b4e:	4299      	cmpeq	r1, r3
 8000b50:	d204      	bcs.n	8000b5c <EvaluateSensor+0x10a>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2202      	movs	r2, #2
 8000b56:	f883 2020 	strb.w	r2, [r3, #32]
 8000b5a:	e01a      	b.n	8000b92 <EvaluateSensor+0x140>
				if(ptr->CurrentValue >= ptr->CalibrationValue + ptr->AirLevels[3]) {ptr->Quality=Red;}
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	8b1b      	ldrh	r3, [r3, #24]
 8000b60:	b299      	uxth	r1, r3
 8000b62:	f04f 0200 	mov.w	r2, #0
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	e9d3 5604 	ldrd	r5, r6, [r3, #16]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b70:	fa1f fb83 	uxth.w	fp, r3
 8000b74:	f04f 0c00 	mov.w	ip, #0
 8000b78:	eb1b 0305 	adds.w	r3, fp, r5
 8000b7c:	eb4c 0406 	adc.w	r4, ip, r6
 8000b80:	42a2      	cmp	r2, r4
 8000b82:	bf08      	it	eq
 8000b84:	4299      	cmpeq	r1, r3
 8000b86:	d304      	bcc.n	8000b92 <EvaluateSensor+0x140>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000b90:	e7ff      	b.n	8000b92 <EvaluateSensor+0x140>
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

08000b9c <SetSensorAirLevels>:

void SetSensorAirLevels(SensorStruct *ptr, uint16_t Levels[])
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  memcpy(ptr->AirLevels,Levels,sizeof(uint16_t)*4);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3324      	adds	r3, #36	; 0x24
 8000baa:	2208      	movs	r2, #8
 8000bac:	6839      	ldr	r1, [r7, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f003 fd82 	bl	80046b8 <memcpy>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <SensorCalibrate>:

void SensorCalibrate(SensorStruct *ptr1, SensorStruct *ptr2)
{
 8000bbc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	6039      	str	r1, [r7, #0]
	static int i=0;
	static int j=0;
	static int p=0;
	p++;
 8000bc8:	4b4c      	ldr	r3, [pc, #304]	; (8000cfc <SensorCalibrate+0x140>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a4b      	ldr	r2, [pc, #300]	; (8000cfc <SensorCalibrate+0x140>)
 8000bd0:	6013      	str	r3, [r2, #0]
	p&=0x03;
 8000bd2:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <SensorCalibrate+0x140>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	4a48      	ldr	r2, [pc, #288]	; (8000cfc <SensorCalibrate+0x140>)
 8000bdc:	6013      	str	r3, [r2, #0]
	HAL_Delay(1000);
 8000bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be2:	f000 fa75 	bl	80010d0 <HAL_Delay>

	if(ptr1!=NULL && ptr1->calibrated==0)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d03f      	beq.n	8000c6c <SensorCalibrate+0xb0>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d13b      	bne.n	8000c6c <SensorCalibrate+0xb0>
	{
		if(i< ptr1->CallibrationSamples){
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <SensorCalibrate+0x144>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	dd1e      	ble.n	8000c40 <SensorCalibrate+0x84>
		ptr1->CalibrationValue+=GetAdcValue(ptr1);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff fed7 	bl	80009b6 <GetAdcValue>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8000c12:	fa1f fb80 	uxth.w	fp, r0
 8000c16:	f04f 0c00 	mov.w	ip, #0
 8000c1a:	eb1b 0301 	adds.w	r3, fp, r1
 8000c1e:	eb4c 0402 	adc.w	r4, ip, r2
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	e9c2 3404 	strd	r3, r4, [r2, #16]
		ptr1->Quality=p;
 8000c28:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <SensorCalibrate+0x140>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f883 2020 	strb.w	r2, [r3, #32]
		i++;
 8000c34:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <SensorCalibrate+0x144>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	4a31      	ldr	r2, [pc, #196]	; (8000d00 <SensorCalibrate+0x144>)
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	e015      	b.n	8000c6c <SensorCalibrate+0xb0>

		} else
		{
			ptr1->calibrated=1;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
			ptr1->CalibrationValue/=i;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <SensorCalibrate+0x144>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000c54:	461a      	mov	r2, r3
 8000c56:	4623      	mov	r3, r4
 8000c58:	f7ff fab6 	bl	80001c8 <__aeabi_uldivmod>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	460c      	mov	r4, r1
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	e9c2 3404 	strd	r3, r4, [r2, #16]
			i=0;
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <SensorCalibrate+0x144>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
		}

	}
	if(ptr2!=NULL && ptr2->calibrated==0)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d03f      	beq.n	8000cf2 <SensorCalibrate+0x136>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d13b      	bne.n	8000cf2 <SensorCalibrate+0x136>
	{
		if(j< ptr2->CallibrationSamples){
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <SensorCalibrate+0x148>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dd1e      	ble.n	8000cc6 <SensorCalibrate+0x10a>
		ptr2->CalibrationValue+=GetAdcValue(ptr2);
 8000c88:	6838      	ldr	r0, [r7, #0]
 8000c8a:	f7ff fe94 	bl	80009b6 <GetAdcValue>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4618      	mov	r0, r3
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8000c98:	fa1f fb80 	uxth.w	fp, r0
 8000c9c:	f04f 0c00 	mov.w	ip, #0
 8000ca0:	eb1b 0301 	adds.w	r3, fp, r1
 8000ca4:	eb4c 0402 	adc.w	r4, ip, r2
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	e9c2 3404 	strd	r3, r4, [r2, #16]
		j++;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <SensorCalibrate+0x148>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <SensorCalibrate+0x148>)
 8000cb6:	6013      	str	r3, [r2, #0]
		ptr2->Quality=p;
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <SensorCalibrate+0x140>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	f883 2020 	strb.w	r2, [r3, #32]
			ptr2->CalibrationValue/=j;
			j=0;
		}
	}

}
 8000cc4:	e015      	b.n	8000cf2 <SensorCalibrate+0x136>
			ptr2->calibrated=1;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
			ptr2->CalibrationValue/=j;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <SensorCalibrate+0x148>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4623      	mov	r3, r4
 8000cde:	f7ff fa73 	bl	80001c8 <__aeabi_uldivmod>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	460c      	mov	r4, r1
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	e9c2 3404 	strd	r3, r4, [r2, #16]
			j=0;
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <SensorCalibrate+0x148>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000cfc:	2000003c 	.word	0x2000003c
 8000d00:	20000040 	.word	0x20000040
 8000d04:	20000044 	.word	0x20000044

08000d08 <DisplaySensorState>:
{
	return ptr->calibrated;
}

void DisplaySensorState(SensorStruct *ptr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
		 for(i=0;i<4;i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]
 8000d18:	e00c      	b.n	8000d34 <DisplaySensorState+0x2c>
		 	 {
		 		 HAL_GPIO_WritePin(GPIOE,ptr->Display[i],GPIO_PIN_RESET);
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	885b      	ldrh	r3, [r3, #2]
 8000d24:	2200      	movs	r2, #0
 8000d26:	4619      	mov	r1, r3
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <DisplaySensorState+0x54>)
 8000d2a:	f001 fdd1 	bl	80028d0 <HAL_GPIO_WritePin>
		 for(i=0;i<4;i++)
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	3301      	adds	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d9ef      	bls.n	8000d1a <DisplaySensorState+0x12>
		 	 }
 		 HAL_GPIO_WritePin(GPIOE,ptr->Display[ptr->Quality],GPIO_PIN_SET);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	885b      	ldrh	r3, [r3, #2]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <DisplaySensorState+0x54>)
 8000d4e:	f001 fdbf 	bl	80028d0 <HAL_GPIO_WritePin>

}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	48001000 	.word	0x48001000

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_MspInit+0x44>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <HAL_MspInit+0x44>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6193      	str	r3, [r2, #24]
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_MspInit+0x44>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_MspInit+0x44>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_MspInit+0x44>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	61d3      	str	r3, [r2, #28]
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_MspInit+0x44>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dc8:	d12e      	bne.n	8000e28 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000dca:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <HAL_ADC_MspInit+0xec>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a30      	ldr	r2, [pc, #192]	; (8000e94 <HAL_ADC_MspInit+0xec>)
 8000dd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <HAL_ADC_MspInit+0xec>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d10b      	bne.n	8000df4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <HAL_ADC_MspInit+0xf0>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a2d      	ldr	r2, [pc, #180]	; (8000e98 <HAL_ADC_MspInit+0xf0>)
 8000de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de6:	6153      	str	r3, [r2, #20]
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <HAL_ADC_MspInit+0xf0>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <HAL_ADC_MspInit+0xf0>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	4a27      	ldr	r2, [pc, #156]	; (8000e98 <HAL_ADC_MspInit+0xf0>)
 8000dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfe:	6153      	str	r3, [r2, #20]
 8000e00:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <HAL_ADC_MspInit+0xf0>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e10:	2303      	movs	r3, #3
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f001 fbdb 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e26:	e031      	b.n	8000e8c <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <HAL_ADC_MspInit+0xf4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d12c      	bne.n	8000e8c <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_ADC_MspInit+0xec>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <HAL_ADC_MspInit+0xec>)
 8000e3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_ADC_MspInit+0xec>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d10b      	bne.n	8000e5c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_ADC_MspInit+0xf0>)
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <HAL_ADC_MspInit+0xf0>)
 8000e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	6153      	str	r3, [r2, #20]
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_ADC_MspInit+0xf0>)
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_ADC_MspInit+0xf0>)
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_ADC_MspInit+0xf0>)
 8000e62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e66:	6153      	str	r3, [r2, #20]
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_ADC_MspInit+0xf0>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e74:	2310      	movs	r3, #16
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <HAL_ADC_MspInit+0xf8>)
 8000e88:	f001 fba8 	bl	80025dc <HAL_GPIO_Init>
}
 8000e8c:	bf00      	nop
 8000e8e:	3730      	adds	r7, #48	; 0x30
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000048 	.word	0x20000048
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	50000100 	.word	0x50000100
 8000ea0:	48000800 	.word	0x48000800

08000ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_UART_MspInit+0x7c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d128      	bne.n	8000f18 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	6153      	str	r3, [r2, #20]
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f06:	2307      	movs	r3, #7
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f001 fb62 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	; 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40004400 	.word	0x40004400
 8000f24:	40021000 	.word	0x40021000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7c:	f000 f888 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <SystemInit+0x28>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <SystemInit+0x28>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SystemInit+0x28>)
 8000f9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fb6:	e003      	b.n	8000fc0 <LoopCopyDataInit>

08000fb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fbe:	3104      	adds	r1, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fc0:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fc8:	d3f6      	bcc.n	8000fb8 <CopyDataInit>
	ldr	r2, =_sbss
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fcc:	e002      	b.n	8000fd4 <LoopFillZerobss>

08000fce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fd0:	f842 3b04 	str.w	r3, [r2], #4

08000fd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <LoopForever+0x16>)
	cmp	r2, r3
 8000fd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fd8:	d3f9      	bcc.n	8000fce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fda:	f7ff ffd3 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f003 fb47 	bl	8004670 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe2:	f7ff fa71 	bl	80004c8 <main>

08000fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe6:	e7fe      	b.n	8000fe6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000fec:	08004748 	.word	0x08004748
	ldr	r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ff4:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8000ff8:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8000ffc:	200001d4 	.word	0x200001d4

08001000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_2_IRQHandler>
	...

08001004 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_Init+0x28>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_Init+0x28>)
 800100e:	f043 0310 	orr.w	r3, r3, #16
 8001012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f001 faad 	bl	8002574 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101a:	2000      	movs	r0, #0
 800101c:	f000 f808 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001020:	f7ff fe9e 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40022000 	.word	0x40022000

08001030 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x54>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x58>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001046:	fbb3 f3f1 	udiv	r3, r3, r1
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f001 fab7 	bl	80025c2 <HAL_SYSTICK_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e00e      	b.n	800107c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d80a      	bhi.n	800107a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800106c:	f001 fa8d 	bl	800258a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <HAL_InitTick+0x5c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000010 	.word	0x20000010
 8001088:	20000018 	.word	0x20000018
 800108c:	20000014 	.word	0x20000014

08001090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000018 	.word	0x20000018
 80010b4:	200001d0 	.word	0x200001d0

080010b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	200001d0 	.word	0x200001d0

080010d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff ffee 	bl	80010b8 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_Delay+0x40>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffde 	bl	80010b8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000018 	.word	0x20000018

08001114 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b09a      	sub	sp, #104	; 0x68
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001122:	2300      	movs	r3, #0
 8001124:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e1c9      	b.n	80014c8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	d176      	bne.n	8001234 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	2b00      	cmp	r3, #0
 800114c:	d152      	bne.n	80011f4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff fe1d 	bl	8000da8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d13b      	bne.n	80011f4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f001 f839 	bl	80021f4 <ADC_Disable>
 8001182:	4603      	mov	r3, r0
 8001184:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	2b00      	cmp	r3, #0
 8001192:	d12f      	bne.n	80011f4 <HAL_ADC_Init+0xe0>
 8001194:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001198:	2b00      	cmp	r3, #0
 800119a:	d12b      	bne.n	80011f4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011a4:	f023 0302 	bic.w	r3, r3, #2
 80011a8:	f043 0202 	orr.w	r2, r3, #2
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011be:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011ce:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011d0:	4b86      	ldr	r3, [pc, #536]	; (80013ec <HAL_ADC_Init+0x2d8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a86      	ldr	r2, [pc, #536]	; (80013f0 <HAL_ADC_Init+0x2dc>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	0c9a      	lsrs	r2, r3, #18
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011e6:	e002      	b.n	80011ee <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f9      	bne.n	80011e8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800120c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001210:	d110      	bne.n	8001234 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f023 0312 	bic.w	r3, r3, #18
 800121a:	f043 0210 	orr.w	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f043 0201 	orr.w	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	2b00      	cmp	r3, #0
 800123e:	f040 8136 	bne.w	80014ae <HAL_ADC_Init+0x39a>
 8001242:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001246:	2b00      	cmp	r3, #0
 8001248:	f040 8131 	bne.w	80014ae <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001256:	2b00      	cmp	r3, #0
 8001258:	f040 8129 	bne.w	80014ae <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001264:	f043 0202 	orr.w	r2, r3, #2
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001274:	d004      	beq.n	8001280 <HAL_ADC_Init+0x16c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a5e      	ldr	r2, [pc, #376]	; (80013f4 <HAL_ADC_Init+0x2e0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d101      	bne.n	8001284 <HAL_ADC_Init+0x170>
 8001280:	4b5d      	ldr	r3, [pc, #372]	; (80013f8 <HAL_ADC_Init+0x2e4>)
 8001282:	e000      	b.n	8001286 <HAL_ADC_Init+0x172>
 8001284:	4b5d      	ldr	r3, [pc, #372]	; (80013fc <HAL_ADC_Init+0x2e8>)
 8001286:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001290:	d102      	bne.n	8001298 <HAL_ADC_Init+0x184>
 8001292:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <HAL_ADC_Init+0x2e0>)
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	e01a      	b.n	80012ce <HAL_ADC_Init+0x1ba>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a55      	ldr	r2, [pc, #340]	; (80013f4 <HAL_ADC_Init+0x2e0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d103      	bne.n	80012aa <HAL_ADC_Init+0x196>
 80012a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	e011      	b.n	80012ce <HAL_ADC_Init+0x1ba>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a54      	ldr	r2, [pc, #336]	; (8001400 <HAL_ADC_Init+0x2ec>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d102      	bne.n	80012ba <HAL_ADC_Init+0x1a6>
 80012b4:	4b53      	ldr	r3, [pc, #332]	; (8001404 <HAL_ADC_Init+0x2f0>)
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e009      	b.n	80012ce <HAL_ADC_Init+0x1ba>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a51      	ldr	r2, [pc, #324]	; (8001404 <HAL_ADC_Init+0x2f0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d102      	bne.n	80012ca <HAL_ADC_Init+0x1b6>
 80012c4:	4b4e      	ldr	r3, [pc, #312]	; (8001400 <HAL_ADC_Init+0x2ec>)
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	e001      	b.n	80012ce <HAL_ADC_Init+0x1ba>
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d108      	bne.n	80012ee <HAL_ADC_Init+0x1da>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d101      	bne.n	80012ee <HAL_ADC_Init+0x1da>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_ADC_Init+0x1dc>
 80012ee:	2300      	movs	r3, #0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d11c      	bne.n	800132e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012f4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d010      	beq.n	800131c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d107      	bne.n	8001316 <HAL_ADC_Init+0x202>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <HAL_ADC_Init+0x202>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_ADC_Init+0x204>
 8001316:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001318:	2b00      	cmp	r3, #0
 800131a:	d108      	bne.n	800132e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800131c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	431a      	orrs	r2, r3
 800132a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7e5b      	ldrb	r3, [r3, #25]
 8001332:	035b      	lsls	r3, r3, #13
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001338:	2a01      	cmp	r2, #1
 800133a:	d002      	beq.n	8001342 <HAL_ADC_Init+0x22e>
 800133c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001340:	e000      	b.n	8001344 <HAL_ADC_Init+0x230>
 8001342:	2200      	movs	r2, #0
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4313      	orrs	r3, r2
 8001352:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001354:	4313      	orrs	r3, r2
 8001356:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d11b      	bne.n	800139a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7e5b      	ldrb	r3, [r3, #25]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	3b01      	subs	r3, #1
 8001370:	045a      	lsls	r2, r3, #17
 8001372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001374:	4313      	orrs	r3, r2
 8001376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137a:	663b      	str	r3, [r7, #96]	; 0x60
 800137c:	e00d      	b.n	800139a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001386:	f043 0220 	orr.w	r2, r3, #32
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f043 0201 	orr.w	r2, r3, #1
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d03a      	beq.n	8001418 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a16      	ldr	r2, [pc, #88]	; (8001400 <HAL_ADC_Init+0x2ec>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d004      	beq.n	80013b6 <HAL_ADC_Init+0x2a2>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a14      	ldr	r2, [pc, #80]	; (8001404 <HAL_ADC_Init+0x2f0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d128      	bne.n	8001408 <HAL_ADC_Init+0x2f4>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80013be:	d012      	beq.n	80013e6 <HAL_ADC_Init+0x2d2>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013c8:	d00a      	beq.n	80013e0 <HAL_ADC_Init+0x2cc>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80013d2:	d002      	beq.n	80013da <HAL_ADC_Init+0x2c6>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	e018      	b.n	800140c <HAL_ADC_Init+0x2f8>
 80013da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013de:	e015      	b.n	800140c <HAL_ADC_Init+0x2f8>
 80013e0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80013e4:	e012      	b.n	800140c <HAL_ADC_Init+0x2f8>
 80013e6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80013ea:	e00f      	b.n	800140c <HAL_ADC_Init+0x2f8>
 80013ec:	20000010 	.word	0x20000010
 80013f0:	431bde83 	.word	0x431bde83
 80013f4:	50000100 	.word	0x50000100
 80013f8:	50000300 	.word	0x50000300
 80013fc:	50000700 	.word	0x50000700
 8001400:	50000400 	.word	0x50000400
 8001404:	50000500 	.word	0x50000500
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001410:	4313      	orrs	r3, r2
 8001412:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001414:	4313      	orrs	r3, r2
 8001416:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d114      	bne.n	8001450 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001434:	f023 0302 	bic.w	r3, r3, #2
 8001438:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7e1b      	ldrb	r3, [r3, #24]
 800143e:	039a      	lsls	r2, r3, #14
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4313      	orrs	r3, r2
 800144a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800144c:	4313      	orrs	r3, r2
 800144e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <HAL_ADC_Init+0x3bc>)
 8001458:	4013      	ands	r3, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001460:	430b      	orrs	r3, r1
 8001462:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d10c      	bne.n	8001486 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f023 010f 	bic.w	r1, r3, #15
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	1e5a      	subs	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
 8001484:	e007      	b.n	8001496 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 020f 	bic.w	r2, r2, #15
 8001494:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f023 0303 	bic.w	r3, r3, #3
 80014a4:	f043 0201 	orr.w	r2, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	; 0x40
 80014ac:	e00a      	b.n	80014c4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f023 0312 	bic.w	r3, r3, #18
 80014b6:	f043 0210 	orr.w	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80014be:	2301      	movs	r3, #1
 80014c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80014c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3768      	adds	r7, #104	; 0x68
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	fff0c007 	.word	0xfff0c007

080014d4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 80f9 	bne.w	80016e2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_ADC_Start+0x2a>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e0f4      	b.n	80016e8 <HAL_ADC_Start+0x214>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fe16 	bl	8002138 <ADC_Enable>
 800150c:	4603      	mov	r3, r0
 800150e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f040 80e0 	bne.w	80016d8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001534:	d004      	beq.n	8001540 <HAL_ADC_Start+0x6c>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a6d      	ldr	r2, [pc, #436]	; (80016f0 <HAL_ADC_Start+0x21c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d106      	bne.n	800154e <HAL_ADC_Start+0x7a>
 8001540:	4b6c      	ldr	r3, [pc, #432]	; (80016f4 <HAL_ADC_Start+0x220>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2b00      	cmp	r3, #0
 800154a:	d010      	beq.n	800156e <HAL_ADC_Start+0x9a>
 800154c:	e005      	b.n	800155a <HAL_ADC_Start+0x86>
 800154e:	4b6a      	ldr	r3, [pc, #424]	; (80016f8 <HAL_ADC_Start+0x224>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 031f 	and.w	r3, r3, #31
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <HAL_ADC_Start+0x9a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001562:	d004      	beq.n	800156e <HAL_ADC_Start+0x9a>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a64      	ldr	r2, [pc, #400]	; (80016fc <HAL_ADC_Start+0x228>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d115      	bne.n	800159a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d036      	beq.n	80015f6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001590:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001598:	e02d      	b.n	80015f6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ae:	d004      	beq.n	80015ba <HAL_ADC_Start+0xe6>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <HAL_ADC_Start+0x21c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d10a      	bne.n	80015d0 <HAL_ADC_Start+0xfc>
 80015ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf14      	ite	ne
 80015c8:	2301      	movne	r3, #1
 80015ca:	2300      	moveq	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	e008      	b.n	80015e2 <HAL_ADC_Start+0x10e>
 80015d0:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <HAL_ADC_Start+0x228>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf14      	ite	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	2300      	moveq	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d007      	beq.n	80015f6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001602:	d106      	bne.n	8001612 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f023 0206 	bic.w	r2, r3, #6
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	645a      	str	r2, [r3, #68]	; 0x44
 8001610:	e002      	b.n	8001618 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	221c      	movs	r2, #28
 8001626:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001630:	d004      	beq.n	800163c <HAL_ADC_Start+0x168>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a2e      	ldr	r2, [pc, #184]	; (80016f0 <HAL_ADC_Start+0x21c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d106      	bne.n	800164a <HAL_ADC_Start+0x176>
 800163c:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <HAL_ADC_Start+0x220>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	2b00      	cmp	r3, #0
 8001646:	d03e      	beq.n	80016c6 <HAL_ADC_Start+0x1f2>
 8001648:	e005      	b.n	8001656 <HAL_ADC_Start+0x182>
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_ADC_Start+0x224>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	2b00      	cmp	r3, #0
 8001654:	d037      	beq.n	80016c6 <HAL_ADC_Start+0x1f2>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800165e:	d004      	beq.n	800166a <HAL_ADC_Start+0x196>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <HAL_ADC_Start+0x21c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d106      	bne.n	8001678 <HAL_ADC_Start+0x1a4>
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_ADC_Start+0x220>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	2b05      	cmp	r3, #5
 8001674:	d027      	beq.n	80016c6 <HAL_ADC_Start+0x1f2>
 8001676:	e005      	b.n	8001684 <HAL_ADC_Start+0x1b0>
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <HAL_ADC_Start+0x224>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 031f 	and.w	r3, r3, #31
 8001680:	2b05      	cmp	r3, #5
 8001682:	d020      	beq.n	80016c6 <HAL_ADC_Start+0x1f2>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800168c:	d004      	beq.n	8001698 <HAL_ADC_Start+0x1c4>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <HAL_ADC_Start+0x21c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d106      	bne.n	80016a6 <HAL_ADC_Start+0x1d2>
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_ADC_Start+0x220>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	2b09      	cmp	r3, #9
 80016a2:	d010      	beq.n	80016c6 <HAL_ADC_Start+0x1f2>
 80016a4:	e005      	b.n	80016b2 <HAL_ADC_Start+0x1de>
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_ADC_Start+0x224>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	2b09      	cmp	r3, #9
 80016b0:	d009      	beq.n	80016c6 <HAL_ADC_Start+0x1f2>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016ba:	d004      	beq.n	80016c6 <HAL_ADC_Start+0x1f2>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_ADC_Start+0x228>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d10f      	bne.n	80016e6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 0204 	orr.w	r2, r2, #4
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	e006      	b.n	80016e6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80016e0:	e001      	b.n	80016e6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016e2:	2302      	movs	r3, #2
 80016e4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	50000100 	.word	0x50000100
 80016f4:	50000300 	.word	0x50000300
 80016f8:	50000700 	.word	0x50000700
 80016fc:	50000400 	.word	0x50000400

08001700 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_ADC_Stop+0x1a>
 8001716:	2302      	movs	r3, #2
 8001718:	e023      	b.n	8001762 <HAL_ADC_Stop+0x62>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001722:	216c      	movs	r1, #108	; 0x6c
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fdc5 	bl	80022b4 <ADC_ConversionStop>
 800172a:	4603      	mov	r3, r0
 800172c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d111      	bne.n	8001758 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fd5d 	bl	80021f4 <ADC_Disable>
 800173a:	4603      	mov	r3, r0
 800173c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	f043 0201 	orr.w	r2, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	2b08      	cmp	r3, #8
 8001780:	d102      	bne.n	8001788 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001782:	2308      	movs	r3, #8
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e03a      	b.n	80017fe <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001790:	d004      	beq.n	800179c <HAL_ADC_PollForConversion+0x30>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a6e      	ldr	r2, [pc, #440]	; (8001950 <HAL_ADC_PollForConversion+0x1e4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d101      	bne.n	80017a0 <HAL_ADC_PollForConversion+0x34>
 800179c:	4b6d      	ldr	r3, [pc, #436]	; (8001954 <HAL_ADC_PollForConversion+0x1e8>)
 800179e:	e000      	b.n	80017a2 <HAL_ADC_PollForConversion+0x36>
 80017a0:	4b6d      	ldr	r3, [pc, #436]	; (8001958 <HAL_ADC_PollForConversion+0x1ec>)
 80017a2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d112      	bne.n	80017d6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d11d      	bne.n	80017fa <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f043 0220 	orr.w	r2, r3, #32
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e0b8      	b.n	8001948 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00b      	beq.n	80017fa <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f043 0220 	orr.w	r2, r3, #32
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0a6      	b.n	8001948 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80017fa:	230c      	movs	r3, #12
 80017fc:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001806:	d004      	beq.n	8001812 <HAL_ADC_PollForConversion+0xa6>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a50      	ldr	r2, [pc, #320]	; (8001950 <HAL_ADC_PollForConversion+0x1e4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d106      	bne.n	8001820 <HAL_ADC_PollForConversion+0xb4>
 8001812:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_ADC_PollForConversion+0x1e8>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	2b00      	cmp	r3, #0
 800181c:	d010      	beq.n	8001840 <HAL_ADC_PollForConversion+0xd4>
 800181e:	e005      	b.n	800182c <HAL_ADC_PollForConversion+0xc0>
 8001820:	4b4d      	ldr	r3, [pc, #308]	; (8001958 <HAL_ADC_PollForConversion+0x1ec>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	2b00      	cmp	r3, #0
 800182a:	d009      	beq.n	8001840 <HAL_ADC_PollForConversion+0xd4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001834:	d004      	beq.n	8001840 <HAL_ADC_PollForConversion+0xd4>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a48      	ldr	r2, [pc, #288]	; (800195c <HAL_ADC_PollForConversion+0x1f0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d104      	bne.n	800184a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	e00f      	b.n	800186a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001852:	d004      	beq.n	800185e <HAL_ADC_PollForConversion+0xf2>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a3d      	ldr	r2, [pc, #244]	; (8001950 <HAL_ADC_PollForConversion+0x1e4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d102      	bne.n	8001864 <HAL_ADC_PollForConversion+0xf8>
 800185e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001862:	e000      	b.n	8001866 <HAL_ADC_PollForConversion+0xfa>
 8001864:	4b3d      	ldr	r3, [pc, #244]	; (800195c <HAL_ADC_PollForConversion+0x1f0>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800186a:	f7ff fc25 	bl	80010b8 <HAL_GetTick>
 800186e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001870:	e01a      	b.n	80018a8 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001878:	d016      	beq.n	80018a8 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d007      	beq.n	8001890 <HAL_ADC_PollForConversion+0x124>
 8001880:	f7ff fc1a 	bl	80010b8 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d20b      	bcs.n	80018a8 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f043 0204 	orr.w	r2, r3, #4
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e04f      	b.n	8001948 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0dd      	beq.n	8001872 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d131      	bne.n	8001934 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d12c      	bne.n	8001934 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d125      	bne.n	8001934 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d112      	bne.n	800191c <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d112      	bne.n	8001934 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
 800191a:	e00b      	b.n	8001934 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f043 0220 	orr.w	r2, r3, #32
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d103      	bne.n	8001946 <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	50000100 	.word	0x50000100
 8001954:	50000300 	.word	0x50000300
 8001958:	50000700 	.word	0x50000700
 800195c:	50000400 	.word	0x50000400

08001960 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800197c:	b480      	push	{r7}
 800197e:	b09b      	sub	sp, #108	; 0x6c
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_ADC_ConfigChannel+0x22>
 800199a:	2302      	movs	r3, #2
 800199c:	e2cb      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x5ba>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f040 82af 	bne.w	8001f14 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d81c      	bhi.n	80019f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	461a      	mov	r2, r3
 80019d2:	231f      	movs	r3, #31
 80019d4:	4093      	lsls	r3, r2
 80019d6:	43db      	mvns	r3, r3
 80019d8:	4019      	ands	r1, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa00 f203 	lsl.w	r2, r0, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	631a      	str	r2, [r3, #48]	; 0x30
 80019f6:	e063      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	d81e      	bhi.n	8001a3e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	3b1e      	subs	r3, #30
 8001a14:	221f      	movs	r2, #31
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	4019      	ands	r1, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	3b1e      	subs	r3, #30
 8001a30:	fa00 f203 	lsl.w	r2, r0, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a3c:	e040      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b0e      	cmp	r3, #14
 8001a44:	d81e      	bhi.n	8001a84 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	3b3c      	subs	r3, #60	; 0x3c
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4019      	ands	r1, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	3b3c      	subs	r3, #60	; 0x3c
 8001a76:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38
 8001a82:	e01d      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	3b5a      	subs	r3, #90	; 0x5a
 8001a98:	221f      	movs	r2, #31
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	4019      	ands	r1, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	3b5a      	subs	r3, #90	; 0x5a
 8001ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 80e5 	bne.w	8001c9a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	d91c      	bls.n	8001b12 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6999      	ldr	r1, [r3, #24]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b1e      	subs	r3, #30
 8001aea:	2207      	movs	r2, #7
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	4019      	ands	r1, r3
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6898      	ldr	r0, [r3, #8]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	3b1e      	subs	r3, #30
 8001b04:	fa00 f203 	lsl.w	r2, r0, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	619a      	str	r2, [r3, #24]
 8001b10:	e019      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6959      	ldr	r1, [r3, #20]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	2207      	movs	r2, #7
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	4019      	ands	r1, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6898      	ldr	r0, [r3, #8]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	08db      	lsrs	r3, r3, #3
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d84f      	bhi.n	8001c08 <HAL_ADC_ConfigChannel+0x28c>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <HAL_ADC_ConfigChannel+0x1f4>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001ba3 	.word	0x08001ba3
 8001b78:	08001bc5 	.word	0x08001bc5
 8001b7c:	08001be7 	.word	0x08001be7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b86:	4b9f      	ldr	r3, [pc, #636]	; (8001e04 <HAL_ADC_ConfigChannel+0x488>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	0691      	lsls	r1, r2, #26
 8001b90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b92:	430a      	orrs	r2, r1
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b9e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ba0:	e07e      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ba8:	4b96      	ldr	r3, [pc, #600]	; (8001e04 <HAL_ADC_ConfigChannel+0x488>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	0691      	lsls	r1, r2, #26
 8001bb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bc0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bc2:	e06d      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001bca:	4b8e      	ldr	r3, [pc, #568]	; (8001e04 <HAL_ADC_ConfigChannel+0x488>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	0691      	lsls	r1, r2, #26
 8001bd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001be2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001be4:	e05c      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001bec:	4b85      	ldr	r3, [pc, #532]	; (8001e04 <HAL_ADC_ConfigChannel+0x488>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	0691      	lsls	r1, r2, #26
 8001bf6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c04:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c06:	e04b      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	069b      	lsls	r3, r3, #26
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d107      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c2a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	069b      	lsls	r3, r3, #26
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d107      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c4e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	069b      	lsls	r3, r3, #26
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d107      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c72:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	069b      	lsls	r3, r3, #26
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d10a      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c96:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001c98:	e001      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001c9a:	bf00      	nop
 8001c9c:	e000      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001c9e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d108      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x344>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x344>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x346>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 8131 	bne.w	8001f2a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d00f      	beq.n	8001cf0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	400a      	ands	r2, r1
 8001cea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001cee:	e049      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b09      	cmp	r3, #9
 8001d10:	d91c      	bls.n	8001d4c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6999      	ldr	r1, [r3, #24]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	3b1b      	subs	r3, #27
 8001d24:	2207      	movs	r2, #7
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	4019      	ands	r1, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6898      	ldr	r0, [r3, #8]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3b1b      	subs	r3, #27
 8001d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	619a      	str	r2, [r3, #24]
 8001d4a:	e01b      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6959      	ldr	r1, [r3, #20]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	2207      	movs	r2, #7
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4019      	ands	r1, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6898      	ldr	r0, [r3, #8]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d8c:	d004      	beq.n	8001d98 <HAL_ADC_ConfigChannel+0x41c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <HAL_ADC_ConfigChannel+0x48c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x420>
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_ADC_ConfigChannel+0x490>)
 8001d9a:	e000      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x422>
 8001d9c:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <HAL_ADC_ConfigChannel+0x494>)
 8001d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b10      	cmp	r3, #16
 8001da6:	d105      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d015      	beq.n	8001de0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001db8:	2b11      	cmp	r3, #17
 8001dba:	d105      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00b      	beq.n	8001de0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001dcc:	2b12      	cmp	r3, #18
 8001dce:	f040 80ac 	bne.w	8001f2a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 80a5 	bne.w	8001f2a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001de8:	d102      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x474>
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <HAL_ADC_ConfigChannel+0x48c>)
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	e023      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x4bc>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_ADC_ConfigChannel+0x48c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d10c      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x498>
 8001dfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	e01a      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x4bc>
 8001e02:	bf00      	nop
 8001e04:	83fff000 	.word	0x83fff000
 8001e08:	50000100 	.word	0x50000100
 8001e0c:	50000300 	.word	0x50000300
 8001e10:	50000700 	.word	0x50000700
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a4a      	ldr	r2, [pc, #296]	; (8001f44 <HAL_ADC_ConfigChannel+0x5c8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d102      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x4a8>
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <HAL_ADC_ConfigChannel+0x5cc>)
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e009      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x4bc>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a47      	ldr	r2, [pc, #284]	; (8001f48 <HAL_ADC_ConfigChannel+0x5cc>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d102      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x4b8>
 8001e2e:	4b45      	ldr	r3, [pc, #276]	; (8001f44 <HAL_ADC_ConfigChannel+0x5c8>)
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e001      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x4bc>
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d108      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x4dc>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x4dc>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x4de>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d150      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e5e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d010      	beq.n	8001e86 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x504>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x504>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x506>
 8001e80:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d13c      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d11d      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x54e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e96:	d118      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_ADC_ConfigChannel+0x5d0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a29      	ldr	r2, [pc, #164]	; (8001f50 <HAL_ADC_ConfigChannel+0x5d4>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	0c9a      	lsrs	r2, r3, #18
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eba:	e002      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f9      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ec8:	e02e      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b11      	cmp	r3, #17
 8001ed0:	d10b      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x56e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eda:	d106      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ee8:	e01e      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b12      	cmp	r3, #18
 8001ef0:	d11a      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001efe:	e013      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f12:	e00a      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f043 0220 	orr.w	r2, r3, #32
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f26:	e000      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f28:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	376c      	adds	r7, #108	; 0x6c
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	50000400 	.word	0x50000400
 8001f48:	50000500 	.word	0x50000500
 8001f4c:	20000010 	.word	0x20000010
 8001f50:	431bde83 	.word	0x431bde83

08001f54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b099      	sub	sp, #100	; 0x64
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f6c:	d102      	bne.n	8001f74 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001f6e:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	e01a      	b.n	8001faa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a6a      	ldr	r2, [pc, #424]	; (8002124 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d103      	bne.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001f7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	e011      	b.n	8001faa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a67      	ldr	r2, [pc, #412]	; (8002128 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d102      	bne.n	8001f96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f90:	4b66      	ldr	r3, [pc, #408]	; (800212c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	e009      	b.n	8001faa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a64      	ldr	r2, [pc, #400]	; (800212c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d102      	bne.n	8001fa6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001fa0:	4b61      	ldr	r3, [pc, #388]	; (8002128 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	e001      	b.n	8001faa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0b0      	b.n	8002116 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e0a9      	b.n	8002116 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f040 808d 	bne.w	80020f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 8086 	bne.w	80020f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ff0:	d004      	beq.n	8001ffc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a4b      	ldr	r2, [pc, #300]	; (8002124 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d101      	bne.n	8002000 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001ffc:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001ffe:	e000      	b.n	8002002 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002000:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002002:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d040      	beq.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800200c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800201e:	035b      	lsls	r3, r3, #13
 8002020:	430b      	orrs	r3, r1
 8002022:	431a      	orrs	r2, r3
 8002024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002026:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d108      	bne.n	8002048 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002048:	2300      	movs	r3, #0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d15c      	bne.n	8002108 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800206a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800206c:	2b00      	cmp	r3, #0
 800206e:	d14b      	bne.n	8002108 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002070:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002078:	f023 030f 	bic.w	r3, r3, #15
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	6811      	ldr	r1, [r2, #0]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	6892      	ldr	r2, [r2, #8]
 8002084:	430a      	orrs	r2, r1
 8002086:	431a      	orrs	r2, r3
 8002088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800208a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800208c:	e03c      	b.n	8002108 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800208e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002098:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d108      	bne.n	80020ba <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d123      	bne.n	8002108 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80020dc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d112      	bne.n	8002108 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80020e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020ea:	f023 030f 	bic.w	r3, r3, #15
 80020ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020f0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020f2:	e009      	b.n	8002108 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002106:	e000      	b.n	800210a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002108:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002112:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002116:	4618      	mov	r0, r3
 8002118:	3764      	adds	r7, #100	; 0x64
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	50000100 	.word	0x50000100
 8002128:	50000400 	.word	0x50000400
 800212c:	50000500 	.word	0x50000500
 8002130:	50000300 	.word	0x50000300
 8002134:	50000700 	.word	0x50000700

08002138 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d108      	bne.n	8002164 <ADC_Enable+0x2c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <ADC_Enable+0x2c>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <ADC_Enable+0x2e>
 8002164:	2300      	movs	r3, #0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d13c      	bne.n	80021e4 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <ADC_Enable+0xb8>)
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00d      	beq.n	8002194 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f043 0210 	orr.w	r2, r3, #16
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e028      	b.n	80021e6 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80021a4:	f7fe ff88 	bl	80010b8 <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021aa:	e014      	b.n	80021d6 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021ac:	f7fe ff84 	bl	80010b8 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d90d      	bls.n	80021d6 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e007      	b.n	80021e6 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d1e3      	bne.n	80021ac <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	8000003f 	.word	0x8000003f

080021f4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <ADC_Disable+0x2c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <ADC_Disable+0x2c>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <ADC_Disable+0x2e>
 8002220:	2300      	movs	r3, #0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d040      	beq.n	80022a8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 030d 	and.w	r3, r3, #13
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10f      	bne.n	8002254 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0202 	orr.w	r2, r2, #2
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2203      	movs	r2, #3
 800224a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800224c:	f7fe ff34 	bl	80010b8 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002252:	e022      	b.n	800229a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f043 0210 	orr.w	r2, r3, #16
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e01c      	b.n	80022aa <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002270:	f7fe ff22 	bl	80010b8 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d90d      	bls.n	800229a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f043 0210 	orr.w	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f043 0201 	orr.w	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e007      	b.n	80022aa <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d0e3      	beq.n	8002270 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 8093 	beq.w	8002400 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022e8:	d12a      	bne.n	8002340 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d126      	bne.n	8002340 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d122      	bne.n	8002340 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80022fa:	230c      	movs	r3, #12
 80022fc:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80022fe:	e014      	b.n	800232a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4a42      	ldr	r2, [pc, #264]	; (800240c <ADC_ConversionStop+0x158>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d90d      	bls.n	8002324 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f043 0210 	orr.w	r2, r3, #16
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e06e      	b.n	8002402 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	3301      	adds	r3, #1
 8002328:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	d1e3      	bne.n	8002300 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2240      	movs	r2, #64	; 0x40
 800233e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b60      	cmp	r3, #96	; 0x60
 8002344:	d015      	beq.n	8002372 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b04      	cmp	r3, #4
 8002352:	d10e      	bne.n	8002372 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800235e:	2b00      	cmp	r3, #0
 8002360:	d107      	bne.n	8002372 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0210 	orr.w	r2, r2, #16
 8002370:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d015      	beq.n	80023a4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b08      	cmp	r3, #8
 8002384:	d10e      	bne.n	80023a4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002390:	2b00      	cmp	r3, #0
 8002392:	d107      	bne.n	80023a4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0220 	orr.w	r2, r2, #32
 80023a2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b60      	cmp	r3, #96	; 0x60
 80023a8:	d004      	beq.n	80023b4 <ADC_ConversionStop+0x100>
 80023aa:	2b6c      	cmp	r3, #108	; 0x6c
 80023ac:	d105      	bne.n	80023ba <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80023ae:	230c      	movs	r3, #12
 80023b0:	617b      	str	r3, [r7, #20]
        break;
 80023b2:	e005      	b.n	80023c0 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80023b4:	2308      	movs	r3, #8
 80023b6:	617b      	str	r3, [r7, #20]
        break;
 80023b8:	e002      	b.n	80023c0 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80023ba:	2304      	movs	r3, #4
 80023bc:	617b      	str	r3, [r7, #20]
        break;
 80023be:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80023c0:	f7fe fe7a 	bl	80010b8 <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80023c6:	e014      	b.n	80023f2 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80023c8:	f7fe fe76 	bl	80010b8 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b0b      	cmp	r3, #11
 80023d4:	d90d      	bls.n	80023f2 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f043 0210 	orr.w	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f043 0201 	orr.w	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e007      	b.n	8002402 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e3      	bne.n	80023c8 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	000993ff 	.word	0x000993ff

08002410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800243c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002442:	4a04      	ldr	r2, [pc, #16]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	60d3      	str	r3, [r2, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	; (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	; (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	bf28      	it	cs
 80024e6:	2304      	movcs	r3, #4
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
         );
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002540:	d301      	bcc.n	8002546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <SysTick_Config+0x40>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254e:	210f      	movs	r1, #15
 8002550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002554:	f7ff ff8e 	bl	8002474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <SysTick_Config+0x40>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <SysTick_Config+0x40>)
 8002560:	2207      	movs	r2, #7
 8002562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010

08002574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff47 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800259c:	f7ff ff5c 	bl	8002458 <__NVIC_GetPriorityGrouping>
 80025a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	6978      	ldr	r0, [r7, #20]
 80025a8:	f7ff ff8e 	bl	80024c8 <NVIC_EncodePriority>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff5d 	bl	8002474 <__NVIC_SetPriority>
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffb0 	bl	8002530 <SysTick_Config>
 80025d0:	4603      	mov	r3, r0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ea:	e154      	b.n	8002896 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	4013      	ands	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8146 	beq.w	8002890 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x38>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b12      	cmp	r3, #18
 8002612:	d123      	bne.n	800265c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	6939      	ldr	r1, [r7, #16]
 8002658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0203 	and.w	r2, r3, #3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d00b      	beq.n	80026b0 <HAL_GPIO_Init+0xd4>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d007      	beq.n	80026b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026a4:	2b11      	cmp	r3, #17
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b12      	cmp	r3, #18
 80026ae:	d130      	bne.n	8002712 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e6:	2201      	movs	r2, #1
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f003 0201 	and.w	r2, r3, #1
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2203      	movs	r2, #3
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80a0 	beq.w	8002890 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002750:	4b58      	ldr	r3, [pc, #352]	; (80028b4 <HAL_GPIO_Init+0x2d8>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	4a57      	ldr	r2, [pc, #348]	; (80028b4 <HAL_GPIO_Init+0x2d8>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6193      	str	r3, [r2, #24]
 800275c:	4b55      	ldr	r3, [pc, #340]	; (80028b4 <HAL_GPIO_Init+0x2d8>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002768:	4a53      	ldr	r2, [pc, #332]	; (80028b8 <HAL_GPIO_Init+0x2dc>)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002792:	d019      	beq.n	80027c8 <HAL_GPIO_Init+0x1ec>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a49      	ldr	r2, [pc, #292]	; (80028bc <HAL_GPIO_Init+0x2e0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d013      	beq.n	80027c4 <HAL_GPIO_Init+0x1e8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a48      	ldr	r2, [pc, #288]	; (80028c0 <HAL_GPIO_Init+0x2e4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00d      	beq.n	80027c0 <HAL_GPIO_Init+0x1e4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a47      	ldr	r2, [pc, #284]	; (80028c4 <HAL_GPIO_Init+0x2e8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <HAL_GPIO_Init+0x1e0>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a46      	ldr	r2, [pc, #280]	; (80028c8 <HAL_GPIO_Init+0x2ec>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d101      	bne.n	80027b8 <HAL_GPIO_Init+0x1dc>
 80027b4:	2304      	movs	r3, #4
 80027b6:	e008      	b.n	80027ca <HAL_GPIO_Init+0x1ee>
 80027b8:	2305      	movs	r3, #5
 80027ba:	e006      	b.n	80027ca <HAL_GPIO_Init+0x1ee>
 80027bc:	2303      	movs	r3, #3
 80027be:	e004      	b.n	80027ca <HAL_GPIO_Init+0x1ee>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0x1ee>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_GPIO_Init+0x1ee>
 80027c8:	2300      	movs	r3, #0
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	f002 0203 	and.w	r2, r2, #3
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	4093      	lsls	r3, r2
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027da:	4937      	ldr	r1, [pc, #220]	; (80028b8 <HAL_GPIO_Init+0x2dc>)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e8:	4b38      	ldr	r3, [pc, #224]	; (80028cc <HAL_GPIO_Init+0x2f0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800280c:	4a2f      	ldr	r2, [pc, #188]	; (80028cc <HAL_GPIO_Init+0x2f0>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002812:	4b2e      	ldr	r3, [pc, #184]	; (80028cc <HAL_GPIO_Init+0x2f0>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002836:	4a25      	ldr	r2, [pc, #148]	; (80028cc <HAL_GPIO_Init+0x2f0>)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283c:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_GPIO_Init+0x2f0>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002860:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_GPIO_Init+0x2f0>)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_GPIO_Init+0x2f0>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800288a:	4a10      	ldr	r2, [pc, #64]	; (80028cc <HAL_GPIO_Init+0x2f0>)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3301      	adds	r3, #1
 8002894:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f47f aea3 	bne.w	80025ec <HAL_GPIO_Init+0x10>
  }
}
 80028a6:	bf00      	nop
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40010000 	.word	0x40010000
 80028bc:	48000400 	.word	0x48000400
 80028c0:	48000800 	.word	0x48000800
 80028c4:	48000c00 	.word	0x48000c00
 80028c8:	48001000 	.word	0x48001000
 80028cc:	40010400 	.word	0x40010400

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028ec:	e002      	b.n	80028f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002906:	af00      	add	r7, sp, #0
 8002908:	1d3b      	adds	r3, r7, #4
 800290a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	f000 bef4 	b.w	8003702 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 816a 	beq.w	8002bfe <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800292a:	4bb3      	ldr	r3, [pc, #716]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b04      	cmp	r3, #4
 8002934:	d00c      	beq.n	8002950 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002936:	4bb0      	ldr	r3, [pc, #704]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b08      	cmp	r3, #8
 8002940:	d159      	bne.n	80029f6 <HAL_RCC_OscConfig+0xf6>
 8002942:	4bad      	ldr	r3, [pc, #692]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294e:	d152      	bne.n	80029f6 <HAL_RCC_OscConfig+0xf6>
 8002950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002954:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002964:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d102      	bne.n	8002982 <HAL_RCC_OscConfig+0x82>
 800297c:	4b9e      	ldr	r3, [pc, #632]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	e015      	b.n	80029ae <HAL_RCC_OscConfig+0xae>
 8002982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002986:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800299e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029aa:	4b93      	ldr	r3, [pc, #588]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029b2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80029b6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029ba:	fa92 f2a2 	rbit	r2, r2
 80029be:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80029c2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80029c6:	fab2 f282 	clz	r2, r2
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	f042 0220 	orr.w	r2, r2, #32
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f002 021f 	and.w	r2, r2, #31
 80029d6:	2101      	movs	r1, #1
 80029d8:	fa01 f202 	lsl.w	r2, r1, r2
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 810c 	beq.w	8002bfc <HAL_RCC_OscConfig+0x2fc>
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 8106 	bne.w	8002bfc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f000 be86 	b.w	8003702 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a00:	d106      	bne.n	8002a10 <HAL_RCC_OscConfig+0x110>
 8002a02:	4b7d      	ldr	r3, [pc, #500]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a7c      	ldr	r2, [pc, #496]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e030      	b.n	8002a72 <HAL_RCC_OscConfig+0x172>
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x134>
 8002a1a:	4b77      	ldr	r3, [pc, #476]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a76      	ldr	r2, [pc, #472]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b74      	ldr	r3, [pc, #464]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a73      	ldr	r2, [pc, #460]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e01e      	b.n	8002a72 <HAL_RCC_OscConfig+0x172>
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCC_OscConfig+0x15a>
 8002a40:	4b6d      	ldr	r3, [pc, #436]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a6c      	ldr	r2, [pc, #432]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a69      	ldr	r2, [pc, #420]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e00b      	b.n	8002a72 <HAL_RCC_OscConfig+0x172>
 8002a5a:	4b67      	ldr	r3, [pc, #412]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a66      	ldr	r2, [pc, #408]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	4b64      	ldr	r3, [pc, #400]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a63      	ldr	r2, [pc, #396]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a72:	4b61      	ldr	r3, [pc, #388]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	f023 020f 	bic.w	r2, r3, #15
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	495d      	ldr	r1, [pc, #372]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d059      	beq.n	8002b44 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7fe fb12 	bl	80010b8 <HAL_GetTick>
 8002a94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a9a:	f7fe fb0d 	bl	80010b8 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	; 0x64
 8002aa8:	d902      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	f000 be29 	b.w	8003702 <HAL_RCC_OscConfig+0xe02>
 8002ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002ac4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d102      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x1e2>
 8002adc:	4b46      	ldr	r3, [pc, #280]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	e015      	b.n	8002b0e <HAL_RCC_OscConfig+0x20e>
 8002ae2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ae6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002af6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002afa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002afe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b12:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b16:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b1a:	fa92 f2a2 	rbit	r2, r2
 8002b1e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b22:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b26:	fab2 f282 	clz	r2, r2
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	f042 0220 	orr.w	r2, r2, #32
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	f002 021f 	and.w	r2, r2, #31
 8002b36:	2101      	movs	r1, #1
 8002b38:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0ab      	beq.n	8002a9a <HAL_RCC_OscConfig+0x19a>
 8002b42:	e05c      	b.n	8002bfe <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fe fab8 	bl	80010b8 <HAL_GetTick>
 8002b48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b4e:	f7fe fab3 	bl	80010b8 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d902      	bls.n	8002b64 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	f000 bdcf 	b.w	8003702 <HAL_RCC_OscConfig+0xe02>
 8002b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b68:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b78:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d102      	bne.n	8002b96 <HAL_RCC_OscConfig+0x296>
 8002b90:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	e015      	b.n	8002bc2 <HAL_RCC_OscConfig+0x2c2>
 8002b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b9a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002bb2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_RCC_OscConfig+0x2f8>)
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bc6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002bca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002bce:	fa92 f2a2 	rbit	r2, r2
 8002bd2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002bd6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002bda:	fab2 f282 	clz	r2, r2
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	f042 0220 	orr.w	r2, r2, #32
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	f002 021f 	and.w	r2, r2, #31
 8002bea:	2101      	movs	r1, #1
 8002bec:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ab      	bne.n	8002b4e <HAL_RCC_OscConfig+0x24e>
 8002bf6:	e002      	b.n	8002bfe <HAL_RCC_OscConfig+0x2fe>
 8002bf8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 816f 	beq.w	8002eec <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c0e:	4bd0      	ldr	r3, [pc, #832]	; (8002f50 <HAL_RCC_OscConfig+0x650>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c1a:	4bcd      	ldr	r3, [pc, #820]	; (8002f50 <HAL_RCC_OscConfig+0x650>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d16c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x400>
 8002c26:	4bca      	ldr	r3, [pc, #808]	; (8002f50 <HAL_RCC_OscConfig+0x650>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d166      	bne.n	8002d00 <HAL_RCC_OscConfig+0x400>
 8002c32:	2302      	movs	r3, #2
 8002c34:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c44:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d102      	bne.n	8002c62 <HAL_RCC_OscConfig+0x362>
 8002c5c:	4bbc      	ldr	r3, [pc, #752]	; (8002f50 <HAL_RCC_OscConfig+0x650>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	e013      	b.n	8002c8a <HAL_RCC_OscConfig+0x38a>
 8002c62:	2302      	movs	r3, #2
 8002c64:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c74:	2302      	movs	r3, #2
 8002c76:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c86:	4bb2      	ldr	r3, [pc, #712]	; (8002f50 <HAL_RCC_OscConfig+0x650>)
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c90:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c94:	fa92 f2a2 	rbit	r2, r2
 8002c98:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002c9c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ca0:	fab2 f282 	clz	r2, r2
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	f042 0220 	orr.w	r2, r2, #32
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	f002 021f 	and.w	r2, r2, #31
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_RCC_OscConfig+0x3cc>
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f000 bd1b 	b.w	8003702 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4ba0      	ldr	r3, [pc, #640]	; (8002f50 <HAL_RCC_OscConfig+0x650>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	21f8      	movs	r1, #248	; 0xf8
 8002cdc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ce4:	fa91 f1a1 	rbit	r1, r1
 8002ce8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002cec:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002cf0:	fab1 f181 	clz	r1, r1
 8002cf4:	b2c9      	uxtb	r1, r1
 8002cf6:	408b      	lsls	r3, r1
 8002cf8:	4995      	ldr	r1, [pc, #596]	; (8002f50 <HAL_RCC_OscConfig+0x650>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	e0f5      	b.n	8002eec <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8085 	beq.w	8002e16 <HAL_RCC_OscConfig+0x516>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	461a      	mov	r2, r3
 8002d34:	2301      	movs	r3, #1
 8002d36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fe f9be 	bl	80010b8 <HAL_GetTick>
 8002d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d42:	f7fe f9b9 	bl	80010b8 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d902      	bls.n	8002d58 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	f000 bcd5 	b.w	8003702 <HAL_RCC_OscConfig+0xe02>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d102      	bne.n	8002d88 <HAL_RCC_OscConfig+0x488>
 8002d82:	4b73      	ldr	r3, [pc, #460]	; (8002f50 <HAL_RCC_OscConfig+0x650>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	e013      	b.n	8002db0 <HAL_RCC_OscConfig+0x4b0>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002da0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002dac:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <HAL_RCC_OscConfig+0x650>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	2202      	movs	r2, #2
 8002db2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002db6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002dba:	fa92 f2a2 	rbit	r2, r2
 8002dbe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002dc2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002dc6:	fab2 f282 	clz	r2, r2
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	f042 0220 	orr.w	r2, r2, #32
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	f002 021f 	and.w	r2, r2, #31
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0af      	beq.n	8002d42 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de2:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <HAL_RCC_OscConfig+0x650>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	21f8      	movs	r1, #248	; 0xf8
 8002df2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002dfa:	fa91 f1a1 	rbit	r1, r1
 8002dfe:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e02:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e06:	fab1 f181 	clz	r1, r1
 8002e0a:	b2c9      	uxtb	r1, r1
 8002e0c:	408b      	lsls	r3, r1
 8002e0e:	4950      	ldr	r1, [pc, #320]	; (8002f50 <HAL_RCC_OscConfig+0x650>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
 8002e14:	e06a      	b.n	8002eec <HAL_RCC_OscConfig+0x5ec>
 8002e16:	2301      	movs	r3, #1
 8002e18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2300      	movs	r3, #0
 8002e40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fe f939 	bl	80010b8 <HAL_GetTick>
 8002e46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7fe f934 	bl	80010b8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d902      	bls.n	8002e62 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	f000 bc50 	b.w	8003702 <HAL_RCC_OscConfig+0xe02>
 8002e62:	2302      	movs	r3, #2
 8002e64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d102      	bne.n	8002e92 <HAL_RCC_OscConfig+0x592>
 8002e8c:	4b30      	ldr	r3, [pc, #192]	; (8002f50 <HAL_RCC_OscConfig+0x650>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	e013      	b.n	8002eba <HAL_RCC_OscConfig+0x5ba>
 8002e92:	2302      	movs	r3, #2
 8002e94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002eaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002eb6:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_RCC_OscConfig+0x650>)
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002ec0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ec4:	fa92 f2a2 	rbit	r2, r2
 8002ec8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002ecc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002ed0:	fab2 f282 	clz	r2, r2
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	f042 0220 	orr.w	r2, r2, #32
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	f002 021f 	and.w	r2, r2, #31
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1af      	bne.n	8002e4c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80da 	beq.w	80030b0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d069      	beq.n	8002fda <HAL_RCC_OscConfig+0x6da>
 8002f06:	2301      	movs	r3, #1
 8002f08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_OscConfig+0x654>)
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f30:	f7fe f8c2 	bl	80010b8 <HAL_GetTick>
 8002f34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f38:	e00e      	b.n	8002f58 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3a:	f7fe f8bd 	bl	80010b8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d906      	bls.n	8002f58 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e3d9      	b.n	8003702 <HAL_RCC_OscConfig+0xe02>
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	10908120 	.word	0x10908120
 8002f58:	2302      	movs	r3, #2
 8002f5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f6a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f6e:	2202      	movs	r2, #2
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	fa93 f2a3 	rbit	r2, r3
 8002f7c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f86:	2202      	movs	r2, #2
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	fa93 f2a3 	rbit	r2, r3
 8002f94:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002f98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9a:	4ba5      	ldr	r3, [pc, #660]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 8002f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f9e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	6019      	str	r1, [r3, #0]
 8002fa6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	fa93 f1a3 	rbit	r1, r3
 8002fb0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fb4:	6019      	str	r1, [r3, #0]
  return result;
 8002fb6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	2101      	movs	r1, #1
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0b0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x63a>
 8002fd8:	e06a      	b.n	80030b0 <HAL_RCC_OscConfig+0x7b0>
 8002fda:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	fa93 f2a3 	rbit	r2, r3
 8002fec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ff0:	601a      	str	r2, [r3, #0]
  return result;
 8002ff2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ff6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b8c      	ldr	r3, [pc, #560]	; (8003234 <HAL_RCC_OscConfig+0x934>)
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	461a      	mov	r2, r3
 8003008:	2300      	movs	r3, #0
 800300a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300c:	f7fe f854 	bl	80010b8 <HAL_GetTick>
 8003010:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003014:	e009      	b.n	800302a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003016:	f7fe f84f 	bl	80010b8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e36b      	b.n	8003702 <HAL_RCC_OscConfig+0xe02>
 800302a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800302e:	2202      	movs	r2, #2
 8003030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	fa93 f2a3 	rbit	r2, r3
 800303c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003046:	2202      	movs	r2, #2
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	fa93 f2a3 	rbit	r2, r3
 8003054:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800305e:	2202      	movs	r2, #2
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	fa93 f2a3 	rbit	r2, r3
 800306c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003070:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003072:	4b6f      	ldr	r3, [pc, #444]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 8003074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003076:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800307a:	2102      	movs	r1, #2
 800307c:	6019      	str	r1, [r3, #0]
 800307e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fa93 f1a3 	rbit	r1, r3
 8003088:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800308c:	6019      	str	r1, [r3, #0]
  return result;
 800308e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	2101      	movs	r1, #1
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1b2      	bne.n	8003016 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8158 	beq.w	8003370 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c6:	4b5a      	ldr	r3, [pc, #360]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d112      	bne.n	80030f8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	4b57      	ldr	r3, [pc, #348]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	4a56      	ldr	r2, [pc, #344]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030dc:	61d3      	str	r3, [r2, #28]
 80030de:	4b54      	ldr	r3, [pc, #336]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80030e6:	f107 0308 	add.w	r3, r7, #8
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f107 0308 	add.w	r3, r7, #8
 80030f0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	4b4f      	ldr	r3, [pc, #316]	; (8003238 <HAL_RCC_OscConfig+0x938>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d11a      	bne.n	800313a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003104:	4b4c      	ldr	r3, [pc, #304]	; (8003238 <HAL_RCC_OscConfig+0x938>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a4b      	ldr	r2, [pc, #300]	; (8003238 <HAL_RCC_OscConfig+0x938>)
 800310a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003110:	f7fd ffd2 	bl	80010b8 <HAL_GetTick>
 8003114:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	e009      	b.n	800312e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311a:	f7fd ffcd 	bl	80010b8 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	; 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e2e9      	b.n	8003702 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	4b42      	ldr	r3, [pc, #264]	; (8003238 <HAL_RCC_OscConfig+0x938>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0ef      	beq.n	800311a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x852>
 8003144:	4b3a      	ldr	r3, [pc, #232]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4a39      	ldr	r2, [pc, #228]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6213      	str	r3, [r2, #32]
 8003150:	e02f      	b.n	80031b2 <HAL_RCC_OscConfig+0x8b2>
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10c      	bne.n	8003176 <HAL_RCC_OscConfig+0x876>
 800315c:	4b34      	ldr	r3, [pc, #208]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	4a33      	ldr	r2, [pc, #204]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	6213      	str	r3, [r2, #32]
 8003168:	4b31      	ldr	r3, [pc, #196]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	4a30      	ldr	r2, [pc, #192]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 800316e:	f023 0304 	bic.w	r3, r3, #4
 8003172:	6213      	str	r3, [r2, #32]
 8003174:	e01d      	b.n	80031b2 <HAL_RCC_OscConfig+0x8b2>
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b05      	cmp	r3, #5
 800317e:	d10c      	bne.n	800319a <HAL_RCC_OscConfig+0x89a>
 8003180:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4a2a      	ldr	r2, [pc, #168]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6213      	str	r3, [r2, #32]
 800318c:	4b28      	ldr	r3, [pc, #160]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4a27      	ldr	r2, [pc, #156]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6213      	str	r3, [r2, #32]
 8003198:	e00b      	b.n	80031b2 <HAL_RCC_OscConfig+0x8b2>
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	4a24      	ldr	r2, [pc, #144]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	6213      	str	r3, [r2, #32]
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4a21      	ldr	r2, [pc, #132]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 80031ac:	f023 0304 	bic.w	r3, r3, #4
 80031b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d06b      	beq.n	8003294 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031bc:	f7fd ff7c 	bl	80010b8 <HAL_GetTick>
 80031c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c4:	e00b      	b.n	80031de <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7fd ff77 	bl	80010b8 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e291      	b.n	8003702 <HAL_RCC_OscConfig+0xe02>
 80031de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80031e2:	2202      	movs	r2, #2
 80031e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	fa93 f2a3 	rbit	r2, r3
 80031f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80031fa:	2202      	movs	r2, #2
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	fa93 f2a3 	rbit	r2, r3
 8003208:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800320c:	601a      	str	r2, [r3, #0]
  return result;
 800320e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003212:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f043 0302 	orr.w	r3, r3, #2
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d109      	bne.n	800323c <HAL_RCC_OscConfig+0x93c>
 8003228:	4b01      	ldr	r3, [pc, #4]	; (8003230 <HAL_RCC_OscConfig+0x930>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	e014      	b.n	8003258 <HAL_RCC_OscConfig+0x958>
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	10908120 	.word	0x10908120
 8003238:	40007000 	.word	0x40007000
 800323c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003240:	2202      	movs	r2, #2
 8003242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	fa93 f2a3 	rbit	r2, r3
 800324e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	4bbb      	ldr	r3, [pc, #748]	; (8003544 <HAL_RCC_OscConfig+0xc44>)
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800325c:	2102      	movs	r1, #2
 800325e:	6011      	str	r1, [r2, #0]
 8003260:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	fa92 f1a2 	rbit	r1, r2
 800326a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800326e:	6011      	str	r1, [r2, #0]
  return result;
 8003270:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	fab2 f282 	clz	r2, r2
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	f002 021f 	and.w	r2, r2, #31
 8003286:	2101      	movs	r1, #1
 8003288:	fa01 f202 	lsl.w	r2, r1, r2
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d099      	beq.n	80031c6 <HAL_RCC_OscConfig+0x8c6>
 8003292:	e063      	b.n	800335c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003294:	f7fd ff10 	bl	80010b8 <HAL_GetTick>
 8003298:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329c:	e00b      	b.n	80032b6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329e:	f7fd ff0b 	bl	80010b8 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e225      	b.n	8003702 <HAL_RCC_OscConfig+0xe02>
 80032b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032ba:	2202      	movs	r2, #2
 80032bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	fa93 f2a3 	rbit	r2, r3
 80032c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032d2:	2202      	movs	r2, #2
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	fa93 f2a3 	rbit	r2, r3
 80032e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032e4:	601a      	str	r2, [r3, #0]
  return result;
 80032e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f043 0302 	orr.w	r3, r3, #2
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d102      	bne.n	8003306 <HAL_RCC_OscConfig+0xa06>
 8003300:	4b90      	ldr	r3, [pc, #576]	; (8003544 <HAL_RCC_OscConfig+0xc44>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	e00d      	b.n	8003322 <HAL_RCC_OscConfig+0xa22>
 8003306:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800330a:	2202      	movs	r2, #2
 800330c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f2a3 	rbit	r2, r3
 8003318:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	4b89      	ldr	r3, [pc, #548]	; (8003544 <HAL_RCC_OscConfig+0xc44>)
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003326:	2102      	movs	r1, #2
 8003328:	6011      	str	r1, [r2, #0]
 800332a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	fa92 f1a2 	rbit	r1, r2
 8003334:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003338:	6011      	str	r1, [r2, #0]
  return result;
 800333a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	fab2 f282 	clz	r2, r2
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	f002 021f 	and.w	r2, r2, #31
 8003350:	2101      	movs	r1, #1
 8003352:	fa01 f202 	lsl.w	r2, r1, r2
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1a0      	bne.n	800329e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800335c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003360:	2b01      	cmp	r3, #1
 8003362:	d105      	bne.n	8003370 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003364:	4b77      	ldr	r3, [pc, #476]	; (8003544 <HAL_RCC_OscConfig+0xc44>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	4a76      	ldr	r2, [pc, #472]	; (8003544 <HAL_RCC_OscConfig+0xc44>)
 800336a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 81c2 	beq.w	8003700 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800337c:	4b71      	ldr	r3, [pc, #452]	; (8003544 <HAL_RCC_OscConfig+0xc44>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	f000 819c 	beq.w	80036c2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338a:	1d3b      	adds	r3, r7, #4
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	2b02      	cmp	r3, #2
 8003392:	f040 8114 	bne.w	80035be <HAL_RCC_OscConfig+0xcbe>
 8003396:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800339a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800339e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	fa93 f2a3 	rbit	r2, r3
 80033aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033ae:	601a      	str	r2, [r3, #0]
  return result;
 80033b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	461a      	mov	r2, r3
 80033c8:	2300      	movs	r3, #0
 80033ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fd fe74 	bl	80010b8 <HAL_GetTick>
 80033d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d4:	e009      	b.n	80033ea <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fd fe6f 	bl	80010b8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e18b      	b.n	8003702 <HAL_RCC_OscConfig+0xe02>
 80033ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80033ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	fa93 f2a3 	rbit	r2, r3
 80033fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003402:	601a      	str	r2, [r3, #0]
  return result;
 8003404:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003408:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d102      	bne.n	8003424 <HAL_RCC_OscConfig+0xb24>
 800341e:	4b49      	ldr	r3, [pc, #292]	; (8003544 <HAL_RCC_OscConfig+0xc44>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	e01b      	b.n	800345c <HAL_RCC_OscConfig+0xb5c>
 8003424:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003428:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800342c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	fa93 f2a3 	rbit	r2, r3
 8003438:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003442:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	fa93 f2a3 	rbit	r2, r3
 8003452:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	4b3a      	ldr	r3, [pc, #232]	; (8003544 <HAL_RCC_OscConfig+0xc44>)
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003460:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003464:	6011      	str	r1, [r2, #0]
 8003466:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	fa92 f1a2 	rbit	r1, r2
 8003470:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003474:	6011      	str	r1, [r2, #0]
  return result;
 8003476:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	fab2 f282 	clz	r2, r2
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	f042 0220 	orr.w	r2, r2, #32
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	f002 021f 	and.w	r2, r2, #31
 800348c:	2101      	movs	r1, #1
 800348e:	fa01 f202 	lsl.w	r2, r1, r2
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d19e      	bne.n	80033d6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003498:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <HAL_RCC_OscConfig+0xc44>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034a0:	1d3b      	adds	r3, r7, #4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	430b      	orrs	r3, r1
 80034ae:	4925      	ldr	r1, [pc, #148]	; (8003544 <HAL_RCC_OscConfig+0xc44>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
 80034b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	fa93 f2a3 	rbit	r2, r3
 80034c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034cc:	601a      	str	r2, [r3, #0]
  return result;
 80034ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034d2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	461a      	mov	r2, r3
 80034e6:	2301      	movs	r3, #1
 80034e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fd fde5 	bl	80010b8 <HAL_GetTick>
 80034ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f2:	e009      	b.n	8003508 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fd fde0 	bl	80010b8 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e0fc      	b.n	8003702 <HAL_RCC_OscConfig+0xe02>
 8003508:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800350c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	fa93 f2a3 	rbit	r2, r3
 800351c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003520:	601a      	str	r2, [r3, #0]
  return result;
 8003522:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003526:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_RCC_OscConfig+0xc48>
 800353c:	4b01      	ldr	r3, [pc, #4]	; (8003544 <HAL_RCC_OscConfig+0xc44>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	e01e      	b.n	8003580 <HAL_RCC_OscConfig+0xc80>
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800354c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	fa93 f2a3 	rbit	r2, r3
 800355c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003566:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	fa93 f2a3 	rbit	r2, r3
 8003576:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	4b63      	ldr	r3, [pc, #396]	; (800370c <HAL_RCC_OscConfig+0xe0c>)
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003584:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003588:	6011      	str	r1, [r2, #0]
 800358a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	fa92 f1a2 	rbit	r1, r2
 8003594:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003598:	6011      	str	r1, [r2, #0]
  return result;
 800359a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	fab2 f282 	clz	r2, r2
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	f042 0220 	orr.w	r2, r2, #32
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	f002 021f 	and.w	r2, r2, #31
 80035b0:	2101      	movs	r1, #1
 80035b2:	fa01 f202 	lsl.w	r2, r1, r2
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d09b      	beq.n	80034f4 <HAL_RCC_OscConfig+0xbf4>
 80035bc:	e0a0      	b.n	8003700 <HAL_RCC_OscConfig+0xe00>
 80035be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	fa93 f2a3 	rbit	r2, r3
 80035d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035d6:	601a      	str	r2, [r3, #0]
  return result;
 80035d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	461a      	mov	r2, r3
 80035f0:	2300      	movs	r3, #0
 80035f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fd fd60 	bl	80010b8 <HAL_GetTick>
 80035f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fc:	e009      	b.n	8003612 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fd fd5b 	bl	80010b8 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e077      	b.n	8003702 <HAL_RCC_OscConfig+0xe02>
 8003612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003616:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800361a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	fa93 f2a3 	rbit	r2, r3
 8003626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362a:	601a      	str	r2, [r3, #0]
  return result;
 800362c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003630:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d102      	bne.n	800364c <HAL_RCC_OscConfig+0xd4c>
 8003646:	4b31      	ldr	r3, [pc, #196]	; (800370c <HAL_RCC_OscConfig+0xe0c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	e01b      	b.n	8003684 <HAL_RCC_OscConfig+0xd84>
 800364c:	f107 0320 	add.w	r3, r7, #32
 8003650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	f107 0320 	add.w	r3, r7, #32
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	fa93 f2a3 	rbit	r2, r3
 8003660:	f107 031c 	add.w	r3, r7, #28
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f107 0318 	add.w	r3, r7, #24
 800366a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f107 0318 	add.w	r3, r7, #24
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	fa93 f2a3 	rbit	r2, r3
 800367a:	f107 0314 	add.w	r3, r7, #20
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	4b22      	ldr	r3, [pc, #136]	; (800370c <HAL_RCC_OscConfig+0xe0c>)
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	f107 0210 	add.w	r2, r7, #16
 8003688:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800368c:	6011      	str	r1, [r2, #0]
 800368e:	f107 0210 	add.w	r2, r7, #16
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	fa92 f1a2 	rbit	r1, r2
 8003698:	f107 020c 	add.w	r2, r7, #12
 800369c:	6011      	str	r1, [r2, #0]
  return result;
 800369e:	f107 020c 	add.w	r2, r7, #12
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	fab2 f282 	clz	r2, r2
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f042 0220 	orr.w	r2, r2, #32
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	f002 021f 	and.w	r2, r2, #31
 80036b4:	2101      	movs	r1, #1
 80036b6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d19e      	bne.n	80035fe <HAL_RCC_OscConfig+0xcfe>
 80036c0:	e01e      	b.n	8003700 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c2:	1d3b      	adds	r3, r7, #4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e018      	b.n	8003702 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <HAL_RCC_OscConfig+0xe0c>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036d8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036e0:	1d3b      	adds	r3, r7, #4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d108      	bne.n	80036fc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80036ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036f2:	1d3b      	adds	r3, r7, #4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40021000 	.word	0x40021000

08003710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b09e      	sub	sp, #120	; 0x78
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e162      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b90      	ldr	r3, [pc, #576]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d910      	bls.n	8003758 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b8d      	ldr	r3, [pc, #564]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	498b      	ldr	r1, [pc, #556]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b89      	ldr	r3, [pc, #548]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e14a      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003764:	4b82      	ldr	r3, [pc, #520]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	497f      	ldr	r1, [pc, #508]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80dc 	beq.w	800393c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d13c      	bne.n	8003806 <HAL_RCC_ClockConfig+0xf6>
 800378c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003790:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800379a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379c:	fab3 f383 	clz	r3, r3
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d102      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xa6>
 80037b0:	4b6f      	ldr	r3, [pc, #444]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	e00f      	b.n	80037d6 <HAL_RCC_ClockConfig+0xc6>
 80037b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	667b      	str	r3, [r7, #100]	; 0x64
 80037c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c8:	663b      	str	r3, [r7, #96]	; 0x60
 80037ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037d2:	4b67      	ldr	r3, [pc, #412]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037da:	65ba      	str	r2, [r7, #88]	; 0x58
 80037dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037de:	fa92 f2a2 	rbit	r2, r2
 80037e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80037e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037e6:	fab2 f282 	clz	r2, r2
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	f042 0220 	orr.w	r2, r2, #32
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	f002 021f 	and.w	r2, r2, #31
 80037f6:	2101      	movs	r1, #1
 80037f8:	fa01 f202 	lsl.w	r2, r1, r2
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d17b      	bne.n	80038fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e0f3      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d13c      	bne.n	8003888 <HAL_RCC_ClockConfig+0x178>
 800380e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003812:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800381c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d102      	bne.n	8003838 <HAL_RCC_ClockConfig+0x128>
 8003832:	4b4f      	ldr	r3, [pc, #316]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	e00f      	b.n	8003858 <HAL_RCC_ClockConfig+0x148>
 8003838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800383c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	647b      	str	r3, [r7, #68]	; 0x44
 8003846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800384a:	643b      	str	r3, [r7, #64]	; 0x40
 800384c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003854:	4b46      	ldr	r3, [pc, #280]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800385c:	63ba      	str	r2, [r7, #56]	; 0x38
 800385e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003860:	fa92 f2a2 	rbit	r2, r2
 8003864:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003868:	fab2 f282 	clz	r2, r2
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	f042 0220 	orr.w	r2, r2, #32
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f002 021f 	and.w	r2, r2, #31
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f202 	lsl.w	r2, r1, r2
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d13a      	bne.n	80038fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0b2      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
 8003888:	2302      	movs	r3, #2
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d102      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x1a0>
 80038aa:	4b31      	ldr	r3, [pc, #196]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	e00d      	b.n	80038cc <HAL_RCC_ClockConfig+0x1bc>
 80038b0:	2302      	movs	r3, #2
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	fa93 f3a3 	rbit	r3, r3
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
 80038bc:	2302      	movs	r3, #2
 80038be:	623b      	str	r3, [r7, #32]
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	4b29      	ldr	r3, [pc, #164]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	2202      	movs	r2, #2
 80038ce:	61ba      	str	r2, [r7, #24]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	fa92 f2a2 	rbit	r2, r2
 80038d6:	617a      	str	r2, [r7, #20]
  return result;
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	fab2 f282 	clz	r2, r2
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	f042 0220 	orr.w	r2, r2, #32
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	f002 021f 	and.w	r2, r2, #31
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e079      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	491a      	ldr	r1, [pc, #104]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800390c:	f7fd fbd4 	bl	80010b8 <HAL_GetTick>
 8003910:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7fd fbd0 	bl	80010b8 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e061      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 020c 	and.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d1eb      	bne.n	8003914 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d214      	bcs.n	8003974 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b08      	ldr	r3, [pc, #32]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 0207 	bic.w	r2, r3, #7
 8003952:	4906      	ldr	r1, [pc, #24]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e040      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
 800396c:	40022000 	.word	0x40022000
 8003970:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_RCC_ClockConfig+0x2e8>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	491a      	ldr	r1, [pc, #104]	; (80039f8 <HAL_RCC_ClockConfig+0x2e8>)
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800399e:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <HAL_RCC_ClockConfig+0x2e8>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4912      	ldr	r1, [pc, #72]	; (80039f8 <HAL_RCC_ClockConfig+0x2e8>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039b2:	f000 f829 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80039b6:	4601      	mov	r1, r0
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_RCC_ClockConfig+0x2e8>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c0:	22f0      	movs	r2, #240	; 0xf0
 80039c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	fa92 f2a2 	rbit	r2, r2
 80039ca:	60fa      	str	r2, [r7, #12]
  return result;
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	fab2 f282 	clz	r2, r2
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	40d3      	lsrs	r3, r2
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_RCC_ClockConfig+0x2ec>)
 80039d8:	5cd3      	ldrb	r3, [r2, r3]
 80039da:	fa21 f303 	lsr.w	r3, r1, r3
 80039de:	4a08      	ldr	r2, [pc, #32]	; (8003a00 <HAL_RCC_ClockConfig+0x2f0>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <HAL_RCC_ClockConfig+0x2f4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd fb22 	bl	8001030 <HAL_InitTick>
  
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3778      	adds	r7, #120	; 0x78
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08004700 	.word	0x08004700
 8003a00:	20000010 	.word	0x20000010
 8003a04:	20000014 	.word	0x20000014

08003a08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b08b      	sub	sp, #44	; 0x2c
 8003a0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a22:	4b29      	ldr	r3, [pc, #164]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d002      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x30>
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_GetSysClockFreq+0x36>
 8003a36:	e03c      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a38:	4b24      	ldr	r3, [pc, #144]	; (8003acc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a3a:	623b      	str	r3, [r7, #32]
      break;
 8003a3c:	e03c      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a44:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a48:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	fa92 f2a2 	rbit	r2, r2
 8003a50:	607a      	str	r2, [r7, #4]
  return result;
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	fab2 f282 	clz	r2, r2
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	40d3      	lsrs	r3, r2
 8003a5c:	4a1c      	ldr	r2, [pc, #112]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a5e:	5cd3      	ldrb	r3, [r2, r3]
 8003a60:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a62:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	220f      	movs	r2, #15
 8003a6c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	fa92 f2a2 	rbit	r2, r2
 8003a74:	60fa      	str	r2, [r7, #12]
  return result;
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	fab2 f282 	clz	r2, r2
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	40d3      	lsrs	r3, r2
 8003a80:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a82:	5cd3      	ldrb	r3, [r2, r3]
 8003a84:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a90:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa0:	e004      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	4a0c      	ldr	r2, [pc, #48]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	623b      	str	r3, [r7, #32]
      break;
 8003ab0:	e002      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ab4:	623b      	str	r3, [r7, #32]
      break;
 8003ab6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	372c      	adds	r7, #44	; 0x2c
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	007a1200 	.word	0x007a1200
 8003ad0:	08004718 	.word	0x08004718
 8003ad4:	08004728 	.word	0x08004728
 8003ad8:	003d0900 	.word	0x003d0900

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000010 	.word	0x20000010

08003af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003afa:	f7ff ffef 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003afe:	4601      	mov	r1, r0
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b08:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	fa92 f2a2 	rbit	r2, r2
 8003b14:	603a      	str	r2, [r7, #0]
  return result;
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	fab2 f282 	clz	r2, r2
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	40d3      	lsrs	r3, r2
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b22:	5cd3      	ldrb	r3, [r2, r3]
 8003b24:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	08004710 	.word	0x08004710

08003b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b3e:	f7ff ffcd 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b42:	4601      	mov	r1, r0
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b4c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	fa92 f2a2 	rbit	r2, r2
 8003b58:	603a      	str	r2, [r7, #0]
  return result;
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	fab2 f282 	clz	r2, r2
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	40d3      	lsrs	r3, r2
 8003b64:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b66:	5cd3      	ldrb	r3, [r2, r3]
 8003b68:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000
 8003b78:	08004710 	.word	0x08004710

08003b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b092      	sub	sp, #72	; 0x48
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80d7 	beq.w	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba0:	4b4e      	ldr	r3, [pc, #312]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10e      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bac:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	4a4a      	ldr	r2, [pc, #296]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	61d3      	str	r3, [r2, #28]
 8003bb8:	4b48      	ldr	r3, [pc, #288]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bca:	4b45      	ldr	r3, [pc, #276]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d118      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd6:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a41      	ldr	r2, [pc, #260]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be2:	f7fd fa69 	bl	80010b8 <HAL_GetTick>
 8003be6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be8:	e008      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bea:	f7fd fa65 	bl	80010b8 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b64      	cmp	r3, #100	; 0x64
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e169      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	4b38      	ldr	r3, [pc, #224]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c08:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c10:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8084 	beq.w	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d07c      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c28:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	461a      	mov	r2, r3
 8003c52:	2301      	movs	r3, #1
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	461a      	mov	r2, r3
 8003c76:	2300      	movs	r3, #0
 8003c78:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c7a:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d04b      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7fd fa15 	bl	80010b8 <HAL_GetTick>
 8003c8e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fd fa11 	bl	80010b8 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e113      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	623b      	str	r3, [r7, #32]
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	61fb      	str	r3, [r7, #28]
  return result;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d108      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003cd6:	4b01      	ldr	r3, [pc, #4]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	e00d      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	10908100 	.word	0x10908100
 8003ce8:	2302      	movs	r3, #2
 8003cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	4b78      	ldr	r3, [pc, #480]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	613a      	str	r2, [r7, #16]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	fa92 f2a2 	rbit	r2, r2
 8003d02:	60fa      	str	r2, [r7, #12]
  return result;
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	fab2 f282 	clz	r2, r2
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	f002 021f 	and.w	r2, r2, #31
 8003d16:	2101      	movs	r1, #1
 8003d18:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0b7      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d22:	4b6d      	ldr	r3, [pc, #436]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	496a      	ldr	r1, [pc, #424]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3c:	4b66      	ldr	r3, [pc, #408]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	4a65      	ldr	r2, [pc, #404]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d54:	4b60      	ldr	r3, [pc, #384]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	f023 0203 	bic.w	r2, r3, #3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	495d      	ldr	r1, [pc, #372]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d72:	4b59      	ldr	r3, [pc, #356]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4956      	ldr	r1, [pc, #344]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d90:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	494e      	ldr	r1, [pc, #312]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dae:	4b4a      	ldr	r3, [pc, #296]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f023 0210 	bic.w	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	4947      	ldr	r1, [pc, #284]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003dcc:	4b42      	ldr	r3, [pc, #264]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	493f      	ldr	r1, [pc, #252]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dea:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f023 0220 	bic.w	r2, r3, #32
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	4938      	ldr	r1, [pc, #224]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e08:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	4930      	ldr	r1, [pc, #192]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e26:	4b2c      	ldr	r3, [pc, #176]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	4929      	ldr	r1, [pc, #164]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e44:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	4921      	ldr	r1, [pc, #132]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e62:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	491a      	ldr	r1, [pc, #104]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003e80:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	4912      	ldr	r1, [pc, #72]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	490b      	ldr	r1, [pc, #44]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec8:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3748      	adds	r7, #72	; 0x48
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000

08003edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e040      	b.n	8003f70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fc ffd0 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2224      	movs	r2, #36	; 0x24
 8003f08:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f82c 	bl	8003f78 <UART_SetConfig>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e022      	b.n	8003f70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fa3a 	bl	80043ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fac1 	bl	80044f0 <UART_CheckIdleState>
 8003f6e:	4603      	mov	r3, r0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003faa:	f023 030c 	bic.w	r3, r3, #12
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	6939      	ldr	r1, [r7, #16]
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4aa9      	ldr	r2, [pc, #676]	; (800429c <UART_SetConfig+0x324>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d121      	bne.n	8004040 <UART_SetConfig+0xc8>
 8003ffc:	4ba8      	ldr	r3, [pc, #672]	; (80042a0 <UART_SetConfig+0x328>)
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	2b03      	cmp	r3, #3
 8004006:	d817      	bhi.n	8004038 <UART_SetConfig+0xc0>
 8004008:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <UART_SetConfig+0x98>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	08004021 	.word	0x08004021
 8004014:	0800402d 	.word	0x0800402d
 8004018:	08004033 	.word	0x08004033
 800401c:	08004027 	.word	0x08004027
 8004020:	2301      	movs	r3, #1
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	e0b2      	b.n	800418c <UART_SetConfig+0x214>
 8004026:	2302      	movs	r3, #2
 8004028:	77fb      	strb	r3, [r7, #31]
 800402a:	e0af      	b.n	800418c <UART_SetConfig+0x214>
 800402c:	2304      	movs	r3, #4
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e0ac      	b.n	800418c <UART_SetConfig+0x214>
 8004032:	2308      	movs	r3, #8
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e0a9      	b.n	800418c <UART_SetConfig+0x214>
 8004038:	2310      	movs	r3, #16
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	bf00      	nop
 800403e:	e0a5      	b.n	800418c <UART_SetConfig+0x214>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a97      	ldr	r2, [pc, #604]	; (80042a4 <UART_SetConfig+0x32c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d123      	bne.n	8004092 <UART_SetConfig+0x11a>
 800404a:	4b95      	ldr	r3, [pc, #596]	; (80042a0 <UART_SetConfig+0x328>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004056:	d012      	beq.n	800407e <UART_SetConfig+0x106>
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405c:	d802      	bhi.n	8004064 <UART_SetConfig+0xec>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <UART_SetConfig+0xfa>
 8004062:	e012      	b.n	800408a <UART_SetConfig+0x112>
 8004064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004068:	d00c      	beq.n	8004084 <UART_SetConfig+0x10c>
 800406a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800406e:	d003      	beq.n	8004078 <UART_SetConfig+0x100>
 8004070:	e00b      	b.n	800408a <UART_SetConfig+0x112>
 8004072:	2300      	movs	r3, #0
 8004074:	77fb      	strb	r3, [r7, #31]
 8004076:	e089      	b.n	800418c <UART_SetConfig+0x214>
 8004078:	2302      	movs	r3, #2
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e086      	b.n	800418c <UART_SetConfig+0x214>
 800407e:	2304      	movs	r3, #4
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e083      	b.n	800418c <UART_SetConfig+0x214>
 8004084:	2308      	movs	r3, #8
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e080      	b.n	800418c <UART_SetConfig+0x214>
 800408a:	2310      	movs	r3, #16
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	bf00      	nop
 8004090:	e07c      	b.n	800418c <UART_SetConfig+0x214>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a84      	ldr	r2, [pc, #528]	; (80042a8 <UART_SetConfig+0x330>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d123      	bne.n	80040e4 <UART_SetConfig+0x16c>
 800409c:	4b80      	ldr	r3, [pc, #512]	; (80042a0 <UART_SetConfig+0x328>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80040a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040a8:	d012      	beq.n	80040d0 <UART_SetConfig+0x158>
 80040aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040ae:	d802      	bhi.n	80040b6 <UART_SetConfig+0x13e>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <UART_SetConfig+0x14c>
 80040b4:	e012      	b.n	80040dc <UART_SetConfig+0x164>
 80040b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040ba:	d00c      	beq.n	80040d6 <UART_SetConfig+0x15e>
 80040bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040c0:	d003      	beq.n	80040ca <UART_SetConfig+0x152>
 80040c2:	e00b      	b.n	80040dc <UART_SetConfig+0x164>
 80040c4:	2300      	movs	r3, #0
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e060      	b.n	800418c <UART_SetConfig+0x214>
 80040ca:	2302      	movs	r3, #2
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e05d      	b.n	800418c <UART_SetConfig+0x214>
 80040d0:	2304      	movs	r3, #4
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e05a      	b.n	800418c <UART_SetConfig+0x214>
 80040d6:	2308      	movs	r3, #8
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e057      	b.n	800418c <UART_SetConfig+0x214>
 80040dc:	2310      	movs	r3, #16
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	bf00      	nop
 80040e2:	e053      	b.n	800418c <UART_SetConfig+0x214>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a70      	ldr	r2, [pc, #448]	; (80042ac <UART_SetConfig+0x334>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d123      	bne.n	8004136 <UART_SetConfig+0x1be>
 80040ee:	4b6c      	ldr	r3, [pc, #432]	; (80042a0 <UART_SetConfig+0x328>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80040f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fa:	d012      	beq.n	8004122 <UART_SetConfig+0x1aa>
 80040fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004100:	d802      	bhi.n	8004108 <UART_SetConfig+0x190>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <UART_SetConfig+0x19e>
 8004106:	e012      	b.n	800412e <UART_SetConfig+0x1b6>
 8004108:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800410c:	d00c      	beq.n	8004128 <UART_SetConfig+0x1b0>
 800410e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004112:	d003      	beq.n	800411c <UART_SetConfig+0x1a4>
 8004114:	e00b      	b.n	800412e <UART_SetConfig+0x1b6>
 8004116:	2300      	movs	r3, #0
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e037      	b.n	800418c <UART_SetConfig+0x214>
 800411c:	2302      	movs	r3, #2
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e034      	b.n	800418c <UART_SetConfig+0x214>
 8004122:	2304      	movs	r3, #4
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e031      	b.n	800418c <UART_SetConfig+0x214>
 8004128:	2308      	movs	r3, #8
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e02e      	b.n	800418c <UART_SetConfig+0x214>
 800412e:	2310      	movs	r3, #16
 8004130:	77fb      	strb	r3, [r7, #31]
 8004132:	bf00      	nop
 8004134:	e02a      	b.n	800418c <UART_SetConfig+0x214>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a5d      	ldr	r2, [pc, #372]	; (80042b0 <UART_SetConfig+0x338>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d123      	bne.n	8004188 <UART_SetConfig+0x210>
 8004140:	4b57      	ldr	r3, [pc, #348]	; (80042a0 <UART_SetConfig+0x328>)
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800414c:	d012      	beq.n	8004174 <UART_SetConfig+0x1fc>
 800414e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004152:	d802      	bhi.n	800415a <UART_SetConfig+0x1e2>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <UART_SetConfig+0x1f0>
 8004158:	e012      	b.n	8004180 <UART_SetConfig+0x208>
 800415a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800415e:	d00c      	beq.n	800417a <UART_SetConfig+0x202>
 8004160:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004164:	d003      	beq.n	800416e <UART_SetConfig+0x1f6>
 8004166:	e00b      	b.n	8004180 <UART_SetConfig+0x208>
 8004168:	2300      	movs	r3, #0
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e00e      	b.n	800418c <UART_SetConfig+0x214>
 800416e:	2302      	movs	r3, #2
 8004170:	77fb      	strb	r3, [r7, #31]
 8004172:	e00b      	b.n	800418c <UART_SetConfig+0x214>
 8004174:	2304      	movs	r3, #4
 8004176:	77fb      	strb	r3, [r7, #31]
 8004178:	e008      	b.n	800418c <UART_SetConfig+0x214>
 800417a:	2308      	movs	r3, #8
 800417c:	77fb      	strb	r3, [r7, #31]
 800417e:	e005      	b.n	800418c <UART_SetConfig+0x214>
 8004180:	2310      	movs	r3, #16
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	bf00      	nop
 8004186:	e001      	b.n	800418c <UART_SetConfig+0x214>
 8004188:	2310      	movs	r3, #16
 800418a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004194:	f040 808e 	bne.w	80042b4 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004198:	7ffb      	ldrb	r3, [r7, #31]
 800419a:	2b08      	cmp	r3, #8
 800419c:	d85e      	bhi.n	800425c <UART_SetConfig+0x2e4>
 800419e:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <UART_SetConfig+0x22c>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	080041c9 	.word	0x080041c9
 80041a8:	080041e9 	.word	0x080041e9
 80041ac:	08004209 	.word	0x08004209
 80041b0:	0800425d 	.word	0x0800425d
 80041b4:	08004225 	.word	0x08004225
 80041b8:	0800425d 	.word	0x0800425d
 80041bc:	0800425d 	.word	0x0800425d
 80041c0:	0800425d 	.word	0x0800425d
 80041c4:	08004245 	.word	0x08004245
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c8:	f7ff fc94 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 80041cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	005a      	lsls	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	085b      	lsrs	r3, r3, #1
 80041d8:	441a      	add	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	61bb      	str	r3, [r7, #24]
        break;
 80041e6:	e03c      	b.n	8004262 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041e8:	f7ff fca6 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 80041ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	005a      	lsls	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	085b      	lsrs	r3, r3, #1
 80041f8:	441a      	add	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	b29b      	uxth	r3, r3
 8004204:	61bb      	str	r3, [r7, #24]
        break;
 8004206:	e02c      	b.n	8004262 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004212:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6852      	ldr	r2, [r2, #4]
 800421a:	fbb3 f3f2 	udiv	r3, r3, r2
 800421e:	b29b      	uxth	r3, r3
 8004220:	61bb      	str	r3, [r7, #24]
        break;
 8004222:	e01e      	b.n	8004262 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004224:	f7ff fbf0 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8004228:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	005a      	lsls	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	085b      	lsrs	r3, r3, #1
 8004234:	441a      	add	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	fbb2 f3f3 	udiv	r3, r2, r3
 800423e:	b29b      	uxth	r3, r3
 8004240:	61bb      	str	r3, [r7, #24]
        break;
 8004242:	e00e      	b.n	8004262 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	085b      	lsrs	r3, r3, #1
 800424a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	fbb2 f3f3 	udiv	r3, r2, r3
 8004256:	b29b      	uxth	r3, r3
 8004258:	61bb      	str	r3, [r7, #24]
        break;
 800425a:	e002      	b.n	8004262 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	75fb      	strb	r3, [r7, #23]
        break;
 8004260:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2b0f      	cmp	r3, #15
 8004266:	d916      	bls.n	8004296 <UART_SetConfig+0x31e>
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426e:	d212      	bcs.n	8004296 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	b29b      	uxth	r3, r3
 8004274:	f023 030f 	bic.w	r3, r3, #15
 8004278:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	b29b      	uxth	r3, r3
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	b29a      	uxth	r2, r3
 8004286:	897b      	ldrh	r3, [r7, #10]
 8004288:	4313      	orrs	r3, r2
 800428a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	897a      	ldrh	r2, [r7, #10]
 8004292:	60da      	str	r2, [r3, #12]
 8004294:	e07e      	b.n	8004394 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	75fb      	strb	r3, [r7, #23]
 800429a:	e07b      	b.n	8004394 <UART_SetConfig+0x41c>
 800429c:	40013800 	.word	0x40013800
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40004400 	.word	0x40004400
 80042a8:	40004800 	.word	0x40004800
 80042ac:	40004c00 	.word	0x40004c00
 80042b0:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 80042b4:	7ffb      	ldrb	r3, [r7, #31]
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d85b      	bhi.n	8004372 <UART_SetConfig+0x3fa>
 80042ba:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <UART_SetConfig+0x348>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	080042e5 	.word	0x080042e5
 80042c4:	08004303 	.word	0x08004303
 80042c8:	08004321 	.word	0x08004321
 80042cc:	08004373 	.word	0x08004373
 80042d0:	0800433d 	.word	0x0800433d
 80042d4:	08004373 	.word	0x08004373
 80042d8:	08004373 	.word	0x08004373
 80042dc:	08004373 	.word	0x08004373
 80042e0:	0800435b 	.word	0x0800435b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e4:	f7ff fc06 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 80042e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	085a      	lsrs	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	441a      	add	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	61bb      	str	r3, [r7, #24]
        break;
 8004300:	e03a      	b.n	8004378 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004302:	f7ff fc19 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 8004306:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	085a      	lsrs	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	441a      	add	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	fbb2 f3f3 	udiv	r3, r2, r3
 800431a:	b29b      	uxth	r3, r3
 800431c:	61bb      	str	r3, [r7, #24]
        break;
 800431e:	e02b      	b.n	8004378 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800432a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6852      	ldr	r2, [r2, #4]
 8004332:	fbb3 f3f2 	udiv	r3, r3, r2
 8004336:	b29b      	uxth	r3, r3
 8004338:	61bb      	str	r3, [r7, #24]
        break;
 800433a:	e01d      	b.n	8004378 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800433c:	f7ff fb64 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8004340:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	085a      	lsrs	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	441a      	add	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	b29b      	uxth	r3, r3
 8004356:	61bb      	str	r3, [r7, #24]
        break;
 8004358:	e00e      	b.n	8004378 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	b29b      	uxth	r3, r3
 800436e:	61bb      	str	r3, [r7, #24]
        break;
 8004370:	e002      	b.n	8004378 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	75fb      	strb	r3, [r7, #23]
        break;
 8004376:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b0f      	cmp	r3, #15
 800437c:	d908      	bls.n	8004390 <UART_SetConfig+0x418>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004384:	d204      	bcs.n	8004390 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	e001      	b.n	8004394 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3720      	adds	r7, #32
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop

080043ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01a      	beq.n	80044c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044aa:	d10a      	bne.n	80044c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]
  }
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044fe:	f7fc fddb 	bl	80010b8 <HAL_GetTick>
 8004502:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b08      	cmp	r3, #8
 8004510:	d10e      	bne.n	8004530 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004512:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f82a 	bl	800457a <UART_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e020      	b.n	8004572 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b04      	cmp	r3, #4
 800453c:	d10e      	bne.n	800455c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800453e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f814 	bl	800457a <UART_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e00a      	b.n	8004572 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	603b      	str	r3, [r7, #0]
 8004586:	4613      	mov	r3, r2
 8004588:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800458a:	e05d      	b.n	8004648 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004592:	d059      	beq.n	8004648 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004594:	f7fc fd90 	bl	80010b8 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d302      	bcc.n	80045aa <UART_WaitOnFlagUntilTimeout+0x30>
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11b      	bne.n	80045e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0201 	bic.w	r2, r2, #1
 80045c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e042      	b.n	8004668 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d02b      	beq.n	8004648 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045fe:	d123      	bne.n	8004648 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004608:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004618:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e00f      	b.n	8004668 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69da      	ldr	r2, [r3, #28]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	4013      	ands	r3, r2
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	429a      	cmp	r2, r3
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	429a      	cmp	r2, r3
 8004664:	d092      	beq.n	800458c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <__libc_init_array>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	4e0d      	ldr	r6, [pc, #52]	; (80046a8 <__libc_init_array+0x38>)
 8004674:	4c0d      	ldr	r4, [pc, #52]	; (80046ac <__libc_init_array+0x3c>)
 8004676:	1ba4      	subs	r4, r4, r6
 8004678:	10a4      	asrs	r4, r4, #2
 800467a:	2500      	movs	r5, #0
 800467c:	42a5      	cmp	r5, r4
 800467e:	d109      	bne.n	8004694 <__libc_init_array+0x24>
 8004680:	4e0b      	ldr	r6, [pc, #44]	; (80046b0 <__libc_init_array+0x40>)
 8004682:	4c0c      	ldr	r4, [pc, #48]	; (80046b4 <__libc_init_array+0x44>)
 8004684:	f000 f82c 	bl	80046e0 <_init>
 8004688:	1ba4      	subs	r4, r4, r6
 800468a:	10a4      	asrs	r4, r4, #2
 800468c:	2500      	movs	r5, #0
 800468e:	42a5      	cmp	r5, r4
 8004690:	d105      	bne.n	800469e <__libc_init_array+0x2e>
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004698:	4798      	blx	r3
 800469a:	3501      	adds	r5, #1
 800469c:	e7ee      	b.n	800467c <__libc_init_array+0xc>
 800469e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046a2:	4798      	blx	r3
 80046a4:	3501      	adds	r5, #1
 80046a6:	e7f2      	b.n	800468e <__libc_init_array+0x1e>
 80046a8:	08004740 	.word	0x08004740
 80046ac:	08004740 	.word	0x08004740
 80046b0:	08004740 	.word	0x08004740
 80046b4:	08004744 	.word	0x08004744

080046b8 <memcpy>:
 80046b8:	b510      	push	{r4, lr}
 80046ba:	1e43      	subs	r3, r0, #1
 80046bc:	440a      	add	r2, r1
 80046be:	4291      	cmp	r1, r2
 80046c0:	d100      	bne.n	80046c4 <memcpy+0xc>
 80046c2:	bd10      	pop	{r4, pc}
 80046c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046cc:	e7f7      	b.n	80046be <memcpy+0x6>

080046ce <memset>:
 80046ce:	4402      	add	r2, r0
 80046d0:	4603      	mov	r3, r0
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d100      	bne.n	80046d8 <memset+0xa>
 80046d6:	4770      	bx	lr
 80046d8:	f803 1b01 	strb.w	r1, [r3], #1
 80046dc:	e7f9      	b.n	80046d2 <memset+0x4>
	...

080046e0 <_init>:
 80046e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e2:	bf00      	nop
 80046e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e6:	bc08      	pop	{r3}
 80046e8:	469e      	mov	lr, r3
 80046ea:	4770      	bx	lr

080046ec <_fini>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr
