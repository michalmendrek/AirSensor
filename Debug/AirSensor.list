
AirSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004368  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004540  08004540  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004540  08004540  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004540  08004540  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000001c  08004564  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004564  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093bb  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000167b  00000000  00000000  00029407  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000800  00000000  00000000  0002aa88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000738  00000000  00000000  0002b288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000199dc  00000000  00000000  0002b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008087  00000000  00000000  0004539c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098903  00000000  00000000  0004d423  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5d26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fa4  00000000  00000000  000e5da4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044d8 	.word	0x080044d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080044d8 	.word	0x080044d8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fd4e 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f822 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f97c 	bl	80004d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f87c 	bl	80002d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001dc:	f000 f8ea 	bl	80003b4 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 80001e0:	f000 f946 	bl	8000470 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_IT(&huart2, (unsigned char*)"michal", 6);
 80001e4:	2206      	movs	r2, #6
 80001e6:	490a      	ldr	r1, [pc, #40]	; (8000210 <main+0x48>)
 80001e8:	480a      	ldr	r0, [pc, #40]	; (8000214 <main+0x4c>)
 80001ea:	f003 fcf9 	bl	8003be0 <HAL_UART_Transmit_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //GetMeasurements();
	  if(GPIOA->IDR & (1<<0))
 80001ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f2:	691b      	ldr	r3, [r3, #16]
 80001f4:	f003 0301 	and.w	r3, r3, #1
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d003      	beq.n	8000204 <main+0x3c>
	  {
	  Calibrate(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f000 fb31 	bl	8000864 <Calibrate>
 8000202:	e7f4      	b.n	80001ee <main+0x26>
	  } else
	  {
		  Calibrate(0);
 8000204:	2000      	movs	r0, #0
 8000206:	f000 fb2d 	bl	8000864 <Calibrate>
		  GetMeasurements();
 800020a:	f000 fa71 	bl	80006f0 <GetMeasurements>
	  if(GPIOA->IDR & (1<<0))
 800020e:	e7ee      	b.n	80001ee <main+0x26>
 8000210:	080044f0 	.word	0x080044f0
 8000214:	200000f4 	.word	0x200000f4

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b09e      	sub	sp, #120	; 0x78
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f004 f94e 	bl	80044c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	463b      	mov	r3, r7
 800023e:	223c      	movs	r2, #60	; 0x3c
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f004 f940 	bl	80044c8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000248:	2301      	movs	r3, #1
 800024a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800024c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000250:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000264:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000268:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800026e:	4618      	mov	r0, r3
 8000270:	f002 f97a 	bl	8002568 <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800027a:	f000 f9dd 	bl	8000638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000294:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000298:	2101      	movs	r1, #1
 800029a:	4618      	mov	r0, r3
 800029c:	f003 f86c 	bl	8003378 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002a6:	f000 f9c7 	bl	8000638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80002aa:	2382      	movs	r3, #130	; 0x82
 80002ac:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b8:	463b      	mov	r3, r7
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 fa92 	bl	80037e4 <HAL_RCCEx_PeriphCLKConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002c6:	f000 f9b7 	bl	8000638 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3778      	adds	r7, #120	; 0x78
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08a      	sub	sp, #40	; 0x28
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002da:	f107 031c 	add.w	r3, r7, #28
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
 80002f4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002f6:	4b2e      	ldr	r3, [pc, #184]	; (80003b0 <MX_ADC1_Init+0xdc>)
 80002f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002fe:	4b2c      	ldr	r3, [pc, #176]	; (80003b0 <MX_ADC1_Init+0xdc>)
 8000300:	2200      	movs	r2, #0
 8000302:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000304:	4b2a      	ldr	r3, [pc, #168]	; (80003b0 <MX_ADC1_Init+0xdc>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800030a:	4b29      	ldr	r3, [pc, #164]	; (80003b0 <MX_ADC1_Init+0xdc>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000310:	4b27      	ldr	r3, [pc, #156]	; (80003b0 <MX_ADC1_Init+0xdc>)
 8000312:	2200      	movs	r2, #0
 8000314:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000316:	4b26      	ldr	r3, [pc, #152]	; (80003b0 <MX_ADC1_Init+0xdc>)
 8000318:	2200      	movs	r2, #0
 800031a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800031e:	4b24      	ldr	r3, [pc, #144]	; (80003b0 <MX_ADC1_Init+0xdc>)
 8000320:	2200      	movs	r2, #0
 8000322:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000324:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <MX_ADC1_Init+0xdc>)
 8000326:	2201      	movs	r2, #1
 8000328:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800032a:	4b21      	ldr	r3, [pc, #132]	; (80003b0 <MX_ADC1_Init+0xdc>)
 800032c:	2200      	movs	r2, #0
 800032e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000330:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <MX_ADC1_Init+0xdc>)
 8000332:	2201      	movs	r2, #1
 8000334:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000336:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <MX_ADC1_Init+0xdc>)
 8000338:	2200      	movs	r2, #0
 800033a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800033e:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <MX_ADC1_Init+0xdc>)
 8000340:	2204      	movs	r2, #4
 8000342:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000344:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <MX_ADC1_Init+0xdc>)
 8000346:	2200      	movs	r2, #0
 8000348:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800034a:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <MX_ADC1_Init+0xdc>)
 800034c:	2201      	movs	r2, #1
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000350:	4817      	ldr	r0, [pc, #92]	; (80003b0 <MX_ADC1_Init+0xdc>)
 8000352:	f000 fd13 	bl	8000d7c <HAL_ADC_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800035c:	f000 f96c 	bl	8000638 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000360:	2300      	movs	r3, #0
 8000362:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000364:	f107 031c 	add.w	r3, r7, #28
 8000368:	4619      	mov	r1, r3
 800036a:	4811      	ldr	r0, [pc, #68]	; (80003b0 <MX_ADC1_Init+0xdc>)
 800036c:	f001 fc26 	bl	8001bbc <HAL_ADCEx_MultiModeConfigChannel>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000376:	f000 f95f 	bl	8000638 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800037a:	2302      	movs	r3, #2
 800037c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800037e:	2301      	movs	r3, #1
 8000380:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000382:	2300      	movs	r3, #0
 8000384:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4619      	mov	r1, r3
 8000396:	4806      	ldr	r0, [pc, #24]	; (80003b0 <MX_ADC1_Init+0xdc>)
 8000398:	f001 f924 	bl	80015e4 <HAL_ADC_ConfigChannel>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003a2:	f000 f949 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	3728      	adds	r7, #40	; 0x28
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	200000a4 	.word	0x200000a4

080003b4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ba:	463b      	mov	r3, r7
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
 80003c8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80003ca:	4b27      	ldr	r3, [pc, #156]	; (8000468 <MX_ADC2_Init+0xb4>)
 80003cc:	4a27      	ldr	r2, [pc, #156]	; (800046c <MX_ADC2_Init+0xb8>)
 80003ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003d0:	4b25      	ldr	r3, [pc, #148]	; (8000468 <MX_ADC2_Init+0xb4>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003d6:	4b24      	ldr	r3, [pc, #144]	; (8000468 <MX_ADC2_Init+0xb4>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003dc:	4b22      	ldr	r3, [pc, #136]	; (8000468 <MX_ADC2_Init+0xb4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003e2:	4b21      	ldr	r3, [pc, #132]	; (8000468 <MX_ADC2_Init+0xb4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003e8:	4b1f      	ldr	r3, [pc, #124]	; (8000468 <MX_ADC2_Init+0xb4>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f0:	4b1d      	ldr	r3, [pc, #116]	; (8000468 <MX_ADC2_Init+0xb4>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003f6:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <MX_ADC2_Init+0xb4>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003fc:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <MX_ADC2_Init+0xb4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000402:	4b19      	ldr	r3, [pc, #100]	; (8000468 <MX_ADC2_Init+0xb4>)
 8000404:	2201      	movs	r2, #1
 8000406:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000408:	4b17      	ldr	r3, [pc, #92]	; (8000468 <MX_ADC2_Init+0xb4>)
 800040a:	2200      	movs	r2, #0
 800040c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000410:	4b15      	ldr	r3, [pc, #84]	; (8000468 <MX_ADC2_Init+0xb4>)
 8000412:	2204      	movs	r2, #4
 8000414:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_ADC2_Init+0xb4>)
 8000418:	2200      	movs	r2, #0
 800041a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_ADC2_Init+0xb4>)
 800041e:	2200      	movs	r2, #0
 8000420:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000422:	4811      	ldr	r0, [pc, #68]	; (8000468 <MX_ADC2_Init+0xb4>)
 8000424:	f000 fcaa 	bl	8000d7c <HAL_ADC_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800042e:	f000 f903 	bl	8000638 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000432:	2305      	movs	r3, #5
 8000434:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000436:	2301      	movs	r3, #1
 8000438:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800043e:	2300      	movs	r3, #0
 8000440:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800044a:	463b      	mov	r3, r7
 800044c:	4619      	mov	r1, r3
 800044e:	4806      	ldr	r0, [pc, #24]	; (8000468 <MX_ADC2_Init+0xb4>)
 8000450:	f001 f8c8 	bl	80015e4 <HAL_ADC_ConfigChannel>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800045a:	f000 f8ed 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	3718      	adds	r7, #24
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000054 	.word	0x20000054
 800046c:	50000100 	.word	0x50000100

08000470 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000476:	4a15      	ldr	r2, [pc, #84]	; (80004cc <MX_USART2_UART_Init+0x5c>)
 8000478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 800047c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000496:	220c      	movs	r2, #12
 8000498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004b4:	f003 fb46 	bl	8003b44 <HAL_UART_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004be:	f000 f8bb 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200000f4 	.word	0x200000f4
 80004cc:	40004400 	.word	0x40004400

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e6:	4b50      	ldr	r3, [pc, #320]	; (8000628 <MX_GPIO_Init+0x158>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a4f      	ldr	r2, [pc, #316]	; (8000628 <MX_GPIO_Init+0x158>)
 80004ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b4d      	ldr	r3, [pc, #308]	; (8000628 <MX_GPIO_Init+0x158>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b4a      	ldr	r3, [pc, #296]	; (8000628 <MX_GPIO_Init+0x158>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a49      	ldr	r2, [pc, #292]	; (8000628 <MX_GPIO_Init+0x158>)
 8000504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b47      	ldr	r3, [pc, #284]	; (8000628 <MX_GPIO_Init+0x158>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000516:	4b44      	ldr	r3, [pc, #272]	; (8000628 <MX_GPIO_Init+0x158>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a43      	ldr	r2, [pc, #268]	; (8000628 <MX_GPIO_Init+0x158>)
 800051c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b41      	ldr	r3, [pc, #260]	; (8000628 <MX_GPIO_Init+0x158>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b3e      	ldr	r3, [pc, #248]	; (8000628 <MX_GPIO_Init+0x158>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a3d      	ldr	r2, [pc, #244]	; (8000628 <MX_GPIO_Init+0x158>)
 8000534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b3b      	ldr	r3, [pc, #236]	; (8000628 <MX_GPIO_Init+0x158>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4b38      	ldr	r3, [pc, #224]	; (8000628 <MX_GPIO_Init+0x158>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a37      	ldr	r2, [pc, #220]	; (8000628 <MX_GPIO_Init+0x158>)
 800054c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b35      	ldr	r3, [pc, #212]	; (8000628 <MX_GPIO_Init+0x158>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800055e:	2200      	movs	r2, #0
 8000560:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000564:	4831      	ldr	r0, [pc, #196]	; (800062c <MX_GPIO_Init+0x15c>)
 8000566:	f001 ffe7 	bl	8002538 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 800056a:	2337      	movs	r3, #55	; 0x37
 800056c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800056e:	4b30      	ldr	r3, [pc, #192]	; (8000630 <MX_GPIO_Init+0x160>)
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	482b      	ldr	r0, [pc, #172]	; (800062c <MX_GPIO_Init+0x15c>)
 800057e:	f001 fe61 	bl	8002244 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8000582:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000586:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	2301      	movs	r3, #1
 800058a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2300      	movs	r3, #0
 8000592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	4824      	ldr	r0, [pc, #144]	; (800062c <MX_GPIO_Init+0x15c>)
 800059c:	f001 fe52 	bl	8002244 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005a0:	2301      	movs	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4619      	mov	r1, r3
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b6:	f001 fe45 	bl	8002244 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80005ba:	23e0      	movs	r3, #224	; 0xe0
 80005bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	2302      	movs	r3, #2
 80005c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005ca:	2305      	movs	r3, #5
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f001 fe34 	bl	8002244 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80005dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80005ee:	230e      	movs	r3, #14
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f001 fe22 	bl	8002244 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000600:	23c0      	movs	r3, #192	; 0xc0
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000604:	2312      	movs	r3, #18
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000610:	2304      	movs	r3, #4
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <MX_GPIO_Init+0x164>)
 800061c:	f001 fe12 	bl	8002244 <HAL_GPIO_Init>

}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	; 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000
 800062c:	48001000 	.word	0x48001000
 8000630:	10120000 	.word	0x10120000
 8000634:	48000400 	.word	0x48000400

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
	...

08000648 <DisplayAir>:
static uint16_t CO[4]={LD7_Pin,LD9_Pin,LD5_Pin,LD10_Pin};
static uint32_t ADC_3_INITIAL=0;
static uint32_t ADC_2_INITIAL=0;

void DisplayAir(QualityState State)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	int i=0;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
		for(i=0;i<4;i++)
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	e00b      	b.n	8000674 <DisplayAir+0x2c>
		{
			HAL_GPIO_WritePin(GPIOE,AIR[i],GPIO_PIN_RESET);
 800065c:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <DisplayAir+0x4c>)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	480b      	ldr	r0, [pc, #44]	; (8000698 <DisplayAir+0x50>)
 800066a:	f001 ff65 	bl	8002538 <HAL_GPIO_WritePin>
		for(i=0;i<4;i++)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	3301      	adds	r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b03      	cmp	r3, #3
 8000678:	ddf0      	ble.n	800065c <DisplayAir+0x14>
		}
	HAL_GPIO_WritePin(GPIOE,AIR[State],GPIO_PIN_SET);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4a05      	ldr	r2, [pc, #20]	; (8000694 <DisplayAir+0x4c>)
 800067e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000682:	2201      	movs	r2, #1
 8000684:	4619      	mov	r1, r3
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <DisplayAir+0x50>)
 8000688:	f001 ff56 	bl	8002538 <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	48001000 	.word	0x48001000

0800069c <DisplayCO>:

void DisplayCO(QualityState State)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	int i=0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
	for(i=0;i<4;i++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	e00b      	b.n	80006c8 <DisplayCO+0x2c>
	{
		HAL_GPIO_WritePin(GPIOE,CO[i],GPIO_PIN_RESET);
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <DisplayCO+0x4c>)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006b8:	2200      	movs	r2, #0
 80006ba:	4619      	mov	r1, r3
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <DisplayCO+0x50>)
 80006be:	f001 ff3b 	bl	8002538 <HAL_GPIO_WritePin>
	for(i=0;i<4;i++)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	ddf0      	ble.n	80006b0 <DisplayCO+0x14>
	}
	HAL_GPIO_WritePin(GPIOE,CO[State],GPIO_PIN_SET);
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <DisplayCO+0x4c>)
 80006d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <DisplayCO+0x50>)
 80006dc:	f001 ff2c 	bl	8002538 <HAL_GPIO_WritePin>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000008 	.word	0x20000008
 80006ec:	48001000 	.word	0x48001000

080006f0 <GetMeasurements>:


void GetMeasurements(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	extern ADC_HandleTypeDef hadc1;
	extern ADC_HandleTypeDef hadc2;

	static uint16_t adc_2=0, adc_3=0;
	HAL_ADC_Start(&hadc1);
 80006f4:	4855      	ldr	r0, [pc, #340]	; (800084c <GetMeasurements+0x15c>)
 80006f6:	f000 fd21 	bl	800113c <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80006fa:	2164      	movs	r1, #100	; 0x64
 80006fc:	4853      	ldr	r0, [pc, #332]	; (800084c <GetMeasurements+0x15c>)
 80006fe:	f000 fe69 	bl	80013d4 <HAL_ADC_PollForConversion>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d145      	bne.n	8000794 <GetMeasurements+0xa4>
	{
		adc_2=HAL_ADC_GetValue(&hadc1);
 8000708:	4850      	ldr	r0, [pc, #320]	; (800084c <GetMeasurements+0x15c>)
 800070a:	f000 ff5d 	bl	80015c8 <HAL_ADC_GetValue>
 800070e:	4603      	mov	r3, r0
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b4f      	ldr	r3, [pc, #316]	; (8000850 <GetMeasurements+0x160>)
 8000714:	801a      	strh	r2, [r3, #0]
		if(adc_2>ADC_2_INITIAL+600)DisplayAir(Red);
 8000716:	4b4e      	ldr	r3, [pc, #312]	; (8000850 <GetMeasurements+0x160>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	4b4d      	ldr	r3, [pc, #308]	; (8000854 <GetMeasurements+0x164>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000724:	429a      	cmp	r2, r3
 8000726:	d902      	bls.n	800072e <GetMeasurements+0x3e>
 8000728:	2003      	movs	r0, #3
 800072a:	f7ff ff8d 	bl	8000648 <DisplayAir>
		if(adc_2<ADC_2_INITIAL+400 && adc_2 >ADC_2_INITIAL+300)DisplayAir(Orange);
 800072e:	4b48      	ldr	r3, [pc, #288]	; (8000850 <GetMeasurements+0x160>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	461a      	mov	r2, r3
 8000734:	4b47      	ldr	r3, [pc, #284]	; (8000854 <GetMeasurements+0x164>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800073c:	429a      	cmp	r2, r3
 800073e:	d20b      	bcs.n	8000758 <GetMeasurements+0x68>
 8000740:	4b43      	ldr	r3, [pc, #268]	; (8000850 <GetMeasurements+0x160>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b43      	ldr	r3, [pc, #268]	; (8000854 <GetMeasurements+0x164>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800074e:	429a      	cmp	r2, r3
 8000750:	d902      	bls.n	8000758 <GetMeasurements+0x68>
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff ff78 	bl	8000648 <DisplayAir>
		if(adc_2<ADC_2_INITIAL+300 && adc_2 >ADC_2_INITIAL+100) DisplayAir(Blue);
 8000758:	4b3d      	ldr	r3, [pc, #244]	; (8000850 <GetMeasurements+0x160>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b3d      	ldr	r3, [pc, #244]	; (8000854 <GetMeasurements+0x164>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000766:	429a      	cmp	r2, r3
 8000768:	d20a      	bcs.n	8000780 <GetMeasurements+0x90>
 800076a:	4b39      	ldr	r3, [pc, #228]	; (8000850 <GetMeasurements+0x160>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	461a      	mov	r2, r3
 8000770:	4b38      	ldr	r3, [pc, #224]	; (8000854 <GetMeasurements+0x164>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3364      	adds	r3, #100	; 0x64
 8000776:	429a      	cmp	r2, r3
 8000778:	d902      	bls.n	8000780 <GetMeasurements+0x90>
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff ff64 	bl	8000648 <DisplayAir>
		if(adc_2<=ADC_2_INITIAL) DisplayAir(Green);
 8000780:	4b33      	ldr	r3, [pc, #204]	; (8000850 <GetMeasurements+0x160>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <GetMeasurements+0x164>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	429a      	cmp	r2, r3
 800078c:	d802      	bhi.n	8000794 <GetMeasurements+0xa4>
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff ff5a 	bl	8000648 <DisplayAir>

	}

	HAL_ADC_Start(&hadc2);
 8000794:	4830      	ldr	r0, [pc, #192]	; (8000858 <GetMeasurements+0x168>)
 8000796:	f000 fcd1 	bl	800113c <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK)
 800079a:	2164      	movs	r1, #100	; 0x64
 800079c:	482e      	ldr	r0, [pc, #184]	; (8000858 <GetMeasurements+0x168>)
 800079e:	f000 fe19 	bl	80013d4 <HAL_ADC_PollForConversion>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d146      	bne.n	8000836 <GetMeasurements+0x146>
		{
	    adc_3=HAL_ADC_GetValue(&hadc2);
 80007a8:	482b      	ldr	r0, [pc, #172]	; (8000858 <GetMeasurements+0x168>)
 80007aa:	f000 ff0d 	bl	80015c8 <HAL_ADC_GetValue>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <GetMeasurements+0x16c>)
 80007b4:	801a      	strh	r2, [r3, #0]
	    if(adc_3>ADC_3_INITIAL+500)DisplayCO(Red);
 80007b6:	4b29      	ldr	r3, [pc, #164]	; (800085c <GetMeasurements+0x16c>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <GetMeasurements+0x170>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d902      	bls.n	80007ce <GetMeasurements+0xde>
 80007c8:	2003      	movs	r0, #3
 80007ca:	f7ff ff67 	bl	800069c <DisplayCO>
		if(adc_3<ADC_3_INITIAL+500 && adc_3 > ADC_3_INITIAL+400)DisplayCO(Orange);
 80007ce:	4b23      	ldr	r3, [pc, #140]	; (800085c <GetMeasurements+0x16c>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <GetMeasurements+0x170>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80007dc:	429a      	cmp	r2, r3
 80007de:	d20b      	bcs.n	80007f8 <GetMeasurements+0x108>
 80007e0:	4b1e      	ldr	r3, [pc, #120]	; (800085c <GetMeasurements+0x16c>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <GetMeasurements+0x170>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d902      	bls.n	80007f8 <GetMeasurements+0x108>
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff ff52 	bl	800069c <DisplayCO>
	    if(adc_3<ADC_3_INITIAL+400 && adc_3 > ADC_3_INITIAL+300) DisplayCO(Blue);
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <GetMeasurements+0x16c>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <GetMeasurements+0x170>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000806:	429a      	cmp	r2, r3
 8000808:	d20b      	bcs.n	8000822 <GetMeasurements+0x132>
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <GetMeasurements+0x16c>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <GetMeasurements+0x170>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000818:	429a      	cmp	r2, r3
 800081a:	d902      	bls.n	8000822 <GetMeasurements+0x132>
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff ff3d 	bl	800069c <DisplayCO>
	    if(adc_3<=ADC_3_INITIAL) DisplayCO(Green);
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <GetMeasurements+0x16c>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <GetMeasurements+0x170>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	429a      	cmp	r2, r3
 800082e:	d802      	bhi.n	8000836 <GetMeasurements+0x146>
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff ff33 	bl	800069c <DisplayCO>
		}
	HAL_Delay (200);
 8000836:	20c8      	movs	r0, #200	; 0xc8
 8000838:	f000 fa7e 	bl	8000d38 <HAL_Delay>
	HAL_ADC_Stop (&hadc1);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <GetMeasurements+0x15c>)
 800083e:	f000 fd93 	bl	8001368 <HAL_ADC_Stop>
	HAL_ADC_Stop (&hadc2);
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <GetMeasurements+0x168>)
 8000844:	f000 fd90 	bl	8001368 <HAL_ADC_Stop>

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000a4 	.word	0x200000a4
 8000850:	20000040 	.word	0x20000040
 8000854:	2000003c 	.word	0x2000003c
 8000858:	20000054 	.word	0x20000054
 800085c:	20000042 	.word	0x20000042
 8000860:	20000038 	.word	0x20000038

08000864 <Calibrate>:

void Calibrate(int val)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b087      	sub	sp, #28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	static int i=0;
	static int j=0;
	static int state=0;
	extern ADC_HandleTypeDef hadc1;
	extern ADC_HandleTypeDef hadc2;
	uint16_t Leds[8]={LD4_Pin,LD3_Pin,LD5_Pin,LD7_Pin,LD9_Pin,LD10_Pin,LD8_Pin,LD6_Pin};
 800086c:	4b4c      	ldr	r3, [pc, #304]	; (80009a0 <Calibrate+0x13c>)
 800086e:	f107 0408 	add.w	r4, r7, #8
 8000872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(val==1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b01      	cmp	r3, #1
 800087c:	f040 8083 	bne.w	8000986 <Calibrate+0x122>
	{
if(i<8)
 8000880:	4b48      	ldr	r3, [pc, #288]	; (80009a4 <Calibrate+0x140>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b07      	cmp	r3, #7
 8000886:	dc4c      	bgt.n	8000922 <Calibrate+0xbe>
{
	HAL_GPIO_WritePin(GPIOE,Leds[i++],GPIO_PIN_SET);
 8000888:	4b46      	ldr	r3, [pc, #280]	; (80009a4 <Calibrate+0x140>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	4945      	ldr	r1, [pc, #276]	; (80009a4 <Calibrate+0x140>)
 8000890:	600a      	str	r2, [r1, #0]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	f107 0218 	add.w	r2, r7, #24
 8000898:	4413      	add	r3, r2
 800089a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800089e:	2201      	movs	r2, #1
 80008a0:	4619      	mov	r1, r3
 80008a2:	4841      	ldr	r0, [pc, #260]	; (80009a8 <Calibrate+0x144>)
 80008a4:	f001 fe48 	bl	8002538 <HAL_GPIO_WritePin>
	for(j=0;j<10;j++)
 80008a8:	4b40      	ldr	r3, [pc, #256]	; (80009ac <Calibrate+0x148>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e033      	b.n	8000918 <Calibrate+0xb4>
	{
		HAL_ADC_Start(&hadc1);
 80008b0:	483f      	ldr	r0, [pc, #252]	; (80009b0 <Calibrate+0x14c>)
 80008b2:	f000 fc43 	bl	800113c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80008b6:	2164      	movs	r1, #100	; 0x64
 80008b8:	483d      	ldr	r0, [pc, #244]	; (80009b0 <Calibrate+0x14c>)
 80008ba:	f000 fd8b 	bl	80013d4 <HAL_ADC_PollForConversion>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d108      	bne.n	80008d6 <Calibrate+0x72>
			{
				ADC_2_INITIAL+=HAL_ADC_GetValue(&hadc1);
 80008c4:	483a      	ldr	r0, [pc, #232]	; (80009b0 <Calibrate+0x14c>)
 80008c6:	f000 fe7f 	bl	80015c8 <HAL_ADC_GetValue>
 80008ca:	4602      	mov	r2, r0
 80008cc:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <Calibrate+0x150>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a38      	ldr	r2, [pc, #224]	; (80009b4 <Calibrate+0x150>)
 80008d4:	6013      	str	r3, [r2, #0]
			}
		HAL_ADC_Start(&hadc2);
 80008d6:	4838      	ldr	r0, [pc, #224]	; (80009b8 <Calibrate+0x154>)
 80008d8:	f000 fc30 	bl	800113c <HAL_ADC_Start>

		if (HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK)
 80008dc:	2164      	movs	r1, #100	; 0x64
 80008de:	4836      	ldr	r0, [pc, #216]	; (80009b8 <Calibrate+0x154>)
 80008e0:	f000 fd78 	bl	80013d4 <HAL_ADC_PollForConversion>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d108      	bne.n	80008fc <Calibrate+0x98>
			{
			    ADC_3_INITIAL+=HAL_ADC_GetValue(&hadc2);
 80008ea:	4833      	ldr	r0, [pc, #204]	; (80009b8 <Calibrate+0x154>)
 80008ec:	f000 fe6c 	bl	80015c8 <HAL_ADC_GetValue>
 80008f0:	4602      	mov	r2, r0
 80008f2:	4b32      	ldr	r3, [pc, #200]	; (80009bc <Calibrate+0x158>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a30      	ldr	r2, [pc, #192]	; (80009bc <Calibrate+0x158>)
 80008fa:	6013      	str	r3, [r2, #0]
			}
			HAL_Delay (200);
 80008fc:	20c8      	movs	r0, #200	; 0xc8
 80008fe:	f000 fa1b 	bl	8000d38 <HAL_Delay>
			HAL_ADC_Stop (&hadc1);
 8000902:	482b      	ldr	r0, [pc, #172]	; (80009b0 <Calibrate+0x14c>)
 8000904:	f000 fd30 	bl	8001368 <HAL_ADC_Stop>
			HAL_ADC_Stop (&hadc2);
 8000908:	482b      	ldr	r0, [pc, #172]	; (80009b8 <Calibrate+0x154>)
 800090a:	f000 fd2d 	bl	8001368 <HAL_ADC_Stop>
	for(j=0;j<10;j++)
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <Calibrate+0x148>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	4a25      	ldr	r2, [pc, #148]	; (80009ac <Calibrate+0x148>)
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <Calibrate+0x148>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b09      	cmp	r3, #9
 800091e:	ddc7      	ble.n	80008b0 <Calibrate+0x4c>
}
	}
	}
	} else {state=0; i=0; j=0;}

}
 8000920:	e03a      	b.n	8000998 <Calibrate+0x134>
	if(state==0)
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <Calibrate+0x15c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d136      	bne.n	8000998 <Calibrate+0x134>
	ADC_2_INITIAL/=80;
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <Calibrate+0x150>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <Calibrate+0x160>)
 8000930:	fba2 2303 	umull	r2, r3, r2, r3
 8000934:	099b      	lsrs	r3, r3, #6
 8000936:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <Calibrate+0x150>)
 8000938:	6013      	str	r3, [r2, #0]
	ADC_3_INITIAL/=80;
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <Calibrate+0x158>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <Calibrate+0x160>)
 8000940:	fba2 2303 	umull	r2, r3, r2, r3
 8000944:	099b      	lsrs	r3, r3, #6
 8000946:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <Calibrate+0x158>)
 8000948:	6013      	str	r3, [r2, #0]
	state=1;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <Calibrate+0x15c>)
 800094c:	2201      	movs	r2, #1
 800094e:	601a      	str	r2, [r3, #0]
	for(j=0;j<8;j++){HAL_GPIO_WritePin(GPIOE,Leds[j],GPIO_PIN_RESET);
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <Calibrate+0x148>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e011      	b.n	800097c <Calibrate+0x118>
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <Calibrate+0x148>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	f107 0218 	add.w	r2, r7, #24
 8000962:	4413      	add	r3, r2
 8000964:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000968:	2200      	movs	r2, #0
 800096a:	4619      	mov	r1, r3
 800096c:	480e      	ldr	r0, [pc, #56]	; (80009a8 <Calibrate+0x144>)
 800096e:	f001 fde3 	bl	8002538 <HAL_GPIO_WritePin>
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <Calibrate+0x148>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <Calibrate+0x148>)
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <Calibrate+0x148>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b07      	cmp	r3, #7
 8000982:	dde9      	ble.n	8000958 <Calibrate+0xf4>
}
 8000984:	e008      	b.n	8000998 <Calibrate+0x134>
	} else {state=0; i=0; j=0;}
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <Calibrate+0x15c>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <Calibrate+0x140>)
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <Calibrate+0x148>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	bf00      	nop
 800099a:	371c      	adds	r7, #28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	080044f8 	.word	0x080044f8
 80009a4:	20000044 	.word	0x20000044
 80009a8:	48001000 	.word	0x48001000
 80009ac:	20000048 	.word	0x20000048
 80009b0:	200000a4 	.word	0x200000a4
 80009b4:	2000003c 	.word	0x2000003c
 80009b8:	20000054 	.word	0x20000054
 80009bc:	20000038 	.word	0x20000038
 80009c0:	2000004c 	.word	0x2000004c
 80009c4:	cccccccd 	.word	0xcccccccd

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x44>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_MspInit+0x44>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6193      	str	r3, [r2, #24]
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x44>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x44>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x44>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	61d3      	str	r3, [r2, #28]
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x44>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	; 0x30
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a30:	d12e      	bne.n	8000a90 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a32:	4b32      	ldr	r3, [pc, #200]	; (8000afc <HAL_ADC_MspInit+0xec>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3301      	adds	r3, #1
 8000a38:	4a30      	ldr	r2, [pc, #192]	; (8000afc <HAL_ADC_MspInit+0xec>)
 8000a3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a3c:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <HAL_ADC_MspInit+0xec>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10b      	bne.n	8000a5c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a44:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <HAL_ADC_MspInit+0xf0>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	4a2d      	ldr	r2, [pc, #180]	; (8000b00 <HAL_ADC_MspInit+0xf0>)
 8000a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	6153      	str	r3, [r2, #20]
 8000a50:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <HAL_ADC_MspInit+0xf0>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <HAL_ADC_MspInit+0xf0>)
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	4a27      	ldr	r2, [pc, #156]	; (8000b00 <HAL_ADC_MspInit+0xf0>)
 8000a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a66:	6153      	str	r3, [r2, #20]
 8000a68:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <HAL_ADC_MspInit+0xf0>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8a:	f001 fbdb 	bl	8002244 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000a8e:	e031      	b.n	8000af4 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <HAL_ADC_MspInit+0xf4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12c      	bne.n	8000af4 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_ADC_MspInit+0xec>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	4a16      	ldr	r2, [pc, #88]	; (8000afc <HAL_ADC_MspInit+0xec>)
 8000aa2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_ADC_MspInit+0xec>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d10b      	bne.n	8000ac4 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_ADC_MspInit+0xf0>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <HAL_ADC_MspInit+0xf0>)
 8000ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	6153      	str	r3, [r2, #20]
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_ADC_MspInit+0xf0>)
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_ADC_MspInit+0xf0>)
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_ADC_MspInit+0xf0>)
 8000aca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ace:	6153      	str	r3, [r2, #20]
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_ADC_MspInit+0xf0>)
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000adc:	2310      	movs	r3, #16
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <HAL_ADC_MspInit+0xf8>)
 8000af0:	f001 fba8 	bl	8002244 <HAL_GPIO_Init>
}
 8000af4:	bf00      	nop
 8000af6:	3730      	adds	r7, #48	; 0x30
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000050 	.word	0x20000050
 8000b00:	40021000 	.word	0x40021000
 8000b04:	50000100 	.word	0x50000100
 8000b08:	48000800 	.word	0x48000800

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_UART_MspInit+0x7c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d128      	bne.n	8000b80 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_UART_MspInit+0x80>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a16      	ldr	r2, [pc, #88]	; (8000b8c <HAL_UART_MspInit+0x80>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <HAL_UART_MspInit+0x80>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_UART_MspInit+0x80>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_UART_MspInit+0x80>)
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	6153      	str	r3, [r2, #20]
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_UART_MspInit+0x80>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b5e:	230c      	movs	r3, #12
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7c:	f001 fb62 	bl	8002244 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	3728      	adds	r7, #40	; 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40021000 	.word	0x40021000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 f888 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <SystemInit+0x28>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <SystemInit+0x28>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SystemInit+0x28>)
 8000c02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c06:	609a      	str	r2, [r3, #8]
#endif
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c50 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c1e:	e003      	b.n	8000c28 <LoopCopyDataInit>

08000c20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c26:	3104      	adds	r1, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c30:	d3f6      	bcc.n	8000c20 <CopyDataInit>
	ldr	r2, =_sbss
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c34:	e002      	b.n	8000c3c <LoopFillZerobss>

08000c36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c38:	f842 3b04 	str.w	r3, [r2], #4

08000c3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <LoopForever+0x16>)
	cmp	r2, r3
 8000c3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c40:	d3f9      	bcc.n	8000c36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c42:	f7ff ffd3 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f003 fc1b 	bl	8004480 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c4a:	f7ff fabd 	bl	80001c8 <main>

08000c4e <LoopForever>:

LoopForever:
    b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c50:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000c54:	08004548 	.word	0x08004548
	ldr	r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c5c:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8000c60:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8000c64:	20000178 	.word	0x20000178

08000c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_2_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x28>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x28>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f001 faad 	bl	80021dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 f808 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fe9e 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x54>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x58>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 fab7 	bl	800222a <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd4:	f001 fa8d 	bl	80021f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000010 	.word	0x20000010
 8000cf0:	20000018 	.word	0x20000018
 8000cf4:	20000014 	.word	0x20000014

08000cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000018 	.word	0x20000018
 8000d1c:	20000174 	.word	0x20000174

08000d20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000174 	.word	0x20000174

08000d38 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff ffee 	bl	8000d20 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_Delay+0x40>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d5e:	bf00      	nop
 8000d60:	f7ff ffde 	bl	8000d20 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000018 	.word	0x20000018

08000d7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b09a      	sub	sp, #104	; 0x68
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d101      	bne.n	8000d9c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e1c9      	b.n	8001130 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d176      	bne.n	8000e9c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d152      	bne.n	8000e5c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fe1d 	bl	8000a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d13b      	bne.n	8000e5c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f001 f839 	bl	8001e5c <ADC_Disable>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	f003 0310 	and.w	r3, r3, #16
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d12f      	bne.n	8000e5c <HAL_ADC_Init+0xe0>
 8000dfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d12b      	bne.n	8000e5c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e0c:	f023 0302 	bic.w	r3, r3, #2
 8000e10:	f043 0202 	orr.w	r2, r3, #2
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e26:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e36:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e38:	4b86      	ldr	r3, [pc, #536]	; (8001054 <HAL_ADC_Init+0x2d8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a86      	ldr	r2, [pc, #536]	; (8001058 <HAL_ADC_Init+0x2dc>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	0c9a      	lsrs	r2, r3, #18
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e4e:	e002      	b.n	8000e56 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1f9      	bne.n	8000e50 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d007      	beq.n	8000e7a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e78:	d110      	bne.n	8000e9c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f023 0312 	bic.w	r3, r3, #18
 8000e82:	f043 0210 	orr.w	r2, r3, #16
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f043 0201 	orr.w	r2, r3, #1
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f003 0310 	and.w	r3, r3, #16
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f040 8136 	bne.w	8001116 <HAL_ADC_Init+0x39a>
 8000eaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 8131 	bne.w	8001116 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 8129 	bne.w	8001116 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ecc:	f043 0202 	orr.w	r2, r3, #2
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000edc:	d004      	beq.n	8000ee8 <HAL_ADC_Init+0x16c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a5e      	ldr	r2, [pc, #376]	; (800105c <HAL_ADC_Init+0x2e0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d101      	bne.n	8000eec <HAL_ADC_Init+0x170>
 8000ee8:	4b5d      	ldr	r3, [pc, #372]	; (8001060 <HAL_ADC_Init+0x2e4>)
 8000eea:	e000      	b.n	8000eee <HAL_ADC_Init+0x172>
 8000eec:	4b5d      	ldr	r3, [pc, #372]	; (8001064 <HAL_ADC_Init+0x2e8>)
 8000eee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ef8:	d102      	bne.n	8000f00 <HAL_ADC_Init+0x184>
 8000efa:	4b58      	ldr	r3, [pc, #352]	; (800105c <HAL_ADC_Init+0x2e0>)
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	e01a      	b.n	8000f36 <HAL_ADC_Init+0x1ba>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a55      	ldr	r2, [pc, #340]	; (800105c <HAL_ADC_Init+0x2e0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d103      	bne.n	8000f12 <HAL_ADC_Init+0x196>
 8000f0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e011      	b.n	8000f36 <HAL_ADC_Init+0x1ba>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a54      	ldr	r2, [pc, #336]	; (8001068 <HAL_ADC_Init+0x2ec>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d102      	bne.n	8000f22 <HAL_ADC_Init+0x1a6>
 8000f1c:	4b53      	ldr	r3, [pc, #332]	; (800106c <HAL_ADC_Init+0x2f0>)
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e009      	b.n	8000f36 <HAL_ADC_Init+0x1ba>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a51      	ldr	r2, [pc, #324]	; (800106c <HAL_ADC_Init+0x2f0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d102      	bne.n	8000f32 <HAL_ADC_Init+0x1b6>
 8000f2c:	4b4e      	ldr	r3, [pc, #312]	; (8001068 <HAL_ADC_Init+0x2ec>)
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	e001      	b.n	8000f36 <HAL_ADC_Init+0x1ba>
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d108      	bne.n	8000f56 <HAL_ADC_Init+0x1da>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d101      	bne.n	8000f56 <HAL_ADC_Init+0x1da>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_ADC_Init+0x1dc>
 8000f56:	2300      	movs	r3, #0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d11c      	bne.n	8000f96 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d010      	beq.n	8000f84 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d107      	bne.n	8000f7e <HAL_ADC_Init+0x202>
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d101      	bne.n	8000f7e <HAL_ADC_Init+0x202>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <HAL_ADC_Init+0x204>
 8000f7e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d108      	bne.n	8000f96 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	431a      	orrs	r2, r3
 8000f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f94:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7e5b      	ldrb	r3, [r3, #25]
 8000f9a:	035b      	lsls	r3, r3, #13
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000fa0:	2a01      	cmp	r2, #1
 8000fa2:	d002      	beq.n	8000faa <HAL_ADC_Init+0x22e>
 8000fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa8:	e000      	b.n	8000fac <HAL_ADC_Init+0x230>
 8000faa:	2200      	movs	r2, #0
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d11b      	bne.n	8001002 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7e5b      	ldrb	r3, [r3, #25]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d109      	bne.n	8000fe6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	045a      	lsls	r2, r3, #17
 8000fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe2:	663b      	str	r3, [r7, #96]	; 0x60
 8000fe4:	e00d      	b.n	8001002 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000fee:	f043 0220 	orr.w	r2, r3, #32
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f043 0201 	orr.w	r2, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001006:	2b01      	cmp	r3, #1
 8001008:	d03a      	beq.n	8001080 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a16      	ldr	r2, [pc, #88]	; (8001068 <HAL_ADC_Init+0x2ec>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d004      	beq.n	800101e <HAL_ADC_Init+0x2a2>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <HAL_ADC_Init+0x2f0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d128      	bne.n	8001070 <HAL_ADC_Init+0x2f4>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001022:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001026:	d012      	beq.n	800104e <HAL_ADC_Init+0x2d2>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001030:	d00a      	beq.n	8001048 <HAL_ADC_Init+0x2cc>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800103a:	d002      	beq.n	8001042 <HAL_ADC_Init+0x2c6>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001040:	e018      	b.n	8001074 <HAL_ADC_Init+0x2f8>
 8001042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001046:	e015      	b.n	8001074 <HAL_ADC_Init+0x2f8>
 8001048:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800104c:	e012      	b.n	8001074 <HAL_ADC_Init+0x2f8>
 800104e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001052:	e00f      	b.n	8001074 <HAL_ADC_Init+0x2f8>
 8001054:	20000010 	.word	0x20000010
 8001058:	431bde83 	.word	0x431bde83
 800105c:	50000100 	.word	0x50000100
 8001060:	50000300 	.word	0x50000300
 8001064:	50000700 	.word	0x50000700
 8001068:	50000400 	.word	0x50000400
 800106c:	50000500 	.word	0x50000500
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001078:	4313      	orrs	r3, r2
 800107a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800107c:	4313      	orrs	r3, r2
 800107e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b00      	cmp	r3, #0
 800108c:	d114      	bne.n	80010b8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800109c:	f023 0302 	bic.w	r3, r3, #2
 80010a0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7e1b      	ldrb	r3, [r3, #24]
 80010a6:	039a      	lsls	r2, r3, #14
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4313      	orrs	r3, r2
 80010b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010b4:	4313      	orrs	r3, r2
 80010b6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <HAL_ADC_Init+0x3bc>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6812      	ldr	r2, [r2, #0]
 80010c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010c8:	430b      	orrs	r3, r1
 80010ca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d10c      	bne.n	80010ee <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f023 010f 	bic.w	r1, r3, #15
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	1e5a      	subs	r2, r3, #1
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	631a      	str	r2, [r3, #48]	; 0x30
 80010ec:	e007      	b.n	80010fe <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 020f 	bic.w	r2, r2, #15
 80010fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f023 0303 	bic.w	r3, r3, #3
 800110c:	f043 0201 	orr.w	r2, r3, #1
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
 8001114:	e00a      	b.n	800112c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f023 0312 	bic.w	r3, r3, #18
 800111e:	f043 0210 	orr.w	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001126:	2301      	movs	r3, #1
 8001128:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800112c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001130:	4618      	mov	r0, r3
 8001132:	3768      	adds	r7, #104	; 0x68
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	fff0c007 	.word	0xfff0c007

0800113c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 80f9 	bne.w	800134a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800115e:	2b01      	cmp	r3, #1
 8001160:	d101      	bne.n	8001166 <HAL_ADC_Start+0x2a>
 8001162:	2302      	movs	r3, #2
 8001164:	e0f4      	b.n	8001350 <HAL_ADC_Start+0x214>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fe16 	bl	8001da0 <ADC_Enable>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f040 80e0 	bne.w	8001340 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001188:	f023 0301 	bic.w	r3, r3, #1
 800118c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119c:	d004      	beq.n	80011a8 <HAL_ADC_Start+0x6c>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6d      	ldr	r2, [pc, #436]	; (8001358 <HAL_ADC_Start+0x21c>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d106      	bne.n	80011b6 <HAL_ADC_Start+0x7a>
 80011a8:	4b6c      	ldr	r3, [pc, #432]	; (800135c <HAL_ADC_Start+0x220>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d010      	beq.n	80011d6 <HAL_ADC_Start+0x9a>
 80011b4:	e005      	b.n	80011c2 <HAL_ADC_Start+0x86>
 80011b6:	4b6a      	ldr	r3, [pc, #424]	; (8001360 <HAL_ADC_Start+0x224>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <HAL_ADC_Start+0x9a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011ca:	d004      	beq.n	80011d6 <HAL_ADC_Start+0x9a>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a64      	ldr	r2, [pc, #400]	; (8001364 <HAL_ADC_Start+0x228>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d115      	bne.n	8001202 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d036      	beq.n	800125e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001200:	e02d      	b.n	800125e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001216:	d004      	beq.n	8001222 <HAL_ADC_Start+0xe6>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a4e      	ldr	r2, [pc, #312]	; (8001358 <HAL_ADC_Start+0x21c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d10a      	bne.n	8001238 <HAL_ADC_Start+0xfc>
 8001222:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf14      	ite	ne
 8001230:	2301      	movne	r3, #1
 8001232:	2300      	moveq	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	e008      	b.n	800124a <HAL_ADC_Start+0x10e>
 8001238:	4b4a      	ldr	r3, [pc, #296]	; (8001364 <HAL_ADC_Start+0x228>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf14      	ite	ne
 8001244:	2301      	movne	r3, #1
 8001246:	2300      	moveq	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001256:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800126a:	d106      	bne.n	800127a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	f023 0206 	bic.w	r2, r3, #6
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	645a      	str	r2, [r3, #68]	; 0x44
 8001278:	e002      	b.n	8001280 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	221c      	movs	r2, #28
 800128e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001298:	d004      	beq.n	80012a4 <HAL_ADC_Start+0x168>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a2e      	ldr	r2, [pc, #184]	; (8001358 <HAL_ADC_Start+0x21c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d106      	bne.n	80012b2 <HAL_ADC_Start+0x176>
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_ADC_Start+0x220>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d03e      	beq.n	800132e <HAL_ADC_Start+0x1f2>
 80012b0:	e005      	b.n	80012be <HAL_ADC_Start+0x182>
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <HAL_ADC_Start+0x224>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d037      	beq.n	800132e <HAL_ADC_Start+0x1f2>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012c6:	d004      	beq.n	80012d2 <HAL_ADC_Start+0x196>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a22      	ldr	r2, [pc, #136]	; (8001358 <HAL_ADC_Start+0x21c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d106      	bne.n	80012e0 <HAL_ADC_Start+0x1a4>
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <HAL_ADC_Start+0x220>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	2b05      	cmp	r3, #5
 80012dc:	d027      	beq.n	800132e <HAL_ADC_Start+0x1f2>
 80012de:	e005      	b.n	80012ec <HAL_ADC_Start+0x1b0>
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <HAL_ADC_Start+0x224>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d020      	beq.n	800132e <HAL_ADC_Start+0x1f2>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012f4:	d004      	beq.n	8001300 <HAL_ADC_Start+0x1c4>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <HAL_ADC_Start+0x21c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d106      	bne.n	800130e <HAL_ADC_Start+0x1d2>
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_ADC_Start+0x220>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	2b09      	cmp	r3, #9
 800130a:	d010      	beq.n	800132e <HAL_ADC_Start+0x1f2>
 800130c:	e005      	b.n	800131a <HAL_ADC_Start+0x1de>
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_ADC_Start+0x224>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 031f 	and.w	r3, r3, #31
 8001316:	2b09      	cmp	r3, #9
 8001318:	d009      	beq.n	800132e <HAL_ADC_Start+0x1f2>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001322:	d004      	beq.n	800132e <HAL_ADC_Start+0x1f2>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_ADC_Start+0x228>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d10f      	bne.n	800134e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 0204 	orr.w	r2, r2, #4
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	e006      	b.n	800134e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001348:	e001      	b.n	800134e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800134a:	2302      	movs	r3, #2
 800134c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	50000100 	.word	0x50000100
 800135c:	50000300 	.word	0x50000300
 8001360:	50000700 	.word	0x50000700
 8001364:	50000400 	.word	0x50000400

08001368 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <HAL_ADC_Stop+0x1a>
 800137e:	2302      	movs	r3, #2
 8001380:	e023      	b.n	80013ca <HAL_ADC_Stop+0x62>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800138a:	216c      	movs	r1, #108	; 0x6c
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 fdc5 	bl	8001f1c <ADC_ConversionStop>
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d111      	bne.n	80013c0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 fd5d 	bl	8001e5c <ADC_Disable>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d109      	bne.n	80013c0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d102      	bne.n	80013f0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80013ea:	2308      	movs	r3, #8
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e03a      	b.n	8001466 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013f8:	d004      	beq.n	8001404 <HAL_ADC_PollForConversion+0x30>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a6e      	ldr	r2, [pc, #440]	; (80015b8 <HAL_ADC_PollForConversion+0x1e4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d101      	bne.n	8001408 <HAL_ADC_PollForConversion+0x34>
 8001404:	4b6d      	ldr	r3, [pc, #436]	; (80015bc <HAL_ADC_PollForConversion+0x1e8>)
 8001406:	e000      	b.n	800140a <HAL_ADC_PollForConversion+0x36>
 8001408:	4b6d      	ldr	r3, [pc, #436]	; (80015c0 <HAL_ADC_PollForConversion+0x1ec>)
 800140a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	2b00      	cmp	r3, #0
 8001416:	d112      	bne.n	800143e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b01      	cmp	r3, #1
 8001424:	d11d      	bne.n	8001462 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f043 0220 	orr.w	r2, r3, #32
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e0b8      	b.n	80015b0 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f043 0220 	orr.w	r2, r3, #32
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e0a6      	b.n	80015b0 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001462:	230c      	movs	r3, #12
 8001464:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800146e:	d004      	beq.n	800147a <HAL_ADC_PollForConversion+0xa6>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a50      	ldr	r2, [pc, #320]	; (80015b8 <HAL_ADC_PollForConversion+0x1e4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d106      	bne.n	8001488 <HAL_ADC_PollForConversion+0xb4>
 800147a:	4b50      	ldr	r3, [pc, #320]	; (80015bc <HAL_ADC_PollForConversion+0x1e8>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	2b00      	cmp	r3, #0
 8001484:	d010      	beq.n	80014a8 <HAL_ADC_PollForConversion+0xd4>
 8001486:	e005      	b.n	8001494 <HAL_ADC_PollForConversion+0xc0>
 8001488:	4b4d      	ldr	r3, [pc, #308]	; (80015c0 <HAL_ADC_PollForConversion+0x1ec>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	2b00      	cmp	r3, #0
 8001492:	d009      	beq.n	80014a8 <HAL_ADC_PollForConversion+0xd4>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800149c:	d004      	beq.n	80014a8 <HAL_ADC_PollForConversion+0xd4>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a48      	ldr	r2, [pc, #288]	; (80015c4 <HAL_ADC_PollForConversion+0x1f0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d104      	bne.n	80014b2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	e00f      	b.n	80014d2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ba:	d004      	beq.n	80014c6 <HAL_ADC_PollForConversion+0xf2>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a3d      	ldr	r2, [pc, #244]	; (80015b8 <HAL_ADC_PollForConversion+0x1e4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d102      	bne.n	80014cc <HAL_ADC_PollForConversion+0xf8>
 80014c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014ca:	e000      	b.n	80014ce <HAL_ADC_PollForConversion+0xfa>
 80014cc:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_ADC_PollForConversion+0x1f0>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80014d2:	f7ff fc25 	bl	8000d20 <HAL_GetTick>
 80014d6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014d8:	e01a      	b.n	8001510 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014e0:	d016      	beq.n	8001510 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <HAL_ADC_PollForConversion+0x124>
 80014e8:	f7ff fc1a 	bl	8000d20 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d20b      	bcs.n	8001510 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f043 0204 	orr.w	r2, r3, #4
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e04f      	b.n	80015b0 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0dd      	beq.n	80014da <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001534:	2b00      	cmp	r3, #0
 8001536:	d131      	bne.n	800159c <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800153e:	2b00      	cmp	r3, #0
 8001540:	d12c      	bne.n	800159c <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	2b08      	cmp	r3, #8
 800154e:	d125      	bne.n	800159c <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	2b00      	cmp	r3, #0
 800155c:	d112      	bne.n	8001584 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d112      	bne.n	800159c <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f043 0201 	orr.w	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
 8001582:	e00b      	b.n	800159c <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f043 0220 	orr.w	r2, r3, #32
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	f043 0201 	orr.w	r2, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d103      	bne.n	80015ae <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	50000100 	.word	0x50000100
 80015bc:	50000300 	.word	0x50000300
 80015c0:	50000700 	.word	0x50000700
 80015c4:	50000400 	.word	0x50000400

080015c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b09b      	sub	sp, #108	; 0x6c
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x22>
 8001602:	2302      	movs	r3, #2
 8001604:	e2cb      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x5ba>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	f040 82af 	bne.w	8001b7c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b04      	cmp	r3, #4
 8001624:	d81c      	bhi.n	8001660 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	461a      	mov	r2, r3
 800163a:	231f      	movs	r3, #31
 800163c:	4093      	lsls	r3, r2
 800163e:	43db      	mvns	r3, r3
 8001640:	4019      	ands	r1, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa00 f203 	lsl.w	r2, r0, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	631a      	str	r2, [r3, #48]	; 0x30
 800165e:	e063      	b.n	8001728 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b09      	cmp	r3, #9
 8001666:	d81e      	bhi.n	80016a6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	3b1e      	subs	r3, #30
 800167c:	221f      	movs	r2, #31
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	4019      	ands	r1, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	3b1e      	subs	r3, #30
 8001698:	fa00 f203 	lsl.w	r2, r0, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34
 80016a4:	e040      	b.n	8001728 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b0e      	cmp	r3, #14
 80016ac:	d81e      	bhi.n	80016ec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	3b3c      	subs	r3, #60	; 0x3c
 80016c2:	221f      	movs	r2, #31
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	4019      	ands	r1, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	3b3c      	subs	r3, #60	; 0x3c
 80016de:	fa00 f203 	lsl.w	r2, r0, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38
 80016ea:	e01d      	b.n	8001728 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	3b5a      	subs	r3, #90	; 0x5a
 8001700:	221f      	movs	r2, #31
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	4019      	ands	r1, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	3b5a      	subs	r3, #90	; 0x5a
 800171c:	fa00 f203 	lsl.w	r2, r0, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b00      	cmp	r3, #0
 8001734:	f040 80e5 	bne.w	8001902 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b09      	cmp	r3, #9
 800173e:	d91c      	bls.n	800177a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6999      	ldr	r1, [r3, #24]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	3b1e      	subs	r3, #30
 8001752:	2207      	movs	r2, #7
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	4019      	ands	r1, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6898      	ldr	r0, [r3, #8]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	3b1e      	subs	r3, #30
 800176c:	fa00 f203 	lsl.w	r2, r0, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	619a      	str	r2, [r3, #24]
 8001778:	e019      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6959      	ldr	r1, [r3, #20]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	2207      	movs	r2, #7
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	4019      	ands	r1, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6898      	ldr	r0, [r3, #8]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	fa00 f203 	lsl.w	r2, r0, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	08db      	lsrs	r3, r3, #3
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d84f      	bhi.n	8001870 <HAL_ADC_ConfigChannel+0x28c>
 80017d0:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <HAL_ADC_ConfigChannel+0x1f4>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	0800180b 	.word	0x0800180b
 80017e0:	0800182d 	.word	0x0800182d
 80017e4:	0800184f 	.word	0x0800184f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017ee:	4b9f      	ldr	r3, [pc, #636]	; (8001a6c <HAL_ADC_ConfigChannel+0x488>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	0691      	lsls	r1, r2, #26
 80017f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017fa:	430a      	orrs	r2, r1
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001806:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001808:	e07e      	b.n	8001908 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001810:	4b96      	ldr	r3, [pc, #600]	; (8001a6c <HAL_ADC_ConfigChannel+0x488>)
 8001812:	4013      	ands	r3, r2
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	0691      	lsls	r1, r2, #26
 800181a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800181c:	430a      	orrs	r2, r1
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001828:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800182a:	e06d      	b.n	8001908 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001832:	4b8e      	ldr	r3, [pc, #568]	; (8001a6c <HAL_ADC_ConfigChannel+0x488>)
 8001834:	4013      	ands	r3, r2
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	0691      	lsls	r1, r2, #26
 800183c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800183e:	430a      	orrs	r2, r1
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800184a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800184c:	e05c      	b.n	8001908 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001854:	4b85      	ldr	r3, [pc, #532]	; (8001a6c <HAL_ADC_ConfigChannel+0x488>)
 8001856:	4013      	ands	r3, r2
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	0691      	lsls	r1, r2, #26
 800185e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001860:	430a      	orrs	r2, r1
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800186c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800186e:	e04b      	b.n	8001908 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001876:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	069b      	lsls	r3, r3, #26
 8001880:	429a      	cmp	r2, r3
 8001882:	d107      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001892:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800189a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	069b      	lsls	r3, r3, #26
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d107      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018b6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	069b      	lsls	r3, r3, #26
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d107      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018da:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	069b      	lsls	r3, r3, #26
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d10a      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018fe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001900:	e001      	b.n	8001906 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001902:	bf00      	nop
 8001904:	e000      	b.n	8001908 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001906:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x344>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x344>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_ADC_ConfigChannel+0x346>
 8001928:	2300      	movs	r3, #0
 800192a:	2b00      	cmp	r3, #0
 800192c:	f040 8131 	bne.w	8001b92 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d00f      	beq.n	8001958 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2201      	movs	r2, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	400a      	ands	r2, r1
 8001952:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001956:	e049      	b.n	80019ec <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	409a      	lsls	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b09      	cmp	r3, #9
 8001978:	d91c      	bls.n	80019b4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6999      	ldr	r1, [r3, #24]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	3b1b      	subs	r3, #27
 800198c:	2207      	movs	r2, #7
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	4019      	ands	r1, r3
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6898      	ldr	r0, [r3, #8]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	3b1b      	subs	r3, #27
 80019a6:	fa00 f203 	lsl.w	r2, r0, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	619a      	str	r2, [r3, #24]
 80019b2:	e01b      	b.n	80019ec <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6959      	ldr	r1, [r3, #20]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	2207      	movs	r2, #7
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4019      	ands	r1, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6898      	ldr	r0, [r3, #8]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	fa00 f203 	lsl.w	r2, r0, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019f4:	d004      	beq.n	8001a00 <HAL_ADC_ConfigChannel+0x41c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_ADC_ConfigChannel+0x48c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d101      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x420>
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_ADC_ConfigChannel+0x490>)
 8001a02:	e000      	b.n	8001a06 <HAL_ADC_ConfigChannel+0x422>
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_ADC_ConfigChannel+0x494>)
 8001a06:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b10      	cmp	r3, #16
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d015      	beq.n	8001a48 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a20:	2b11      	cmp	r3, #17
 8001a22:	d105      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00b      	beq.n	8001a48 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a34:	2b12      	cmp	r3, #18
 8001a36:	f040 80ac 	bne.w	8001b92 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 80a5 	bne.w	8001b92 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a50:	d102      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x474>
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_ADC_ConfigChannel+0x48c>)
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	e023      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x4bc>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_ADC_ConfigChannel+0x48c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d10c      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x498>
 8001a62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e01a      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x4bc>
 8001a6a:	bf00      	nop
 8001a6c:	83fff000 	.word	0x83fff000
 8001a70:	50000100 	.word	0x50000100
 8001a74:	50000300 	.word	0x50000300
 8001a78:	50000700 	.word	0x50000700
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <HAL_ADC_ConfigChannel+0x5c8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d102      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x4a8>
 8001a86:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	e009      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x4bc>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a47      	ldr	r2, [pc, #284]	; (8001bb0 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d102      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x4b8>
 8001a96:	4b45      	ldr	r3, [pc, #276]	; (8001bac <HAL_ADC_ConfigChannel+0x5c8>)
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	e001      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x4bc>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d108      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x4dc>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x4dc>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x4de>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d150      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ac6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d010      	beq.n	8001aee <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x504>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x504>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_ADC_ConfigChannel+0x506>
 8001ae8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d13c      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b10      	cmp	r3, #16
 8001af4:	d11d      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x54e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001afe:	d118      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <HAL_ADC_ConfigChannel+0x5d0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a29      	ldr	r2, [pc, #164]	; (8001bb8 <HAL_ADC_ConfigChannel+0x5d4>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0c9a      	lsrs	r2, r3, #18
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b22:	e002      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f9      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b30:	e02e      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b11      	cmp	r3, #17
 8001b38:	d10b      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x56e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b42:	d106      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b4e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b50:	e01e      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b12      	cmp	r3, #18
 8001b58:	d11a      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b64:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b66:	e013      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f043 0220 	orr.w	r2, r3, #32
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b7a:	e00a      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b8e:	e000      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b90:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	376c      	adds	r7, #108	; 0x6c
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	50000400 	.word	0x50000400
 8001bb0:	50000500 	.word	0x50000500
 8001bb4:	20000010 	.word	0x20000010
 8001bb8:	431bde83 	.word	0x431bde83

08001bbc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b099      	sub	sp, #100	; 0x64
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bd4:	d102      	bne.n	8001bdc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001bd6:	4b6d      	ldr	r3, [pc, #436]	; (8001d8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	e01a      	b.n	8001c12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a6a      	ldr	r2, [pc, #424]	; (8001d8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d103      	bne.n	8001bee <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001be6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	e011      	b.n	8001c12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a67      	ldr	r2, [pc, #412]	; (8001d90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d102      	bne.n	8001bfe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001bf8:	4b66      	ldr	r3, [pc, #408]	; (8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	e009      	b.n	8001c12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a64      	ldr	r2, [pc, #400]	; (8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d102      	bne.n	8001c0e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001c08:	4b61      	ldr	r3, [pc, #388]	; (8001d90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	e001      	b.n	8001c12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0b0      	b.n	8001d7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e0a9      	b.n	8001d7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f040 808d 	bne.w	8001d5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 8086 	bne.w	8001d5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c58:	d004      	beq.n	8001c64 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a4b      	ldr	r2, [pc, #300]	; (8001d8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001c64:	4b4c      	ldr	r3, [pc, #304]	; (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001c66:	e000      	b.n	8001c6a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001c68:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001c6a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d040      	beq.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c86:	035b      	lsls	r3, r3, #13
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c8e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d108      	bne.n	8001cb0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d15c      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001cd2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d14b      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ce0:	f023 030f 	bic.w	r3, r3, #15
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	6811      	ldr	r1, [r2, #0]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	6892      	ldr	r2, [r2, #8]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cf2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cf4:	e03c      	b.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d00:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d108      	bne.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001d22:	2300      	movs	r3, #0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d123      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d107      	bne.n	8001d44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001d44:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d112      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d52:	f023 030f 	bic.w	r3, r3, #15
 8001d56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d58:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d5a:	e009      	b.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f043 0220 	orr.w	r2, r3, #32
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d6e:	e000      	b.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d70:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3764      	adds	r7, #100	; 0x64
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	50000100 	.word	0x50000100
 8001d90:	50000400 	.word	0x50000400
 8001d94:	50000500 	.word	0x50000500
 8001d98:	50000300 	.word	0x50000300
 8001d9c:	50000700 	.word	0x50000700

08001da0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d108      	bne.n	8001dcc <ADC_Enable+0x2c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <ADC_Enable+0x2c>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <ADC_Enable+0x2e>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d13c      	bne.n	8001e4c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <ADC_Enable+0xb8>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00d      	beq.n	8001dfc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f043 0210 	orr.w	r2, r3, #16
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	f043 0201 	orr.w	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e028      	b.n	8001e4e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001e0c:	f7fe ff88 	bl	8000d20 <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e12:	e014      	b.n	8001e3e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e14:	f7fe ff84 	bl	8000d20 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d90d      	bls.n	8001e3e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f043 0210 	orr.w	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e007      	b.n	8001e4e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d1e3      	bne.n	8001e14 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	8000003f 	.word	0x8000003f

08001e5c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d108      	bne.n	8001e88 <ADC_Disable+0x2c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <ADC_Disable+0x2c>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <ADC_Disable+0x2e>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d040      	beq.n	8001f10 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 030d 	and.w	r3, r3, #13
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d10f      	bne.n	8001ebc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0202 	orr.w	r2, r2, #2
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001eb4:	f7fe ff34 	bl	8000d20 <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001eba:	e022      	b.n	8001f02 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f043 0210 	orr.w	r2, r3, #16
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e01c      	b.n	8001f12 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ed8:	f7fe ff22 	bl	8000d20 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d90d      	bls.n	8001f02 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f043 0210 	orr.w	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e007      	b.n	8001f12 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d0e3      	beq.n	8001ed8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 8093 	beq.w	8002068 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f50:	d12a      	bne.n	8001fa8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d126      	bne.n	8001fa8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d122      	bne.n	8001fa8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001f62:	230c      	movs	r3, #12
 8001f64:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001f66:	e014      	b.n	8001f92 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4a42      	ldr	r2, [pc, #264]	; (8002074 <ADC_ConversionStop+0x158>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d90d      	bls.n	8001f8c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f043 0210 	orr.w	r2, r3, #16
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e06e      	b.n	800206a <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	2b40      	cmp	r3, #64	; 0x40
 8001f9e:	d1e3      	bne.n	8001f68 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2240      	movs	r2, #64	; 0x40
 8001fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b60      	cmp	r3, #96	; 0x60
 8001fac:	d015      	beq.n	8001fda <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d10e      	bne.n	8001fda <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d107      	bne.n	8001fda <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0210 	orr.w	r2, r2, #16
 8001fd8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	d015      	beq.n	800200c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d10e      	bne.n	800200c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0220 	orr.w	r2, r2, #32
 800200a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b60      	cmp	r3, #96	; 0x60
 8002010:	d004      	beq.n	800201c <ADC_ConversionStop+0x100>
 8002012:	2b6c      	cmp	r3, #108	; 0x6c
 8002014:	d105      	bne.n	8002022 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002016:	230c      	movs	r3, #12
 8002018:	617b      	str	r3, [r7, #20]
        break;
 800201a:	e005      	b.n	8002028 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800201c:	2308      	movs	r3, #8
 800201e:	617b      	str	r3, [r7, #20]
        break;
 8002020:	e002      	b.n	8002028 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002022:	2304      	movs	r3, #4
 8002024:	617b      	str	r3, [r7, #20]
        break;
 8002026:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002028:	f7fe fe7a 	bl	8000d20 <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800202e:	e014      	b.n	800205a <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002030:	f7fe fe76 	bl	8000d20 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b0b      	cmp	r3, #11
 800203c:	d90d      	bls.n	800205a <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f043 0210 	orr.w	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e007      	b.n	800206a <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e3      	bne.n	8002030 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	000993ff 	.word	0x000993ff

08002078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0a      	blt.n	8002106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	490c      	ldr	r1, [pc, #48]	; (8002128 <__NVIC_SetPriority+0x4c>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	440b      	add	r3, r1
 8002100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002104:	e00a      	b.n	800211c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <__NVIC_SetPriority+0x50>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3b04      	subs	r3, #4
 8002114:	0112      	lsls	r2, r2, #4
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	440b      	add	r3, r1
 800211a:	761a      	strb	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000e100 	.word	0xe000e100
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f1c3 0307 	rsb	r3, r3, #7
 800214a:	2b04      	cmp	r3, #4
 800214c:	bf28      	it	cs
 800214e:	2304      	movcs	r3, #4
 8002150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	2b06      	cmp	r3, #6
 8002158:	d902      	bls.n	8002160 <NVIC_EncodePriority+0x30>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3b03      	subs	r3, #3
 800215e:	e000      	b.n	8002162 <NVIC_EncodePriority+0x32>
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	401a      	ands	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43d9      	mvns	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	4313      	orrs	r3, r2
         );
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a8:	d301      	bcc.n	80021ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00f      	b.n	80021ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <SysTick_Config+0x40>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b6:	210f      	movs	r1, #15
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021bc:	f7ff ff8e 	bl	80020dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <SysTick_Config+0x40>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <SysTick_Config+0x40>)
 80021c8:	2207      	movs	r2, #7
 80021ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	e000e010 	.word	0xe000e010

080021dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff47 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002204:	f7ff ff5c 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 8002208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	6978      	ldr	r0, [r7, #20]
 8002210:	f7ff ff8e 	bl	8002130 <NVIC_EncodePriority>
 8002214:	4602      	mov	r2, r0
 8002216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff5d 	bl	80020dc <__NVIC_SetPriority>
}
 8002222:	bf00      	nop
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffb0 	bl	8002198 <SysTick_Config>
 8002238:	4603      	mov	r3, r0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002252:	e154      	b.n	80024fe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2101      	movs	r1, #1
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	4013      	ands	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8146 	beq.w	80024f8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x38>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b12      	cmp	r3, #18
 800227a:	d123      	bne.n	80022c4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	08da      	lsrs	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3208      	adds	r2, #8
 8002284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	220f      	movs	r2, #15
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	6939      	ldr	r1, [r7, #16]
 80022c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2203      	movs	r2, #3
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0203 	and.w	r2, r3, #3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d00b      	beq.n	8002318 <HAL_GPIO_Init+0xd4>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d007      	beq.n	8002318 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800230c:	2b11      	cmp	r3, #17
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b12      	cmp	r3, #18
 8002316:	d130      	bne.n	800237a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800234e:	2201      	movs	r2, #1
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f003 0201 	and.w	r2, r3, #1
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	2203      	movs	r2, #3
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80a0 	beq.w	80024f8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b8:	4b58      	ldr	r3, [pc, #352]	; (800251c <HAL_GPIO_Init+0x2d8>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4a57      	ldr	r2, [pc, #348]	; (800251c <HAL_GPIO_Init+0x2d8>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6193      	str	r3, [r2, #24]
 80023c4:	4b55      	ldr	r3, [pc, #340]	; (800251c <HAL_GPIO_Init+0x2d8>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023d0:	4a53      	ldr	r2, [pc, #332]	; (8002520 <HAL_GPIO_Init+0x2dc>)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3302      	adds	r3, #2
 80023d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	220f      	movs	r2, #15
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023fa:	d019      	beq.n	8002430 <HAL_GPIO_Init+0x1ec>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a49      	ldr	r2, [pc, #292]	; (8002524 <HAL_GPIO_Init+0x2e0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d013      	beq.n	800242c <HAL_GPIO_Init+0x1e8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a48      	ldr	r2, [pc, #288]	; (8002528 <HAL_GPIO_Init+0x2e4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00d      	beq.n	8002428 <HAL_GPIO_Init+0x1e4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a47      	ldr	r2, [pc, #284]	; (800252c <HAL_GPIO_Init+0x2e8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d007      	beq.n	8002424 <HAL_GPIO_Init+0x1e0>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a46      	ldr	r2, [pc, #280]	; (8002530 <HAL_GPIO_Init+0x2ec>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_GPIO_Init+0x1dc>
 800241c:	2304      	movs	r3, #4
 800241e:	e008      	b.n	8002432 <HAL_GPIO_Init+0x1ee>
 8002420:	2305      	movs	r3, #5
 8002422:	e006      	b.n	8002432 <HAL_GPIO_Init+0x1ee>
 8002424:	2303      	movs	r3, #3
 8002426:	e004      	b.n	8002432 <HAL_GPIO_Init+0x1ee>
 8002428:	2302      	movs	r3, #2
 800242a:	e002      	b.n	8002432 <HAL_GPIO_Init+0x1ee>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <HAL_GPIO_Init+0x1ee>
 8002430:	2300      	movs	r3, #0
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	f002 0203 	and.w	r2, r2, #3
 8002438:	0092      	lsls	r2, r2, #2
 800243a:	4093      	lsls	r3, r2
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002442:	4937      	ldr	r1, [pc, #220]	; (8002520 <HAL_GPIO_Init+0x2dc>)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	3302      	adds	r3, #2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002450:	4b38      	ldr	r3, [pc, #224]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	43db      	mvns	r3, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002474:	4a2f      	ldr	r2, [pc, #188]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800247a:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800249e:	4a25      	ldr	r2, [pc, #148]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a4:	4b23      	ldr	r3, [pc, #140]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024c8:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024f2:	4a10      	ldr	r2, [pc, #64]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3301      	adds	r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	f47f aea3 	bne.w	8002254 <HAL_GPIO_Init+0x10>
  }
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	40010000 	.word	0x40010000
 8002524:	48000400 	.word	0x48000400
 8002528:	48000800 	.word	0x48000800
 800252c:	48000c00 	.word	0x48000c00
 8002530:	48001000 	.word	0x48001000
 8002534:	40010400 	.word	0x40010400

08002538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
 8002544:	4613      	mov	r3, r2
 8002546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002548:	787b      	ldrb	r3, [r7, #1]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002554:	e002      	b.n	800255c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800256e:	af00      	add	r7, sp, #0
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	f000 bef4 	b.w	800336a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 816a 	beq.w	8002866 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002592:	4bb3      	ldr	r3, [pc, #716]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b04      	cmp	r3, #4
 800259c:	d00c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800259e:	4bb0      	ldr	r3, [pc, #704]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d159      	bne.n	800265e <HAL_RCC_OscConfig+0xf6>
 80025aa:	4bad      	ldr	r3, [pc, #692]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b6:	d152      	bne.n	800265e <HAL_RCC_OscConfig+0xf6>
 80025b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025bc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	fab3 f383 	clz	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d102      	bne.n	80025ea <HAL_RCC_OscConfig+0x82>
 80025e4:	4b9e      	ldr	r3, [pc, #632]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	e015      	b.n	8002616 <HAL_RCC_OscConfig+0xae>
 80025ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ee:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002602:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002606:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002612:	4b93      	ldr	r3, [pc, #588]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800261a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800261e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002622:	fa92 f2a2 	rbit	r2, r2
 8002626:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800262a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800262e:	fab2 f282 	clz	r2, r2
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	f042 0220 	orr.w	r2, r2, #32
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	f002 021f 	and.w	r2, r2, #31
 800263e:	2101      	movs	r1, #1
 8002640:	fa01 f202 	lsl.w	r2, r1, r2
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 810c 	beq.w	8002864 <HAL_RCC_OscConfig+0x2fc>
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 8106 	bne.w	8002864 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f000 be86 	b.w	800336a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002668:	d106      	bne.n	8002678 <HAL_RCC_OscConfig+0x110>
 800266a:	4b7d      	ldr	r3, [pc, #500]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a7c      	ldr	r2, [pc, #496]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e030      	b.n	80026da <HAL_RCC_OscConfig+0x172>
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0x134>
 8002682:	4b77      	ldr	r3, [pc, #476]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a76      	ldr	r2, [pc, #472]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 8002688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b74      	ldr	r3, [pc, #464]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a73      	ldr	r2, [pc, #460]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 8002694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e01e      	b.n	80026da <HAL_RCC_OscConfig+0x172>
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x15a>
 80026a8:	4b6d      	ldr	r3, [pc, #436]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a6c      	ldr	r2, [pc, #432]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80026ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a69      	ldr	r2, [pc, #420]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e00b      	b.n	80026da <HAL_RCC_OscConfig+0x172>
 80026c2:	4b67      	ldr	r3, [pc, #412]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a66      	ldr	r2, [pc, #408]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	4b64      	ldr	r3, [pc, #400]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a63      	ldr	r2, [pc, #396]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80026d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026da:	4b61      	ldr	r3, [pc, #388]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	f023 020f 	bic.w	r2, r3, #15
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	495d      	ldr	r1, [pc, #372]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d059      	beq.n	80027ac <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fb12 	bl	8000d20 <HAL_GetTick>
 80026fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002702:	f7fe fb0d 	bl	8000d20 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b64      	cmp	r3, #100	; 0x64
 8002710:	d902      	bls.n	8002718 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	f000 be29 	b.w	800336a <HAL_RCC_OscConfig+0xe02>
 8002718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800271c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002724:	fa93 f3a3 	rbit	r3, r3
 8002728:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800272c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d102      	bne.n	800274a <HAL_RCC_OscConfig+0x1e2>
 8002744:	4b46      	ldr	r3, [pc, #280]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	e015      	b.n	8002776 <HAL_RCC_OscConfig+0x20e>
 800274a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800274e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800275e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002762:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002766:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002772:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800277a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800277e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002782:	fa92 f2a2 	rbit	r2, r2
 8002786:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800278a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800278e:	fab2 f282 	clz	r2, r2
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	f042 0220 	orr.w	r2, r2, #32
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	f002 021f 	and.w	r2, r2, #31
 800279e:	2101      	movs	r1, #1
 80027a0:	fa01 f202 	lsl.w	r2, r1, r2
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0ab      	beq.n	8002702 <HAL_RCC_OscConfig+0x19a>
 80027aa:	e05c      	b.n	8002866 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe fab8 	bl	8000d20 <HAL_GetTick>
 80027b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b4:	e00a      	b.n	80027cc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b6:	f7fe fab3 	bl	8000d20 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d902      	bls.n	80027cc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	f000 bdcf 	b.w	800336a <HAL_RCC_OscConfig+0xe02>
 80027cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80027e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d102      	bne.n	80027fe <HAL_RCC_OscConfig+0x296>
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	e015      	b.n	800282a <HAL_RCC_OscConfig+0x2c2>
 80027fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002802:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002812:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002816:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800281a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <HAL_RCC_OscConfig+0x2f8>)
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800282e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002832:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002836:	fa92 f2a2 	rbit	r2, r2
 800283a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800283e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002842:	fab2 f282 	clz	r2, r2
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	f042 0220 	orr.w	r2, r2, #32
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f002 021f 	and.w	r2, r2, #31
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1ab      	bne.n	80027b6 <HAL_RCC_OscConfig+0x24e>
 800285e:	e002      	b.n	8002866 <HAL_RCC_OscConfig+0x2fe>
 8002860:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 816f 	beq.w	8002b54 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002876:	4bd0      	ldr	r3, [pc, #832]	; (8002bb8 <HAL_RCC_OscConfig+0x650>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002882:	4bcd      	ldr	r3, [pc, #820]	; (8002bb8 <HAL_RCC_OscConfig+0x650>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b08      	cmp	r3, #8
 800288c:	d16c      	bne.n	8002968 <HAL_RCC_OscConfig+0x400>
 800288e:	4bca      	ldr	r3, [pc, #808]	; (8002bb8 <HAL_RCC_OscConfig+0x650>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d166      	bne.n	8002968 <HAL_RCC_OscConfig+0x400>
 800289a:	2302      	movs	r3, #2
 800289c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80028ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_OscConfig+0x362>
 80028c4:	4bbc      	ldr	r3, [pc, #752]	; (8002bb8 <HAL_RCC_OscConfig+0x650>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	e013      	b.n	80028f2 <HAL_RCC_OscConfig+0x38a>
 80028ca:	2302      	movs	r3, #2
 80028cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80028dc:	2302      	movs	r3, #2
 80028de:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80028e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80028ee:	4bb2      	ldr	r3, [pc, #712]	; (8002bb8 <HAL_RCC_OscConfig+0x650>)
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2202      	movs	r2, #2
 80028f4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80028f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028fc:	fa92 f2a2 	rbit	r2, r2
 8002900:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002904:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002908:	fab2 f282 	clz	r2, r2
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	f042 0220 	orr.w	r2, r2, #32
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	f002 021f 	and.w	r2, r2, #31
 8002918:	2101      	movs	r1, #1
 800291a:	fa01 f202 	lsl.w	r2, r1, r2
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_RCC_OscConfig+0x3cc>
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d002      	beq.n	8002934 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	f000 bd1b 	b.w	800336a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002934:	4ba0      	ldr	r3, [pc, #640]	; (8002bb8 <HAL_RCC_OscConfig+0x650>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	21f8      	movs	r1, #248	; 0xf8
 8002944:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800294c:	fa91 f1a1 	rbit	r1, r1
 8002950:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002954:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002958:	fab1 f181 	clz	r1, r1
 800295c:	b2c9      	uxtb	r1, r1
 800295e:	408b      	lsls	r3, r1
 8002960:	4995      	ldr	r1, [pc, #596]	; (8002bb8 <HAL_RCC_OscConfig+0x650>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	e0f5      	b.n	8002b54 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8085 	beq.w	8002a7e <HAL_RCC_OscConfig+0x516>
 8002974:	2301      	movs	r3, #1
 8002976:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002986:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002994:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	461a      	mov	r2, r3
 800299c:	2301      	movs	r3, #1
 800299e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe f9be 	bl	8000d20 <HAL_GetTick>
 80029a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029aa:	f7fe f9b9 	bl	8000d20 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d902      	bls.n	80029c0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	f000 bcd5 	b.w	800336a <HAL_RCC_OscConfig+0xe02>
 80029c0:	2302      	movs	r3, #2
 80029c2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80029d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d102      	bne.n	80029f0 <HAL_RCC_OscConfig+0x488>
 80029ea:	4b73      	ldr	r3, [pc, #460]	; (8002bb8 <HAL_RCC_OscConfig+0x650>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	e013      	b.n	8002a18 <HAL_RCC_OscConfig+0x4b0>
 80029f0:	2302      	movs	r3, #2
 80029f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a02:	2302      	movs	r3, #2
 8002a04:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a08:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a14:	4b68      	ldr	r3, [pc, #416]	; (8002bb8 <HAL_RCC_OscConfig+0x650>)
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a1e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a22:	fa92 f2a2 	rbit	r2, r2
 8002a26:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a2a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a2e:	fab2 f282 	clz	r2, r2
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	f042 0220 	orr.w	r2, r2, #32
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	f002 021f 	and.w	r2, r2, #31
 8002a3e:	2101      	movs	r1, #1
 8002a40:	fa01 f202 	lsl.w	r2, r1, r2
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0af      	beq.n	80029aa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4a:	4b5b      	ldr	r3, [pc, #364]	; (8002bb8 <HAL_RCC_OscConfig+0x650>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	21f8      	movs	r1, #248	; 0xf8
 8002a5a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a62:	fa91 f1a1 	rbit	r1, r1
 8002a66:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a6a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002a6e:	fab1 f181 	clz	r1, r1
 8002a72:	b2c9      	uxtb	r1, r1
 8002a74:	408b      	lsls	r3, r1
 8002a76:	4950      	ldr	r1, [pc, #320]	; (8002bb8 <HAL_RCC_OscConfig+0x650>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]
 8002a7c:	e06a      	b.n	8002b54 <HAL_RCC_OscConfig+0x5ec>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002a90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe f939 	bl	8000d20 <HAL_GetTick>
 8002aae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab4:	f7fe f934 	bl	8000d20 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d902      	bls.n	8002aca <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	f000 bc50 	b.w	800336a <HAL_RCC_OscConfig+0xe02>
 8002aca:	2302      	movs	r3, #2
 8002acc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d102      	bne.n	8002afa <HAL_RCC_OscConfig+0x592>
 8002af4:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <HAL_RCC_OscConfig+0x650>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	e013      	b.n	8002b22 <HAL_RCC_OscConfig+0x5ba>
 8002afa:	2302      	movs	r3, #2
 8002afc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <HAL_RCC_OscConfig+0x650>)
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2202      	movs	r2, #2
 8002b24:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b28:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b2c:	fa92 f2a2 	rbit	r2, r2
 8002b30:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b34:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b38:	fab2 f282 	clz	r2, r2
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	f042 0220 	orr.w	r2, r2, #32
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	f002 021f 	and.w	r2, r2, #31
 8002b48:	2101      	movs	r1, #1
 8002b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1af      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80da 	beq.w	8002d18 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d069      	beq.n	8002c42 <HAL_RCC_OscConfig+0x6da>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_OscConfig+0x654>)
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	461a      	mov	r2, r3
 8002b94:	2301      	movs	r3, #1
 8002b96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b98:	f7fe f8c2 	bl	8000d20 <HAL_GetTick>
 8002b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba0:	e00e      	b.n	8002bc0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba2:	f7fe f8bd 	bl	8000d20 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d906      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e3d9      	b.n	800336a <HAL_RCC_OscConfig+0xe02>
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	10908120 	.word	0x10908120
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002bd2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fa93 f2a3 	rbit	r2, r3
 8002be4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002bee:	2202      	movs	r2, #2
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	fa93 f2a3 	rbit	r2, r3
 8002bfc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	4ba5      	ldr	r3, [pc, #660]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c06:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	6019      	str	r1, [r3, #0]
 8002c0e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	fa93 f1a3 	rbit	r1, r3
 8002c18:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c1c:	6019      	str	r1, [r3, #0]
  return result;
 8002c1e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0b0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x63a>
 8002c40:	e06a      	b.n	8002d18 <HAL_RCC_OscConfig+0x7b0>
 8002c42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	fa93 f2a3 	rbit	r2, r3
 8002c54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c58:	601a      	str	r2, [r3, #0]
  return result;
 8002c5a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c5e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b8c      	ldr	r3, [pc, #560]	; (8002e9c <HAL_RCC_OscConfig+0x934>)
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2300      	movs	r3, #0
 8002c72:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fe f854 	bl	8000d20 <HAL_GetTick>
 8002c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	e009      	b.n	8002c92 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe f84f 	bl	8000d20 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e36b      	b.n	800336a <HAL_RCC_OscConfig+0xe02>
 8002c92:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c96:	2202      	movs	r2, #2
 8002c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f2a3 	rbit	r2, r3
 8002ca4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002cae:	2202      	movs	r2, #2
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	fa93 f2a3 	rbit	r2, r3
 8002cbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	fa93 f2a3 	rbit	r2, r3
 8002cd4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cd8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cda:	4b6f      	ldr	r3, [pc, #444]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cde:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	6019      	str	r1, [r3, #0]
 8002ce6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	fa93 f1a3 	rbit	r1, r3
 8002cf0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cf4:	6019      	str	r1, [r3, #0]
  return result;
 8002cf6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1b2      	bne.n	8002c7e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 8158 	beq.w	8002fd8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2e:	4b5a      	ldr	r3, [pc, #360]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d112      	bne.n	8002d60 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	4b57      	ldr	r3, [pc, #348]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4a56      	ldr	r2, [pc, #344]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	61d3      	str	r3, [r2, #28]
 8002d46:	4b54      	ldr	r3, [pc, #336]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d4e:	f107 0308 	add.w	r3, r7, #8
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	f107 0308 	add.w	r3, r7, #8
 8002d58:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	4b4f      	ldr	r3, [pc, #316]	; (8002ea0 <HAL_RCC_OscConfig+0x938>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11a      	bne.n	8002da2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ea0 <HAL_RCC_OscConfig+0x938>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a4b      	ldr	r2, [pc, #300]	; (8002ea0 <HAL_RCC_OscConfig+0x938>)
 8002d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d76:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d78:	f7fd ffd2 	bl	8000d20 <HAL_GetTick>
 8002d7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d80:	e009      	b.n	8002d96 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d82:	f7fd ffcd 	bl	8000d20 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e2e9      	b.n	800336a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d96:	4b42      	ldr	r3, [pc, #264]	; (8002ea0 <HAL_RCC_OscConfig+0x938>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0ef      	beq.n	8002d82 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x852>
 8002dac:	4b3a      	ldr	r3, [pc, #232]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4a39      	ldr	r2, [pc, #228]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6213      	str	r3, [r2, #32]
 8002db8:	e02f      	b.n	8002e1a <HAL_RCC_OscConfig+0x8b2>
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10c      	bne.n	8002dde <HAL_RCC_OscConfig+0x876>
 8002dc4:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	4a33      	ldr	r2, [pc, #204]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002dca:	f023 0301 	bic.w	r3, r3, #1
 8002dce:	6213      	str	r3, [r2, #32]
 8002dd0:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	4a30      	ldr	r2, [pc, #192]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002dd6:	f023 0304 	bic.w	r3, r3, #4
 8002dda:	6213      	str	r3, [r2, #32]
 8002ddc:	e01d      	b.n	8002e1a <HAL_RCC_OscConfig+0x8b2>
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d10c      	bne.n	8002e02 <HAL_RCC_OscConfig+0x89a>
 8002de8:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4a2a      	ldr	r2, [pc, #168]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	6213      	str	r3, [r2, #32]
 8002df4:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6213      	str	r3, [r2, #32]
 8002e00:	e00b      	b.n	8002e1a <HAL_RCC_OscConfig+0x8b2>
 8002e02:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a24      	ldr	r2, [pc, #144]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6213      	str	r3, [r2, #32]
 8002e0e:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d06b      	beq.n	8002efc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e24:	f7fd ff7c 	bl	8000d20 <HAL_GetTick>
 8002e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2c:	e00b      	b.n	8002e46 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7fd ff77 	bl	8000d20 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e291      	b.n	800336a <HAL_RCC_OscConfig+0xe02>
 8002e46:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	fa93 f2a3 	rbit	r2, r3
 8002e58:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e62:	2202      	movs	r2, #2
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	fa93 f2a3 	rbit	r2, r3
 8002e70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e74:	601a      	str	r2, [r3, #0]
  return result;
 8002e76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d109      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x93c>
 8002e90:	4b01      	ldr	r3, [pc, #4]	; (8002e98 <HAL_RCC_OscConfig+0x930>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	e014      	b.n	8002ec0 <HAL_RCC_OscConfig+0x958>
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	10908120 	.word	0x10908120
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	fa93 f2a3 	rbit	r2, r3
 8002eb6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	4bbb      	ldr	r3, [pc, #748]	; (80031ac <HAL_RCC_OscConfig+0xc44>)
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	6011      	str	r1, [r2, #0]
 8002ec8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	fa92 f1a2 	rbit	r1, r2
 8002ed2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002ed6:	6011      	str	r1, [r2, #0]
  return result;
 8002ed8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	fab2 f282 	clz	r2, r2
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	f002 021f 	and.w	r2, r2, #31
 8002eee:	2101      	movs	r1, #1
 8002ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d099      	beq.n	8002e2e <HAL_RCC_OscConfig+0x8c6>
 8002efa:	e063      	b.n	8002fc4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7fd ff10 	bl	8000d20 <HAL_GetTick>
 8002f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f04:	e00b      	b.n	8002f1e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fd ff0b 	bl	8000d20 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e225      	b.n	800336a <HAL_RCC_OscConfig+0xe02>
 8002f1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f22:	2202      	movs	r2, #2
 8002f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	fa93 f2a3 	rbit	r2, r3
 8002f48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f4c:	601a      	str	r2, [r3, #0]
  return result;
 8002f4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f043 0302 	orr.w	r3, r3, #2
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d102      	bne.n	8002f6e <HAL_RCC_OscConfig+0xa06>
 8002f68:	4b90      	ldr	r3, [pc, #576]	; (80031ac <HAL_RCC_OscConfig+0xc44>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	e00d      	b.n	8002f8a <HAL_RCC_OscConfig+0xa22>
 8002f6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f72:	2202      	movs	r2, #2
 8002f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	fa93 f2a3 	rbit	r2, r3
 8002f80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	4b89      	ldr	r3, [pc, #548]	; (80031ac <HAL_RCC_OscConfig+0xc44>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f8e:	2102      	movs	r1, #2
 8002f90:	6011      	str	r1, [r2, #0]
 8002f92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	fa92 f1a2 	rbit	r1, r2
 8002f9c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002fa0:	6011      	str	r1, [r2, #0]
  return result;
 8002fa2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	fab2 f282 	clz	r2, r2
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	f002 021f 	and.w	r2, r2, #31
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1a0      	bne.n	8002f06 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fc4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d105      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fcc:	4b77      	ldr	r3, [pc, #476]	; (80031ac <HAL_RCC_OscConfig+0xc44>)
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	4a76      	ldr	r2, [pc, #472]	; (80031ac <HAL_RCC_OscConfig+0xc44>)
 8002fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd8:	1d3b      	adds	r3, r7, #4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 81c2 	beq.w	8003368 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe4:	4b71      	ldr	r3, [pc, #452]	; (80031ac <HAL_RCC_OscConfig+0xc44>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	f000 819c 	beq.w	800332a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff2:	1d3b      	adds	r3, r7, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	f040 8114 	bne.w	8003226 <HAL_RCC_OscConfig+0xcbe>
 8002ffe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003002:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003008:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	fa93 f2a3 	rbit	r2, r3
 8003012:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003016:	601a      	str	r2, [r3, #0]
  return result;
 8003018:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800301c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003028:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	461a      	mov	r2, r3
 8003030:	2300      	movs	r3, #0
 8003032:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fd fe74 	bl	8000d20 <HAL_GetTick>
 8003038:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303c:	e009      	b.n	8003052 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303e:	f7fd fe6f 	bl	8000d20 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e18b      	b.n	800336a <HAL_RCC_OscConfig+0xe02>
 8003052:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003056:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fa93 f2a3 	rbit	r2, r3
 8003066:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800306a:	601a      	str	r2, [r3, #0]
  return result;
 800306c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003070:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d102      	bne.n	800308c <HAL_RCC_OscConfig+0xb24>
 8003086:	4b49      	ldr	r3, [pc, #292]	; (80031ac <HAL_RCC_OscConfig+0xc44>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	e01b      	b.n	80030c4 <HAL_RCC_OscConfig+0xb5c>
 800308c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f2a3 	rbit	r2, r3
 80030a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	fa93 f2a3 	rbit	r2, r3
 80030ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	4b3a      	ldr	r3, [pc, #232]	; (80031ac <HAL_RCC_OscConfig+0xc44>)
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030cc:	6011      	str	r1, [r2, #0]
 80030ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	fa92 f1a2 	rbit	r1, r2
 80030d8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80030dc:	6011      	str	r1, [r2, #0]
  return result;
 80030de:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	fab2 f282 	clz	r2, r2
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f042 0220 	orr.w	r2, r2, #32
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	f002 021f 	and.w	r2, r2, #31
 80030f4:	2101      	movs	r1, #1
 80030f6:	fa01 f202 	lsl.w	r2, r1, r2
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d19e      	bne.n	800303e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003100:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <HAL_RCC_OscConfig+0xc44>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003108:	1d3b      	adds	r3, r7, #4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	430b      	orrs	r3, r1
 8003116:	4925      	ldr	r1, [pc, #148]	; (80031ac <HAL_RCC_OscConfig+0xc44>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
 800311c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003120:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	fa93 f2a3 	rbit	r2, r3
 8003130:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003134:	601a      	str	r2, [r3, #0]
  return result;
 8003136:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800313a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003146:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	461a      	mov	r2, r3
 800314e:	2301      	movs	r3, #1
 8003150:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7fd fde5 	bl	8000d20 <HAL_GetTick>
 8003156:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800315a:	e009      	b.n	8003170 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315c:	f7fd fde0 	bl	8000d20 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e0fc      	b.n	800336a <HAL_RCC_OscConfig+0xe02>
 8003170:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003174:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003178:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	fa93 f2a3 	rbit	r2, r3
 8003184:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003188:	601a      	str	r2, [r3, #0]
  return result;
 800318a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800318e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003190:	fab3 f383 	clz	r3, r3
 8003194:	b2db      	uxtb	r3, r3
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	b2db      	uxtb	r3, r3
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d105      	bne.n	80031b0 <HAL_RCC_OscConfig+0xc48>
 80031a4:	4b01      	ldr	r3, [pc, #4]	; (80031ac <HAL_RCC_OscConfig+0xc44>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	e01e      	b.n	80031e8 <HAL_RCC_OscConfig+0xc80>
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
 80031b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	fa93 f2a3 	rbit	r2, r3
 80031c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	fa93 f2a3 	rbit	r2, r3
 80031de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	4b63      	ldr	r3, [pc, #396]	; (8003374 <HAL_RCC_OscConfig+0xe0c>)
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031f0:	6011      	str	r1, [r2, #0]
 80031f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	fa92 f1a2 	rbit	r1, r2
 80031fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003200:	6011      	str	r1, [r2, #0]
  return result;
 8003202:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	fab2 f282 	clz	r2, r2
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	f042 0220 	orr.w	r2, r2, #32
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	f002 021f 	and.w	r2, r2, #31
 8003218:	2101      	movs	r1, #1
 800321a:	fa01 f202 	lsl.w	r2, r1, r2
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d09b      	beq.n	800315c <HAL_RCC_OscConfig+0xbf4>
 8003224:	e0a0      	b.n	8003368 <HAL_RCC_OscConfig+0xe00>
 8003226:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800322a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800322e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	fa93 f2a3 	rbit	r2, r3
 800323a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800323e:	601a      	str	r2, [r3, #0]
  return result;
 8003240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003244:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003250:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	461a      	mov	r2, r3
 8003258:	2300      	movs	r3, #0
 800325a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fd fd60 	bl	8000d20 <HAL_GetTick>
 8003260:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003264:	e009      	b.n	800327a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003266:	f7fd fd5b 	bl	8000d20 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e077      	b.n	800336a <HAL_RCC_OscConfig+0xe02>
 800327a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800327e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003292:	601a      	str	r2, [r3, #0]
  return result;
 8003294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003298:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d102      	bne.n	80032b4 <HAL_RCC_OscConfig+0xd4c>
 80032ae:	4b31      	ldr	r3, [pc, #196]	; (8003374 <HAL_RCC_OscConfig+0xe0c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	e01b      	b.n	80032ec <HAL_RCC_OscConfig+0xd84>
 80032b4:	f107 0320 	add.w	r3, r7, #32
 80032b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	f107 0320 	add.w	r3, r7, #32
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	fa93 f2a3 	rbit	r2, r3
 80032c8:	f107 031c 	add.w	r3, r7, #28
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f107 0318 	add.w	r3, r7, #24
 80032d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	f107 0318 	add.w	r3, r7, #24
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	fa93 f2a3 	rbit	r2, r3
 80032e2:	f107 0314 	add.w	r3, r7, #20
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_RCC_OscConfig+0xe0c>)
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f107 0210 	add.w	r2, r7, #16
 80032f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032f4:	6011      	str	r1, [r2, #0]
 80032f6:	f107 0210 	add.w	r2, r7, #16
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	fa92 f1a2 	rbit	r1, r2
 8003300:	f107 020c 	add.w	r2, r7, #12
 8003304:	6011      	str	r1, [r2, #0]
  return result;
 8003306:	f107 020c 	add.w	r2, r7, #12
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	fab2 f282 	clz	r2, r2
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f042 0220 	orr.w	r2, r2, #32
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	f002 021f 	and.w	r2, r2, #31
 800331c:	2101      	movs	r1, #1
 800331e:	fa01 f202 	lsl.w	r2, r1, r2
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d19e      	bne.n	8003266 <HAL_RCC_OscConfig+0xcfe>
 8003328:	e01e      	b.n	8003368 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e018      	b.n	800336a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003338:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_RCC_OscConfig+0xe0c>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003340:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003344:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	429a      	cmp	r2, r3
 8003350:	d108      	bne.n	8003364 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003352:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003356:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000

08003378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b09e      	sub	sp, #120	; 0x78
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e162      	b.n	8003656 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003390:	4b90      	ldr	r3, [pc, #576]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d910      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b8d      	ldr	r3, [pc, #564]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 0207 	bic.w	r2, r3, #7
 80033a6:	498b      	ldr	r1, [pc, #556]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b89      	ldr	r3, [pc, #548]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e14a      	b.n	8003656 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033cc:	4b82      	ldr	r3, [pc, #520]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	497f      	ldr	r1, [pc, #508]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80dc 	beq.w	80035a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d13c      	bne.n	800346e <HAL_RCC_ClockConfig+0xf6>
 80033f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	b2db      	uxtb	r3, r3
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d102      	bne.n	800341e <HAL_RCC_ClockConfig+0xa6>
 8003418:	4b6f      	ldr	r3, [pc, #444]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	e00f      	b.n	800343e <HAL_RCC_ClockConfig+0xc6>
 800341e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003422:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	667b      	str	r3, [r7, #100]	; 0x64
 800342c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003430:	663b      	str	r3, [r7, #96]	; 0x60
 8003432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	65fb      	str	r3, [r7, #92]	; 0x5c
 800343a:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003442:	65ba      	str	r2, [r7, #88]	; 0x58
 8003444:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003446:	fa92 f2a2 	rbit	r2, r2
 800344a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800344c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800344e:	fab2 f282 	clz	r2, r2
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	f042 0220 	orr.w	r2, r2, #32
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	f002 021f 	and.w	r2, r2, #31
 800345e:	2101      	movs	r1, #1
 8003460:	fa01 f202 	lsl.w	r2, r1, r2
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d17b      	bne.n	8003562 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0f3      	b.n	8003656 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d13c      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x178>
 8003476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800347a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d102      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x128>
 800349a:	4b4f      	ldr	r3, [pc, #316]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	e00f      	b.n	80034c0 <HAL_RCC_ClockConfig+0x148>
 80034a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	647b      	str	r3, [r7, #68]	; 0x44
 80034ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034b2:	643b      	str	r3, [r7, #64]	; 0x40
 80034b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034bc:	4b46      	ldr	r3, [pc, #280]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80034c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034c8:	fa92 f2a2 	rbit	r2, r2
 80034cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80034ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034d0:	fab2 f282 	clz	r2, r2
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	f042 0220 	orr.w	r2, r2, #32
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	f002 021f 	and.w	r2, r2, #31
 80034e0:	2101      	movs	r1, #1
 80034e2:	fa01 f202 	lsl.w	r2, r1, r2
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d13a      	bne.n	8003562 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0b2      	b.n	8003656 <HAL_RCC_ClockConfig+0x2de>
 80034f0:	2302      	movs	r3, #2
 80034f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fe:	fab3 f383 	clz	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	d102      	bne.n	8003518 <HAL_RCC_ClockConfig+0x1a0>
 8003512:	4b31      	ldr	r3, [pc, #196]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	e00d      	b.n	8003534 <HAL_RCC_ClockConfig+0x1bc>
 8003518:	2302      	movs	r3, #2
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
 8003524:	2302      	movs	r3, #2
 8003526:	623b      	str	r3, [r7, #32]
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	2202      	movs	r2, #2
 8003536:	61ba      	str	r2, [r7, #24]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	fa92 f2a2 	rbit	r2, r2
 800353e:	617a      	str	r2, [r7, #20]
  return result;
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	fab2 f282 	clz	r2, r2
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	f042 0220 	orr.w	r2, r2, #32
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	f002 021f 	and.w	r2, r2, #31
 8003552:	2101      	movs	r1, #1
 8003554:	fa01 f202 	lsl.w	r2, r1, r2
 8003558:	4013      	ands	r3, r2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e079      	b.n	8003656 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003562:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f023 0203 	bic.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	491a      	ldr	r1, [pc, #104]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003574:	f7fd fbd4 	bl	8000d20 <HAL_GetTick>
 8003578:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	e00a      	b.n	8003592 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7fd fbd0 	bl	8000d20 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e061      	b.n	8003656 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 020c 	and.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d1eb      	bne.n	800357c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d214      	bcs.n	80035dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 0207 	bic.w	r2, r3, #7
 80035ba:	4906      	ldr	r1, [pc, #24]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e040      	b.n	8003656 <HAL_RCC_ClockConfig+0x2de>
 80035d4:	40022000 	.word	0x40022000
 80035d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <HAL_RCC_ClockConfig+0x2e8>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	491a      	ldr	r1, [pc, #104]	; (8003660 <HAL_RCC_ClockConfig+0x2e8>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003606:	4b16      	ldr	r3, [pc, #88]	; (8003660 <HAL_RCC_ClockConfig+0x2e8>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4912      	ldr	r1, [pc, #72]	; (8003660 <HAL_RCC_ClockConfig+0x2e8>)
 8003616:	4313      	orrs	r3, r2
 8003618:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800361a:	f000 f829 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 800361e:	4601      	mov	r1, r0
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <HAL_RCC_ClockConfig+0x2e8>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003628:	22f0      	movs	r2, #240	; 0xf0
 800362a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	fa92 f2a2 	rbit	r2, r2
 8003632:	60fa      	str	r2, [r7, #12]
  return result;
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	fab2 f282 	clz	r2, r2
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	40d3      	lsrs	r3, r2
 800363e:	4a09      	ldr	r2, [pc, #36]	; (8003664 <HAL_RCC_ClockConfig+0x2ec>)
 8003640:	5cd3      	ldrb	r3, [r2, r3]
 8003642:	fa21 f303 	lsr.w	r3, r1, r3
 8003646:	4a08      	ldr	r2, [pc, #32]	; (8003668 <HAL_RCC_ClockConfig+0x2f0>)
 8003648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800364a:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_RCC_ClockConfig+0x2f4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fd fb22 	bl	8000c98 <HAL_InitTick>
  
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3778      	adds	r7, #120	; 0x78
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
 8003664:	08004508 	.word	0x08004508
 8003668:	20000010 	.word	0x20000010
 800366c:	20000014 	.word	0x20000014

08003670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	b08b      	sub	sp, #44	; 0x2c
 8003674:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	2300      	movs	r3, #0
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800368a:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_RCC_GetSysClockFreq+0xc0>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b04      	cmp	r3, #4
 8003698:	d002      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x30>
 800369a:	2b08      	cmp	r3, #8
 800369c:	d003      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0x36>
 800369e:	e03c      	b.n	800371a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036a2:	623b      	str	r3, [r7, #32]
      break;
 80036a4:	e03c      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	fa92 f2a2 	rbit	r2, r2
 80036b8:	607a      	str	r2, [r7, #4]
  return result;
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	fab2 f282 	clz	r2, r2
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	40d3      	lsrs	r3, r2
 80036c4:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036c6:	5cd3      	ldrb	r3, [r2, r3]
 80036c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036ca:	4b19      	ldr	r3, [pc, #100]	; (8003730 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	220f      	movs	r2, #15
 80036d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	fa92 f2a2 	rbit	r2, r2
 80036dc:	60fa      	str	r2, [r7, #12]
  return result;
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	fab2 f282 	clz	r2, r2
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	40d3      	lsrs	r3, r2
 80036e8:	4a14      	ldr	r2, [pc, #80]	; (800373c <HAL_RCC_GetSysClockFreq+0xcc>)
 80036ea:	5cd3      	ldrb	r3, [r2, r3]
 80036ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036f8:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fb02 f303 	mul.w	r3, r2, r3
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
 8003708:	e004      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	4a0c      	ldr	r2, [pc, #48]	; (8003740 <HAL_RCC_GetSysClockFreq+0xd0>)
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	623b      	str	r3, [r7, #32]
      break;
 8003718:	e002      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_RCC_GetSysClockFreq+0xc4>)
 800371c:	623b      	str	r3, [r7, #32]
      break;
 800371e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003720:	6a3b      	ldr	r3, [r7, #32]
}
 8003722:	4618      	mov	r0, r3
 8003724:	372c      	adds	r7, #44	; 0x2c
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000
 8003734:	007a1200 	.word	0x007a1200
 8003738:	08004520 	.word	0x08004520
 800373c:	08004530 	.word	0x08004530
 8003740:	003d0900 	.word	0x003d0900

08003744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003748:	4b03      	ldr	r3, [pc, #12]	; (8003758 <HAL_RCC_GetHCLKFreq+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000010 	.word	0x20000010

0800375c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003762:	f7ff ffef 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003766:	4601      	mov	r1, r0
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003770:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003774:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	fa92 f2a2 	rbit	r2, r2
 800377c:	603a      	str	r2, [r7, #0]
  return result;
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	fab2 f282 	clz	r2, r2
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	40d3      	lsrs	r3, r2
 8003788:	4a04      	ldr	r2, [pc, #16]	; (800379c <HAL_RCC_GetPCLK1Freq+0x40>)
 800378a:	5cd3      	ldrb	r3, [r2, r3]
 800378c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000
 800379c:	08004518 	.word	0x08004518

080037a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037a6:	f7ff ffcd 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 80037aa:	4601      	mov	r1, r0
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80037b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80037b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	fa92 f2a2 	rbit	r2, r2
 80037c0:	603a      	str	r2, [r7, #0]
  return result;
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	fab2 f282 	clz	r2, r2
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	40d3      	lsrs	r3, r2
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80037ce:	5cd3      	ldrb	r3, [r2, r3]
 80037d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	08004518 	.word	0x08004518

080037e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b092      	sub	sp, #72	; 0x48
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80d7 	beq.w	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003808:	4b4e      	ldr	r3, [pc, #312]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10e      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003814:	4b4b      	ldr	r3, [pc, #300]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	4a4a      	ldr	r2, [pc, #296]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381e:	61d3      	str	r3, [r2, #28]
 8003820:	4b48      	ldr	r3, [pc, #288]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003832:	4b45      	ldr	r3, [pc, #276]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d118      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383e:	4b42      	ldr	r3, [pc, #264]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a41      	ldr	r2, [pc, #260]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003848:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384a:	f7fd fa69 	bl	8000d20 <HAL_GetTick>
 800384e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	e008      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003852:	f7fd fa65 	bl	8000d20 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b64      	cmp	r3, #100	; 0x64
 800385e:	d901      	bls.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e169      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	4b38      	ldr	r3, [pc, #224]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003870:	4b34      	ldr	r3, [pc, #208]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003878:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800387a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8084 	beq.w	800398a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800388c:	429a      	cmp	r2, r3
 800388e:	d07c      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003890:	4b2c      	ldr	r3, [pc, #176]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800389e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b26      	ldr	r3, [pc, #152]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	461a      	mov	r2, r3
 80038ba:	2301      	movs	r3, #1
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b1d      	ldr	r3, [pc, #116]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	461a      	mov	r2, r3
 80038de:	2300      	movs	r3, #0
 80038e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038e2:	4a18      	ldr	r2, [pc, #96]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d04b      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7fd fa15 	bl	8000d20 <HAL_GetTick>
 80038f6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f8:	e00a      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fd fa11 	bl	8000d20 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e113      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003910:	2302      	movs	r3, #2
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	2302      	movs	r3, #2
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	61fb      	str	r3, [r7, #28]
  return result;
 8003928:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d108      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800393e:	4b01      	ldr	r3, [pc, #4]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	e00d      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003944:	40021000 	.word	0x40021000
 8003948:	40007000 	.word	0x40007000
 800394c:	10908100 	.word	0x10908100
 8003950:	2302      	movs	r3, #2
 8003952:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	4b78      	ldr	r3, [pc, #480]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	2202      	movs	r2, #2
 8003962:	613a      	str	r2, [r7, #16]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	fa92 f2a2 	rbit	r2, r2
 800396a:	60fa      	str	r2, [r7, #12]
  return result;
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	fab2 f282 	clz	r2, r2
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	f002 021f 	and.w	r2, r2, #31
 800397e:	2101      	movs	r1, #1
 8003980:	fa01 f202 	lsl.w	r2, r1, r2
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0b7      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800398a:	4b6d      	ldr	r3, [pc, #436]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	496a      	ldr	r1, [pc, #424]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003998:	4313      	orrs	r3, r2
 800399a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800399c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d105      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a4:	4b66      	ldr	r3, [pc, #408]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	4a65      	ldr	r2, [pc, #404]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039bc:	4b60      	ldr	r3, [pc, #384]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	f023 0203 	bic.w	r2, r3, #3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	495d      	ldr	r1, [pc, #372]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039da:	4b59      	ldr	r3, [pc, #356]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	4956      	ldr	r1, [pc, #344]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039f8:	4b51      	ldr	r3, [pc, #324]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	494e      	ldr	r1, [pc, #312]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a16:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	f023 0210 	bic.w	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	4947      	ldr	r1, [pc, #284]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a34:	4b42      	ldr	r3, [pc, #264]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	493f      	ldr	r1, [pc, #252]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a52:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	f023 0220 	bic.w	r2, r3, #32
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	4938      	ldr	r1, [pc, #224]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a70:	4b33      	ldr	r3, [pc, #204]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	4930      	ldr	r1, [pc, #192]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a8e:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	4929      	ldr	r1, [pc, #164]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003aac:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	4921      	ldr	r1, [pc, #132]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003aca:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	491a      	ldr	r1, [pc, #104]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003ae8:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	4912      	ldr	r1, [pc, #72]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b06:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	490b      	ldr	r1, [pc, #44]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	4903      	ldr	r1, [pc, #12]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3748      	adds	r7, #72	; 0x48
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000

08003b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e040      	b.n	8003bd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fc ffd0 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f888 	bl	8003c98 <UART_SetConfig>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e022      	b.n	8003bd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fa96 	bl	80040cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fb1d 	bl	8004210 <UART_CheckIdleState>
 8003bd6:	4603      	mov	r3, r0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d144      	bne.n	8003c80 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_UART_Transmit_IT+0x22>
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e03d      	b.n	8003c82 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_UART_Transmit_IT+0x34>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e036      	b.n	8003c82 <HAL_UART_Transmit_IT+0xa2>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	88fa      	ldrh	r2, [r7, #6]
 8003c2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2221      	movs	r2, #33	; 0x21
 8003c42:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4c:	d107      	bne.n	8003c5e <HAL_UART_Transmit_IT+0x7e>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d103      	bne.n	8003c5e <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <HAL_UART_Transmit_IT+0xb0>)
 8003c5a:	665a      	str	r2, [r3, #100]	; 0x64
 8003c5c:	e002      	b.n	8003c64 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4a0c      	ldr	r2, [pc, #48]	; (8003c94 <HAL_UART_Transmit_IT+0xb4>)
 8003c62:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c7a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e000      	b.n	8003c82 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8003c80:	2302      	movs	r3, #2
  }
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	08004405 	.word	0x08004405
 8003c94:	08004391 	.word	0x08004391

08003c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003cca:	f023 030c 	bic.w	r3, r3, #12
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	6939      	ldr	r1, [r7, #16]
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4aa9      	ldr	r2, [pc, #676]	; (8003fbc <UART_SetConfig+0x324>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d121      	bne.n	8003d60 <UART_SetConfig+0xc8>
 8003d1c:	4ba8      	ldr	r3, [pc, #672]	; (8003fc0 <UART_SetConfig+0x328>)
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d817      	bhi.n	8003d58 <UART_SetConfig+0xc0>
 8003d28:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <UART_SetConfig+0x98>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d41 	.word	0x08003d41
 8003d34:	08003d4d 	.word	0x08003d4d
 8003d38:	08003d53 	.word	0x08003d53
 8003d3c:	08003d47 	.word	0x08003d47
 8003d40:	2301      	movs	r3, #1
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e0b2      	b.n	8003eac <UART_SetConfig+0x214>
 8003d46:	2302      	movs	r3, #2
 8003d48:	77fb      	strb	r3, [r7, #31]
 8003d4a:	e0af      	b.n	8003eac <UART_SetConfig+0x214>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e0ac      	b.n	8003eac <UART_SetConfig+0x214>
 8003d52:	2308      	movs	r3, #8
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e0a9      	b.n	8003eac <UART_SetConfig+0x214>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	bf00      	nop
 8003d5e:	e0a5      	b.n	8003eac <UART_SetConfig+0x214>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a97      	ldr	r2, [pc, #604]	; (8003fc4 <UART_SetConfig+0x32c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d123      	bne.n	8003db2 <UART_SetConfig+0x11a>
 8003d6a:	4b95      	ldr	r3, [pc, #596]	; (8003fc0 <UART_SetConfig+0x328>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d76:	d012      	beq.n	8003d9e <UART_SetConfig+0x106>
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d802      	bhi.n	8003d84 <UART_SetConfig+0xec>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <UART_SetConfig+0xfa>
 8003d82:	e012      	b.n	8003daa <UART_SetConfig+0x112>
 8003d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d88:	d00c      	beq.n	8003da4 <UART_SetConfig+0x10c>
 8003d8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d8e:	d003      	beq.n	8003d98 <UART_SetConfig+0x100>
 8003d90:	e00b      	b.n	8003daa <UART_SetConfig+0x112>
 8003d92:	2300      	movs	r3, #0
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e089      	b.n	8003eac <UART_SetConfig+0x214>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e086      	b.n	8003eac <UART_SetConfig+0x214>
 8003d9e:	2304      	movs	r3, #4
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e083      	b.n	8003eac <UART_SetConfig+0x214>
 8003da4:	2308      	movs	r3, #8
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e080      	b.n	8003eac <UART_SetConfig+0x214>
 8003daa:	2310      	movs	r3, #16
 8003dac:	77fb      	strb	r3, [r7, #31]
 8003dae:	bf00      	nop
 8003db0:	e07c      	b.n	8003eac <UART_SetConfig+0x214>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a84      	ldr	r2, [pc, #528]	; (8003fc8 <UART_SetConfig+0x330>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d123      	bne.n	8003e04 <UART_SetConfig+0x16c>
 8003dbc:	4b80      	ldr	r3, [pc, #512]	; (8003fc0 <UART_SetConfig+0x328>)
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dc8:	d012      	beq.n	8003df0 <UART_SetConfig+0x158>
 8003dca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dce:	d802      	bhi.n	8003dd6 <UART_SetConfig+0x13e>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <UART_SetConfig+0x14c>
 8003dd4:	e012      	b.n	8003dfc <UART_SetConfig+0x164>
 8003dd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dda:	d00c      	beq.n	8003df6 <UART_SetConfig+0x15e>
 8003ddc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003de0:	d003      	beq.n	8003dea <UART_SetConfig+0x152>
 8003de2:	e00b      	b.n	8003dfc <UART_SetConfig+0x164>
 8003de4:	2300      	movs	r3, #0
 8003de6:	77fb      	strb	r3, [r7, #31]
 8003de8:	e060      	b.n	8003eac <UART_SetConfig+0x214>
 8003dea:	2302      	movs	r3, #2
 8003dec:	77fb      	strb	r3, [r7, #31]
 8003dee:	e05d      	b.n	8003eac <UART_SetConfig+0x214>
 8003df0:	2304      	movs	r3, #4
 8003df2:	77fb      	strb	r3, [r7, #31]
 8003df4:	e05a      	b.n	8003eac <UART_SetConfig+0x214>
 8003df6:	2308      	movs	r3, #8
 8003df8:	77fb      	strb	r3, [r7, #31]
 8003dfa:	e057      	b.n	8003eac <UART_SetConfig+0x214>
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	bf00      	nop
 8003e02:	e053      	b.n	8003eac <UART_SetConfig+0x214>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a70      	ldr	r2, [pc, #448]	; (8003fcc <UART_SetConfig+0x334>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d123      	bne.n	8003e56 <UART_SetConfig+0x1be>
 8003e0e:	4b6c      	ldr	r3, [pc, #432]	; (8003fc0 <UART_SetConfig+0x328>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1a:	d012      	beq.n	8003e42 <UART_SetConfig+0x1aa>
 8003e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e20:	d802      	bhi.n	8003e28 <UART_SetConfig+0x190>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <UART_SetConfig+0x19e>
 8003e26:	e012      	b.n	8003e4e <UART_SetConfig+0x1b6>
 8003e28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e2c:	d00c      	beq.n	8003e48 <UART_SetConfig+0x1b0>
 8003e2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e32:	d003      	beq.n	8003e3c <UART_SetConfig+0x1a4>
 8003e34:	e00b      	b.n	8003e4e <UART_SetConfig+0x1b6>
 8003e36:	2300      	movs	r3, #0
 8003e38:	77fb      	strb	r3, [r7, #31]
 8003e3a:	e037      	b.n	8003eac <UART_SetConfig+0x214>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	77fb      	strb	r3, [r7, #31]
 8003e40:	e034      	b.n	8003eac <UART_SetConfig+0x214>
 8003e42:	2304      	movs	r3, #4
 8003e44:	77fb      	strb	r3, [r7, #31]
 8003e46:	e031      	b.n	8003eac <UART_SetConfig+0x214>
 8003e48:	2308      	movs	r3, #8
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e02e      	b.n	8003eac <UART_SetConfig+0x214>
 8003e4e:	2310      	movs	r3, #16
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	bf00      	nop
 8003e54:	e02a      	b.n	8003eac <UART_SetConfig+0x214>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a5d      	ldr	r2, [pc, #372]	; (8003fd0 <UART_SetConfig+0x338>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d123      	bne.n	8003ea8 <UART_SetConfig+0x210>
 8003e60:	4b57      	ldr	r3, [pc, #348]	; (8003fc0 <UART_SetConfig+0x328>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e6c:	d012      	beq.n	8003e94 <UART_SetConfig+0x1fc>
 8003e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e72:	d802      	bhi.n	8003e7a <UART_SetConfig+0x1e2>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <UART_SetConfig+0x1f0>
 8003e78:	e012      	b.n	8003ea0 <UART_SetConfig+0x208>
 8003e7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e7e:	d00c      	beq.n	8003e9a <UART_SetConfig+0x202>
 8003e80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e84:	d003      	beq.n	8003e8e <UART_SetConfig+0x1f6>
 8003e86:	e00b      	b.n	8003ea0 <UART_SetConfig+0x208>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	77fb      	strb	r3, [r7, #31]
 8003e8c:	e00e      	b.n	8003eac <UART_SetConfig+0x214>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	77fb      	strb	r3, [r7, #31]
 8003e92:	e00b      	b.n	8003eac <UART_SetConfig+0x214>
 8003e94:	2304      	movs	r3, #4
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e008      	b.n	8003eac <UART_SetConfig+0x214>
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e005      	b.n	8003eac <UART_SetConfig+0x214>
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	bf00      	nop
 8003ea6:	e001      	b.n	8003eac <UART_SetConfig+0x214>
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb4:	f040 808e 	bne.w	8003fd4 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003eb8:	7ffb      	ldrb	r3, [r7, #31]
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d85e      	bhi.n	8003f7c <UART_SetConfig+0x2e4>
 8003ebe:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <UART_SetConfig+0x22c>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003f09 	.word	0x08003f09
 8003ecc:	08003f29 	.word	0x08003f29
 8003ed0:	08003f7d 	.word	0x08003f7d
 8003ed4:	08003f45 	.word	0x08003f45
 8003ed8:	08003f7d 	.word	0x08003f7d
 8003edc:	08003f7d 	.word	0x08003f7d
 8003ee0:	08003f7d 	.word	0x08003f7d
 8003ee4:	08003f65 	.word	0x08003f65
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee8:	f7ff fc38 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8003eec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	005a      	lsls	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	441a      	add	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	61bb      	str	r3, [r7, #24]
        break;
 8003f06:	e03c      	b.n	8003f82 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f08:	f7ff fc4a 	bl	80037a0 <HAL_RCC_GetPCLK2Freq>
 8003f0c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	005a      	lsls	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	441a      	add	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	61bb      	str	r3, [r7, #24]
        break;
 8003f26:	e02c      	b.n	8003f82 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003f32:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6852      	ldr	r2, [r2, #4]
 8003f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	61bb      	str	r3, [r7, #24]
        break;
 8003f42:	e01e      	b.n	8003f82 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f44:	f7ff fb94 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 8003f48:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	005a      	lsls	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	441a      	add	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	61bb      	str	r3, [r7, #24]
        break;
 8003f62:	e00e      	b.n	8003f82 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	61bb      	str	r3, [r7, #24]
        break;
 8003f7a:	e002      	b.n	8003f82 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
        break;
 8003f80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b0f      	cmp	r3, #15
 8003f86:	d916      	bls.n	8003fb6 <UART_SetConfig+0x31e>
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8e:	d212      	bcs.n	8003fb6 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f023 030f 	bic.w	r3, r3, #15
 8003f98:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	897b      	ldrh	r3, [r7, #10]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	897a      	ldrh	r2, [r7, #10]
 8003fb2:	60da      	str	r2, [r3, #12]
 8003fb4:	e07e      	b.n	80040b4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	75fb      	strb	r3, [r7, #23]
 8003fba:	e07b      	b.n	80040b4 <UART_SetConfig+0x41c>
 8003fbc:	40013800 	.word	0x40013800
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40004400 	.word	0x40004400
 8003fc8:	40004800 	.word	0x40004800
 8003fcc:	40004c00 	.word	0x40004c00
 8003fd0:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8003fd4:	7ffb      	ldrb	r3, [r7, #31]
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d85b      	bhi.n	8004092 <UART_SetConfig+0x3fa>
 8003fda:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <UART_SetConfig+0x348>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	08004023 	.word	0x08004023
 8003fe8:	08004041 	.word	0x08004041
 8003fec:	08004093 	.word	0x08004093
 8003ff0:	0800405d 	.word	0x0800405d
 8003ff4:	08004093 	.word	0x08004093
 8003ff8:	08004093 	.word	0x08004093
 8003ffc:	08004093 	.word	0x08004093
 8004000:	0800407b 	.word	0x0800407b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7ff fbaa 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8004008:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	085a      	lsrs	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	441a      	add	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	b29b      	uxth	r3, r3
 800401e:	61bb      	str	r3, [r7, #24]
        break;
 8004020:	e03a      	b.n	8004098 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004022:	f7ff fbbd 	bl	80037a0 <HAL_RCC_GetPCLK2Freq>
 8004026:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	085a      	lsrs	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	441a      	add	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	fbb2 f3f3 	udiv	r3, r2, r3
 800403a:	b29b      	uxth	r3, r3
 800403c:	61bb      	str	r3, [r7, #24]
        break;
 800403e:	e02b      	b.n	8004098 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800404a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6852      	ldr	r2, [r2, #4]
 8004052:	fbb3 f3f2 	udiv	r3, r3, r2
 8004056:	b29b      	uxth	r3, r3
 8004058:	61bb      	str	r3, [r7, #24]
        break;
 800405a:	e01d      	b.n	8004098 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800405c:	f7ff fb08 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 8004060:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	085a      	lsrs	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	441a      	add	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	b29b      	uxth	r3, r3
 8004076:	61bb      	str	r3, [r7, #24]
        break;
 8004078:	e00e      	b.n	8004098 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	b29b      	uxth	r3, r3
 800408e:	61bb      	str	r3, [r7, #24]
        break;
 8004090:	e002      	b.n	8004098 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	75fb      	strb	r3, [r7, #23]
        break;
 8004096:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b0f      	cmp	r3, #15
 800409c:	d908      	bls.n	80040b0 <UART_SetConfig+0x418>
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a4:	d204      	bcs.n	80040b0 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	e001      	b.n	80040b4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop

080040cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01a      	beq.n	80041e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ca:	d10a      	bne.n	80041e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	605a      	str	r2, [r3, #4]
  }
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af02      	add	r7, sp, #8
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800421e:	f7fc fd7f 	bl	8000d20 <HAL_GetTick>
 8004222:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b08      	cmp	r3, #8
 8004230:	d10e      	bne.n	8004250 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004232:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f82a 	bl	800429a <UART_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e020      	b.n	8004292 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b04      	cmp	r3, #4
 800425c:	d10e      	bne.n	800427c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800425e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f814 	bl	800429a <UART_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e00a      	b.n	8004292 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	603b      	str	r3, [r7, #0]
 80042a6:	4613      	mov	r3, r2
 80042a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042aa:	e05d      	b.n	8004368 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b2:	d059      	beq.n	8004368 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b4:	f7fc fd34 	bl	8000d20 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d302      	bcc.n	80042ca <UART_WaitOnFlagUntilTimeout+0x30>
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d11b      	bne.n	8004302 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e042      	b.n	8004388 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	d02b      	beq.n	8004368 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431e:	d123      	bne.n	8004368 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004328:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004338:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e00f      	b.n	8004388 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4013      	ands	r3, r2
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	429a      	cmp	r2, r3
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	429a      	cmp	r2, r3
 8004384:	d092      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439c:	2b21      	cmp	r3, #33	; 0x21
 800439e:	d12b      	bne.n	80043f8 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d110      	bne.n	80043ce <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043ba:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ca:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80043cc:	e014      	b.n	80043f8 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d2:	781a      	ldrb	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	b292      	uxth	r2, r2
 80043da:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004410:	2b21      	cmp	r3, #33	; 0x21
 8004412:	d12f      	bne.n	8004474 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d110      	bne.n	8004442 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800442e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800443e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004440:	e018      	b.n	8004474 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	881a      	ldrh	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004454:	b292      	uxth	r2, r2
 8004456:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445c:	1c9a      	adds	r2, r3, #2
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <__libc_init_array>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	4e0d      	ldr	r6, [pc, #52]	; (80044b8 <__libc_init_array+0x38>)
 8004484:	4c0d      	ldr	r4, [pc, #52]	; (80044bc <__libc_init_array+0x3c>)
 8004486:	1ba4      	subs	r4, r4, r6
 8004488:	10a4      	asrs	r4, r4, #2
 800448a:	2500      	movs	r5, #0
 800448c:	42a5      	cmp	r5, r4
 800448e:	d109      	bne.n	80044a4 <__libc_init_array+0x24>
 8004490:	4e0b      	ldr	r6, [pc, #44]	; (80044c0 <__libc_init_array+0x40>)
 8004492:	4c0c      	ldr	r4, [pc, #48]	; (80044c4 <__libc_init_array+0x44>)
 8004494:	f000 f820 	bl	80044d8 <_init>
 8004498:	1ba4      	subs	r4, r4, r6
 800449a:	10a4      	asrs	r4, r4, #2
 800449c:	2500      	movs	r5, #0
 800449e:	42a5      	cmp	r5, r4
 80044a0:	d105      	bne.n	80044ae <__libc_init_array+0x2e>
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044a8:	4798      	blx	r3
 80044aa:	3501      	adds	r5, #1
 80044ac:	e7ee      	b.n	800448c <__libc_init_array+0xc>
 80044ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044b2:	4798      	blx	r3
 80044b4:	3501      	adds	r5, #1
 80044b6:	e7f2      	b.n	800449e <__libc_init_array+0x1e>
 80044b8:	08004540 	.word	0x08004540
 80044bc:	08004540 	.word	0x08004540
 80044c0:	08004540 	.word	0x08004540
 80044c4:	08004544 	.word	0x08004544

080044c8 <memset>:
 80044c8:	4402      	add	r2, r0
 80044ca:	4603      	mov	r3, r0
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d100      	bne.n	80044d2 <memset+0xa>
 80044d0:	4770      	bx	lr
 80044d2:	f803 1b01 	strb.w	r1, [r3], #1
 80044d6:	e7f9      	b.n	80044cc <memset+0x4>

080044d8 <_init>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	bf00      	nop
 80044dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044de:	bc08      	pop	{r3}
 80044e0:	469e      	mov	lr, r3
 80044e2:	4770      	bx	lr

080044e4 <_fini>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	bf00      	nop
 80044e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ea:	bc08      	pop	{r3}
 80044ec:	469e      	mov	lr, r3
 80044ee:	4770      	bx	lr
