
AirSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004190  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004358  08004358  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004358  08004358  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004358  08004358  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004358  08004358  00014358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  2000001c  0800437c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800437c  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee72  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fbd  00000000  00000000  0002eebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  00030e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  00031b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a41f  00000000  00000000  00032768  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd8a  00000000  00000000  0004cb87  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a4f4  00000000  00000000  00058911  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f2e05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000360c  00000000  00000000  000f2e80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004300 	.word	0x08004300

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08004300 	.word	0x08004300

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fe8a 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f820 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fa32 	bl	800063c <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f950 	bl	800047c <MX_I2C1_Init>
  MX_SPI1_Init();
 80001dc:	f000 f9ce 	bl	800057c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001e0:	f000 fa0a 	bl	80005f8 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80001e4:	f000 f87c 	bl	80002e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001e8:	f000 f8ea 	bl	80003c0 <MX_ADC2_Init>
  MX_I2C2_Init();
 80001ec:	f000 f986 	bl	80004fc <MX_I2C2_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //GetMeasurements();
	  if(GPIOA->IDR & (1<<0))
 80001f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f4:	691b      	ldr	r3, [r3, #16]
 80001f6:	f003 0301 	and.w	r3, r3, #1
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d003      	beq.n	8000206 <main+0x3e>
	  {
	  Calibrate(1);
 80001fe:	2001      	movs	r0, #1
 8000200:	f000 fbb2 	bl	8000968 <Calibrate>
 8000204:	e7f4      	b.n	80001f0 <main+0x28>
	  } else
	  {
		  Calibrate(0);
 8000206:	2000      	movs	r0, #0
 8000208:	f000 fbae 	bl	8000968 <Calibrate>
		  GetMeasurements();
 800020c:	f000 faf2 	bl	80007f4 <GetMeasurements>
	  if(GPIOA->IDR & (1<<0))
 8000210:	e7ee      	b.n	80001f0 <main+0x28>
	...

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b09e      	sub	sp, #120	; 0x78
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f004 f864 	bl	80042f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	223c      	movs	r2, #60	; 0x3c
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f004 f856 	bl	80042f0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000244:	2303      	movs	r3, #3
 8000246:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000248:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800024c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000256:	2310      	movs	r3, #16
 8000258:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000264:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000268:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fc90 	bl	8002b94 <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800027a:	f000 fa5f 	bl	800073c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000294:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000298:	2101      	movs	r1, #1
 800029a:	4618      	mov	r0, r3
 800029c:	f003 fb82 	bl	80039a4 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002a6:	f000 fa49 	bl	800073c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <SystemClock_Config+0xc8>)
 80002ac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80002b8:	2300      	movs	r3, #0
 80002ba:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002c0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	463b      	mov	r3, r7
 80002c4:	4618      	mov	r0, r3
 80002c6:	f003 fd53 	bl	8003d70 <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80002d0:	f000 fa34 	bl	800073c <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3778      	adds	r7, #120	; 0x78
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	000200e0 	.word	0x000200e0

080002e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08a      	sub	sp, #40	; 0x28
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002e6:	f107 031c 	add.w	r3, r7, #28
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
 8000300:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000302:	4b2e      	ldr	r3, [pc, #184]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000304:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000308:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800030a:	4b2c      	ldr	r3, [pc, #176]	; (80003bc <MX_ADC1_Init+0xdc>)
 800030c:	2200      	movs	r2, #0
 800030e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000310:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000316:	4b29      	ldr	r3, [pc, #164]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800031c:	4b27      	ldr	r3, [pc, #156]	; (80003bc <MX_ADC1_Init+0xdc>)
 800031e:	2200      	movs	r2, #0
 8000320:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000322:	4b26      	ldr	r3, [pc, #152]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032a:	4b24      	ldr	r3, [pc, #144]	; (80003bc <MX_ADC1_Init+0xdc>)
 800032c:	2200      	movs	r2, #0
 800032e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000330:	4b22      	ldr	r3, [pc, #136]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000332:	2201      	movs	r2, #1
 8000334:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000336:	4b21      	ldr	r3, [pc, #132]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_ADC1_Init+0xdc>)
 800033e:	2201      	movs	r2, #1
 8000340:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000342:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000344:	2200      	movs	r2, #0
 8000346:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_ADC1_Init+0xdc>)
 800034c:	2204      	movs	r2, #4
 800034e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000352:	2200      	movs	r2, #0
 8000354:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000358:	2201      	movs	r2, #1
 800035a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800035c:	4817      	ldr	r0, [pc, #92]	; (80003bc <MX_ADC1_Init+0xdc>)
 800035e:	f000 fe49 	bl	8000ff4 <HAL_ADC_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000368:	f000 f9e8 	bl	800073c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800036c:	2300      	movs	r3, #0
 800036e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000370:	f107 031c 	add.w	r3, r7, #28
 8000374:	4619      	mov	r1, r3
 8000376:	4811      	ldr	r0, [pc, #68]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000378:	f001 fd5c 	bl	8001e34 <HAL_ADCEx_MultiModeConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000382:	f000 f9db 	bl	800073c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000386:	2302      	movs	r3, #2
 8000388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800038a:	2301      	movs	r3, #1
 800038c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4619      	mov	r1, r3
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <MX_ADC1_Init+0xdc>)
 80003a4:	f001 fa5a 	bl	800185c <HAL_ADC_ConfigChannel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003ae:	f000 f9c5 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	3728      	adds	r7, #40	; 0x28
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	2000013c 	.word	0x2000013c

080003c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c6:	463b      	mov	r3, r7
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	611a      	str	r2, [r3, #16]
 80003d4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80003d6:	4b27      	ldr	r3, [pc, #156]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003d8:	4a27      	ldr	r2, [pc, #156]	; (8000478 <MX_ADC2_Init+0xb8>)
 80003da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003dc:	4b25      	ldr	r3, [pc, #148]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003e2:	4b24      	ldr	r3, [pc, #144]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003e8:	4b22      	ldr	r3, [pc, #136]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003ee:	4b21      	ldr	r3, [pc, #132]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003f4:	4b1f      	ldr	r3, [pc, #124]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003fc:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000402:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <MX_ADC2_Init+0xb4>)
 8000404:	2201      	movs	r2, #1
 8000406:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000408:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_ADC2_Init+0xb4>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800040e:	4b19      	ldr	r3, [pc, #100]	; (8000474 <MX_ADC2_Init+0xb4>)
 8000410:	2201      	movs	r2, #1
 8000412:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_ADC2_Init+0xb4>)
 8000416:	2200      	movs	r2, #0
 8000418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <MX_ADC2_Init+0xb4>)
 800041e:	2204      	movs	r2, #4
 8000420:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_ADC2_Init+0xb4>)
 8000424:	2200      	movs	r2, #0
 8000426:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <MX_ADC2_Init+0xb4>)
 800042a:	2200      	movs	r2, #0
 800042c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800042e:	4811      	ldr	r0, [pc, #68]	; (8000474 <MX_ADC2_Init+0xb4>)
 8000430:	f000 fde0 	bl	8000ff4 <HAL_ADC_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800043a:	f000 f97f 	bl	800073c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800043e:	2305      	movs	r3, #5
 8000440:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000442:	2301      	movs	r3, #1
 8000444:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800044a:	2300      	movs	r3, #0
 800044c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000456:	463b      	mov	r3, r7
 8000458:	4619      	mov	r1, r3
 800045a:	4806      	ldr	r0, [pc, #24]	; (8000474 <MX_ADC2_Init+0xb4>)
 800045c:	f001 f9fe 	bl	800185c <HAL_ADC_ConfigChannel>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000466:	f000 f969 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	3718      	adds	r7, #24
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000054 	.word	0x20000054
 8000478:	50000100 	.word	0x50000100

0800047c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_I2C1_Init+0x74>)
 8000482:	4a1c      	ldr	r2, [pc, #112]	; (80004f4 <MX_I2C1_Init+0x78>)
 8000484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000486:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <MX_I2C1_Init+0x74>)
 8000488:	4a1b      	ldr	r2, [pc, #108]	; (80004f8 <MX_I2C1_Init+0x7c>)
 800048a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <MX_I2C1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000492:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <MX_I2C1_Init+0x74>)
 8000494:	2201      	movs	r2, #1
 8000496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_I2C1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800049e:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004b6:	480e      	ldr	r0, [pc, #56]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004b8:	f002 f992 	bl	80027e0 <HAL_I2C_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004c2:	f000 f93b 	bl	800073c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004c6:	2100      	movs	r1, #0
 80004c8:	4809      	ldr	r0, [pc, #36]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004ca:	f002 fa18 	bl	80028fe <HAL_I2CEx_ConfigAnalogFilter>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004d4:	f000 f932 	bl	800073c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004d8:	2100      	movs	r1, #0
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004dc:	f002 fa5a 	bl	8002994 <HAL_I2CEx_ConfigDigitalFilter>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004e6:	f000 f929 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200000a4 	.word	0x200000a4
 80004f4:	40005400 	.word	0x40005400
 80004f8:	2000090e 	.word	0x2000090e

080004fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_I2C2_Init+0x74>)
 8000502:	4a1c      	ldr	r2, [pc, #112]	; (8000574 <MX_I2C2_Init+0x78>)
 8000504:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_I2C2_Init+0x74>)
 8000508:	4a1b      	ldr	r2, [pc, #108]	; (8000578 <MX_I2C2_Init+0x7c>)
 800050a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_I2C2_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_I2C2_Init+0x74>)
 8000514:	2201      	movs	r2, #1
 8000516:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_I2C2_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_I2C2_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_I2C2_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_I2C2_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_I2C2_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000536:	480e      	ldr	r0, [pc, #56]	; (8000570 <MX_I2C2_Init+0x74>)
 8000538:	f002 f952 	bl	80027e0 <HAL_I2C_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000542:	f000 f8fb 	bl	800073c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000546:	2100      	movs	r1, #0
 8000548:	4809      	ldr	r0, [pc, #36]	; (8000570 <MX_I2C2_Init+0x74>)
 800054a:	f002 f9d8 	bl	80028fe <HAL_I2CEx_ConfigAnalogFilter>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000554:	f000 f8f2 	bl	800073c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000558:	2100      	movs	r1, #0
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_I2C2_Init+0x74>)
 800055c:	f002 fa1a 	bl	8002994 <HAL_I2CEx_ConfigDigitalFilter>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000566:	f000 f8e9 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200000f0 	.word	0x200000f0
 8000574:	40005800 	.word	0x40005800
 8000578:	2000090e 	.word	0x2000090e

0800057c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_SPI1_Init+0x74>)
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <MX_SPI1_Init+0x78>)
 8000584:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <MX_SPI1_Init+0x74>)
 8000588:	f44f 7282 	mov.w	r2, #260	; 0x104
 800058c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_SPI1_Init+0x74>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_SPI1_Init+0x74>)
 8000596:	f44f 7240 	mov.w	r2, #768	; 0x300
 800059a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_SPI1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005b2:	2208      	movs	r2, #8
 80005b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005ca:	2207      	movs	r2, #7
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005d6:	2208      	movs	r2, #8
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005dc:	f003 fd78 	bl	80040d0 <HAL_SPI_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005e6:	f000 f8a9 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	2000018c 	.word	0x2000018c
 80005f4:	40013000 	.word	0x40013000

080005f8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <MX_USB_PCD_Init+0x40>)
 8000600:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 8000604:	2208      	movs	r2, #8
 8000606:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 800060a:	2202      	movs	r2, #2
 800060c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 8000610:	2202      	movs	r2, #2
 8000612:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 8000622:	f002 fa03 	bl	8002a2c <HAL_PCD_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800062c:	f000 f886 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200001f0 	.word	0x200001f0
 8000638:	40005c00 	.word	0x40005c00

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a36      	ldr	r2, [pc, #216]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <MX_GPIO_Init+0xf4>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a30      	ldr	r2, [pc, #192]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000670:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b28      	ldr	r3, [pc, #160]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <MX_GPIO_Init+0xf4>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a24      	ldr	r2, [pc, #144]	; (8000730 <MX_GPIO_Init+0xf4>)
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	6153      	str	r3, [r2, #20]
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_GPIO_Init+0xf4>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_GPIO_Init+0xf4>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <MX_GPIO_Init+0xf4>)
 80006b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_GPIO_Init+0xf4>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 80006ca:	2200      	movs	r2, #0
 80006cc:	f64f 7108 	movw	r1, #65288	; 0xff08
 80006d0:	4818      	ldr	r0, [pc, #96]	; (8000734 <MX_GPIO_Init+0xf8>)
 80006d2:	f002 f86d 	bl	80027b0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 80006d6:	2337      	movs	r3, #55	; 0x37
 80006d8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_GPIO_Init+0xfc>)
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4812      	ldr	r0, [pc, #72]	; (8000734 <MX_GPIO_Init+0xf8>)
 80006ea:	f001 fee7 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 80006ee:	f64f 7308 	movw	r3, #65288	; 0xff08
 80006f2:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	480b      	ldr	r0, [pc, #44]	; (8000734 <MX_GPIO_Init+0xf8>)
 8000708:	f001 fed8 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070c:	2301      	movs	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000722:	f001 fecb 	bl	80024bc <HAL_GPIO_Init>

}
 8000726:	bf00      	nop
 8000728:	3728      	adds	r7, #40	; 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	48001000 	.word	0x48001000
 8000738:	10120000 	.word	0x10120000

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <DisplayAir>:
static uint16_t CO[4]={LD7_Pin,LD9_Pin,LD5_Pin,LD10_Pin};
static uint32_t ADC_3_INITIAL=0;
static uint32_t ADC_2_INITIAL=0;

void DisplayAir(QualityState State)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	int i=0;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
		for(i=0;i<4;i++)
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	e00b      	b.n	8000778 <DisplayAir+0x2c>
		{
			HAL_GPIO_WritePin(GPIOE,AIR[i],GPIO_PIN_RESET);
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <DisplayAir+0x4c>)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000768:	2200      	movs	r2, #0
 800076a:	4619      	mov	r1, r3
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <DisplayAir+0x50>)
 800076e:	f002 f81f 	bl	80027b0 <HAL_GPIO_WritePin>
		for(i=0;i<4;i++)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3301      	adds	r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b03      	cmp	r3, #3
 800077c:	ddf0      	ble.n	8000760 <DisplayAir+0x14>
		}
	HAL_GPIO_WritePin(GPIOE,AIR[State],GPIO_PIN_SET);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <DisplayAir+0x4c>)
 8000782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000786:	2201      	movs	r2, #1
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <DisplayAir+0x50>)
 800078c:	f002 f810 	bl	80027b0 <HAL_GPIO_WritePin>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000000 	.word	0x20000000
 800079c:	48001000 	.word	0x48001000

080007a0 <DisplayCO>:

void DisplayCO(QualityState State)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	int i=0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
	for(i=0;i<4;i++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e00b      	b.n	80007cc <DisplayCO+0x2c>
	{
		HAL_GPIO_WritePin(GPIOE,CO[i],GPIO_PIN_RESET);
 80007b4:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <DisplayCO+0x4c>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	480b      	ldr	r0, [pc, #44]	; (80007f0 <DisplayCO+0x50>)
 80007c2:	f001 fff5 	bl	80027b0 <HAL_GPIO_WritePin>
	for(i=0;i<4;i++)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3301      	adds	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	ddf0      	ble.n	80007b4 <DisplayCO+0x14>
	}
	HAL_GPIO_WritePin(GPIOE,CO[State],GPIO_PIN_SET);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	4a05      	ldr	r2, [pc, #20]	; (80007ec <DisplayCO+0x4c>)
 80007d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007da:	2201      	movs	r2, #1
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <DisplayCO+0x50>)
 80007e0:	f001 ffe6 	bl	80027b0 <HAL_GPIO_WritePin>
}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000008 	.word	0x20000008
 80007f0:	48001000 	.word	0x48001000

080007f4 <GetMeasurements>:


void GetMeasurements(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	extern ADC_HandleTypeDef hadc1;
	extern ADC_HandleTypeDef hadc2;

	static uint16_t adc_2=0, adc_3=0;
	HAL_ADC_Start(&hadc1);
 80007f8:	4855      	ldr	r0, [pc, #340]	; (8000950 <GetMeasurements+0x15c>)
 80007fa:	f000 fddb 	bl	80013b4 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80007fe:	2164      	movs	r1, #100	; 0x64
 8000800:	4853      	ldr	r0, [pc, #332]	; (8000950 <GetMeasurements+0x15c>)
 8000802:	f000 ff23 	bl	800164c <HAL_ADC_PollForConversion>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d145      	bne.n	8000898 <GetMeasurements+0xa4>
	{
		adc_2=HAL_ADC_GetValue(&hadc1);
 800080c:	4850      	ldr	r0, [pc, #320]	; (8000950 <GetMeasurements+0x15c>)
 800080e:	f001 f817 	bl	8001840 <HAL_ADC_GetValue>
 8000812:	4603      	mov	r3, r0
 8000814:	b29a      	uxth	r2, r3
 8000816:	4b4f      	ldr	r3, [pc, #316]	; (8000954 <GetMeasurements+0x160>)
 8000818:	801a      	strh	r2, [r3, #0]
		if(adc_2>ADC_2_INITIAL+600)DisplayAir(Red);
 800081a:	4b4e      	ldr	r3, [pc, #312]	; (8000954 <GetMeasurements+0x160>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	4b4d      	ldr	r3, [pc, #308]	; (8000958 <GetMeasurements+0x164>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000828:	429a      	cmp	r2, r3
 800082a:	d902      	bls.n	8000832 <GetMeasurements+0x3e>
 800082c:	2003      	movs	r0, #3
 800082e:	f7ff ff8d 	bl	800074c <DisplayAir>
		if(adc_2<ADC_2_INITIAL+400 && adc_2 >ADC_2_INITIAL+300)DisplayAir(Orange);
 8000832:	4b48      	ldr	r3, [pc, #288]	; (8000954 <GetMeasurements+0x160>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	4b47      	ldr	r3, [pc, #284]	; (8000958 <GetMeasurements+0x164>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000840:	429a      	cmp	r2, r3
 8000842:	d20b      	bcs.n	800085c <GetMeasurements+0x68>
 8000844:	4b43      	ldr	r3, [pc, #268]	; (8000954 <GetMeasurements+0x160>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b43      	ldr	r3, [pc, #268]	; (8000958 <GetMeasurements+0x164>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000852:	429a      	cmp	r2, r3
 8000854:	d902      	bls.n	800085c <GetMeasurements+0x68>
 8000856:	2002      	movs	r0, #2
 8000858:	f7ff ff78 	bl	800074c <DisplayAir>
		if(adc_2<ADC_2_INITIAL+300 && adc_2 >ADC_2_INITIAL+100) DisplayAir(Blue);
 800085c:	4b3d      	ldr	r3, [pc, #244]	; (8000954 <GetMeasurements+0x160>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <GetMeasurements+0x164>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800086a:	429a      	cmp	r2, r3
 800086c:	d20a      	bcs.n	8000884 <GetMeasurements+0x90>
 800086e:	4b39      	ldr	r3, [pc, #228]	; (8000954 <GetMeasurements+0x160>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	4b38      	ldr	r3, [pc, #224]	; (8000958 <GetMeasurements+0x164>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3364      	adds	r3, #100	; 0x64
 800087a:	429a      	cmp	r2, r3
 800087c:	d902      	bls.n	8000884 <GetMeasurements+0x90>
 800087e:	2001      	movs	r0, #1
 8000880:	f7ff ff64 	bl	800074c <DisplayAir>
		if(adc_2<=ADC_2_INITIAL) DisplayAir(Green);
 8000884:	4b33      	ldr	r3, [pc, #204]	; (8000954 <GetMeasurements+0x160>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b33      	ldr	r3, [pc, #204]	; (8000958 <GetMeasurements+0x164>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d802      	bhi.n	8000898 <GetMeasurements+0xa4>
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff ff5a 	bl	800074c <DisplayAir>

	}

	HAL_ADC_Start(&hadc2);
 8000898:	4830      	ldr	r0, [pc, #192]	; (800095c <GetMeasurements+0x168>)
 800089a:	f000 fd8b 	bl	80013b4 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK)
 800089e:	2164      	movs	r1, #100	; 0x64
 80008a0:	482e      	ldr	r0, [pc, #184]	; (800095c <GetMeasurements+0x168>)
 80008a2:	f000 fed3 	bl	800164c <HAL_ADC_PollForConversion>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d146      	bne.n	800093a <GetMeasurements+0x146>
		{
	    adc_3=HAL_ADC_GetValue(&hadc2);
 80008ac:	482b      	ldr	r0, [pc, #172]	; (800095c <GetMeasurements+0x168>)
 80008ae:	f000 ffc7 	bl	8001840 <HAL_ADC_GetValue>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <GetMeasurements+0x16c>)
 80008b8:	801a      	strh	r2, [r3, #0]
	    if(adc_3>ADC_3_INITIAL+500)DisplayCO(Red);
 80008ba:	4b29      	ldr	r3, [pc, #164]	; (8000960 <GetMeasurements+0x16c>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <GetMeasurements+0x170>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d902      	bls.n	80008d2 <GetMeasurements+0xde>
 80008cc:	2003      	movs	r0, #3
 80008ce:	f7ff ff67 	bl	80007a0 <DisplayCO>
		if(adc_3<ADC_3_INITIAL+500 && adc_3 > ADC_3_INITIAL+400)DisplayCO(Orange);
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <GetMeasurements+0x16c>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <GetMeasurements+0x170>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d20b      	bcs.n	80008fc <GetMeasurements+0x108>
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <GetMeasurements+0x16c>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <GetMeasurements+0x170>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d902      	bls.n	80008fc <GetMeasurements+0x108>
 80008f6:	2002      	movs	r0, #2
 80008f8:	f7ff ff52 	bl	80007a0 <DisplayCO>
	    if(adc_3<ADC_3_INITIAL+400 && adc_3 > ADC_3_INITIAL+300) DisplayCO(Blue);
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <GetMeasurements+0x16c>)
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <GetMeasurements+0x170>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800090a:	429a      	cmp	r2, r3
 800090c:	d20b      	bcs.n	8000926 <GetMeasurements+0x132>
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <GetMeasurements+0x16c>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <GetMeasurements+0x170>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800091c:	429a      	cmp	r2, r3
 800091e:	d902      	bls.n	8000926 <GetMeasurements+0x132>
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff ff3d 	bl	80007a0 <DisplayCO>
	    if(adc_3<=ADC_3_INITIAL) DisplayCO(Green);
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <GetMeasurements+0x16c>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <GetMeasurements+0x170>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	429a      	cmp	r2, r3
 8000932:	d802      	bhi.n	800093a <GetMeasurements+0x146>
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff33 	bl	80007a0 <DisplayCO>
		}
	HAL_Delay (200);
 800093a:	20c8      	movs	r0, #200	; 0xc8
 800093c:	f000 fb38 	bl	8000fb0 <HAL_Delay>
	HAL_ADC_Stop (&hadc1);
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <GetMeasurements+0x15c>)
 8000942:	f000 fe4d 	bl	80015e0 <HAL_ADC_Stop>
	HAL_ADC_Stop (&hadc2);
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <GetMeasurements+0x168>)
 8000948:	f000 fe4a 	bl	80015e0 <HAL_ADC_Stop>

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000013c 	.word	0x2000013c
 8000954:	20000040 	.word	0x20000040
 8000958:	2000003c 	.word	0x2000003c
 800095c:	20000054 	.word	0x20000054
 8000960:	20000042 	.word	0x20000042
 8000964:	20000038 	.word	0x20000038

08000968 <Calibrate>:

void Calibrate(int val)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	static int i=0;
	static int j=0;
	static int state=0;
	extern ADC_HandleTypeDef hadc1;
	extern ADC_HandleTypeDef hadc2;
	uint16_t Leds[8]={LD4_Pin,LD3_Pin,LD5_Pin,LD7_Pin,LD9_Pin,LD10_Pin,LD8_Pin,LD6_Pin};
 8000970:	4b4c      	ldr	r3, [pc, #304]	; (8000aa4 <Calibrate+0x13c>)
 8000972:	f107 0408 	add.w	r4, r7, #8
 8000976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000978:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(val==1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b01      	cmp	r3, #1
 8000980:	f040 8083 	bne.w	8000a8a <Calibrate+0x122>
	{
if(i<8)
 8000984:	4b48      	ldr	r3, [pc, #288]	; (8000aa8 <Calibrate+0x140>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b07      	cmp	r3, #7
 800098a:	dc4c      	bgt.n	8000a26 <Calibrate+0xbe>
{
	HAL_GPIO_WritePin(GPIOE,Leds[i++],GPIO_PIN_SET);
 800098c:	4b46      	ldr	r3, [pc, #280]	; (8000aa8 <Calibrate+0x140>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	4945      	ldr	r1, [pc, #276]	; (8000aa8 <Calibrate+0x140>)
 8000994:	600a      	str	r2, [r1, #0]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	f107 0218 	add.w	r2, r7, #24
 800099c:	4413      	add	r3, r2
 800099e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80009a2:	2201      	movs	r2, #1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4841      	ldr	r0, [pc, #260]	; (8000aac <Calibrate+0x144>)
 80009a8:	f001 ff02 	bl	80027b0 <HAL_GPIO_WritePin>
	for(j=0;j<10;j++)
 80009ac:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <Calibrate+0x148>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	e033      	b.n	8000a1c <Calibrate+0xb4>
	{
		HAL_ADC_Start(&hadc1);
 80009b4:	483f      	ldr	r0, [pc, #252]	; (8000ab4 <Calibrate+0x14c>)
 80009b6:	f000 fcfd 	bl	80013b4 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80009ba:	2164      	movs	r1, #100	; 0x64
 80009bc:	483d      	ldr	r0, [pc, #244]	; (8000ab4 <Calibrate+0x14c>)
 80009be:	f000 fe45 	bl	800164c <HAL_ADC_PollForConversion>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d108      	bne.n	80009da <Calibrate+0x72>
			{
				ADC_2_INITIAL+=HAL_ADC_GetValue(&hadc1);
 80009c8:	483a      	ldr	r0, [pc, #232]	; (8000ab4 <Calibrate+0x14c>)
 80009ca:	f000 ff39 	bl	8001840 <HAL_ADC_GetValue>
 80009ce:	4602      	mov	r2, r0
 80009d0:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <Calibrate+0x150>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a38      	ldr	r2, [pc, #224]	; (8000ab8 <Calibrate+0x150>)
 80009d8:	6013      	str	r3, [r2, #0]
			}
		HAL_ADC_Start(&hadc2);
 80009da:	4838      	ldr	r0, [pc, #224]	; (8000abc <Calibrate+0x154>)
 80009dc:	f000 fcea 	bl	80013b4 <HAL_ADC_Start>

		if (HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK)
 80009e0:	2164      	movs	r1, #100	; 0x64
 80009e2:	4836      	ldr	r0, [pc, #216]	; (8000abc <Calibrate+0x154>)
 80009e4:	f000 fe32 	bl	800164c <HAL_ADC_PollForConversion>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d108      	bne.n	8000a00 <Calibrate+0x98>
			{
			    ADC_3_INITIAL+=HAL_ADC_GetValue(&hadc2);
 80009ee:	4833      	ldr	r0, [pc, #204]	; (8000abc <Calibrate+0x154>)
 80009f0:	f000 ff26 	bl	8001840 <HAL_ADC_GetValue>
 80009f4:	4602      	mov	r2, r0
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <Calibrate+0x158>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a30      	ldr	r2, [pc, #192]	; (8000ac0 <Calibrate+0x158>)
 80009fe:	6013      	str	r3, [r2, #0]
			}
			HAL_Delay (200);
 8000a00:	20c8      	movs	r0, #200	; 0xc8
 8000a02:	f000 fad5 	bl	8000fb0 <HAL_Delay>
			HAL_ADC_Stop (&hadc1);
 8000a06:	482b      	ldr	r0, [pc, #172]	; (8000ab4 <Calibrate+0x14c>)
 8000a08:	f000 fdea 	bl	80015e0 <HAL_ADC_Stop>
			HAL_ADC_Stop (&hadc2);
 8000a0c:	482b      	ldr	r0, [pc, #172]	; (8000abc <Calibrate+0x154>)
 8000a0e:	f000 fde7 	bl	80015e0 <HAL_ADC_Stop>
	for(j=0;j<10;j++)
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <Calibrate+0x148>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4a25      	ldr	r2, [pc, #148]	; (8000ab0 <Calibrate+0x148>)
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <Calibrate+0x148>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b09      	cmp	r3, #9
 8000a22:	ddc7      	ble.n	80009b4 <Calibrate+0x4c>
}
	}
	}
	} else {state=0; i=0; j=0;}

}
 8000a24:	e03a      	b.n	8000a9c <Calibrate+0x134>
	if(state==0)
 8000a26:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <Calibrate+0x15c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d136      	bne.n	8000a9c <Calibrate+0x134>
	ADC_2_INITIAL/=80;
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <Calibrate+0x150>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a25      	ldr	r2, [pc, #148]	; (8000ac8 <Calibrate+0x160>)
 8000a34:	fba2 2303 	umull	r2, r3, r2, r3
 8000a38:	099b      	lsrs	r3, r3, #6
 8000a3a:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <Calibrate+0x150>)
 8000a3c:	6013      	str	r3, [r2, #0]
	ADC_3_INITIAL/=80;
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <Calibrate+0x158>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a21      	ldr	r2, [pc, #132]	; (8000ac8 <Calibrate+0x160>)
 8000a44:	fba2 2303 	umull	r2, r3, r2, r3
 8000a48:	099b      	lsrs	r3, r3, #6
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <Calibrate+0x158>)
 8000a4c:	6013      	str	r3, [r2, #0]
	state=1;
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <Calibrate+0x15c>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
	for(j=0;j<8;j++){HAL_GPIO_WritePin(GPIOE,Leds[j],GPIO_PIN_RESET);
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <Calibrate+0x148>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	e011      	b.n	8000a80 <Calibrate+0x118>
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <Calibrate+0x148>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	f107 0218 	add.w	r2, r7, #24
 8000a66:	4413      	add	r3, r2
 8000a68:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480e      	ldr	r0, [pc, #56]	; (8000aac <Calibrate+0x144>)
 8000a72:	f001 fe9d 	bl	80027b0 <HAL_GPIO_WritePin>
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <Calibrate+0x148>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <Calibrate+0x148>)
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <Calibrate+0x148>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	dde9      	ble.n	8000a5c <Calibrate+0xf4>
}
 8000a88:	e008      	b.n	8000a9c <Calibrate+0x134>
	} else {state=0; i=0; j=0;}
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <Calibrate+0x15c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <Calibrate+0x140>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <Calibrate+0x148>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	371c      	adds	r7, #28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd90      	pop	{r4, r7, pc}
 8000aa4:	08004318 	.word	0x08004318
 8000aa8:	20000044 	.word	0x20000044
 8000aac:	48001000 	.word	0x48001000
 8000ab0:	20000048 	.word	0x20000048
 8000ab4:	2000013c 	.word	0x2000013c
 8000ab8:	2000003c 	.word	0x2000003c
 8000abc:	20000054 	.word	0x20000054
 8000ac0:	20000038 	.word	0x20000038
 8000ac4:	2000004c 	.word	0x2000004c
 8000ac8:	cccccccd 	.word	0xcccccccd

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_MspInit+0x44>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_MspInit+0x44>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6193      	str	r3, [r2, #24]
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_MspInit+0x44>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x44>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x44>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x44>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b34:	d12e      	bne.n	8000b94 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b36:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <HAL_ADC_MspInit+0xec>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	4a30      	ldr	r2, [pc, #192]	; (8000c00 <HAL_ADC_MspInit+0xec>)
 8000b3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b40:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <HAL_ADC_MspInit+0xec>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d10b      	bne.n	8000b60 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b48:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <HAL_ADC_MspInit+0xf0>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	4a2d      	ldr	r2, [pc, #180]	; (8000c04 <HAL_ADC_MspInit+0xf0>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b52:	6153      	str	r3, [r2, #20]
 8000b54:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <HAL_ADC_MspInit+0xf0>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	61bb      	str	r3, [r7, #24]
 8000b5e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <HAL_ADC_MspInit+0xf0>)
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	4a27      	ldr	r2, [pc, #156]	; (8000c04 <HAL_ADC_MspInit+0xf0>)
 8000b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6a:	6153      	str	r3, [r2, #20]
 8000b6c:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <HAL_ADC_MspInit+0xf0>)
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f001 fc95 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b92:	e031      	b.n	8000bf8 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <HAL_ADC_MspInit+0xf4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d12c      	bne.n	8000bf8 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_ADC_MspInit+0xec>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4a16      	ldr	r2, [pc, #88]	; (8000c00 <HAL_ADC_MspInit+0xec>)
 8000ba6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_ADC_MspInit+0xec>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d10b      	bne.n	8000bc8 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_ADC_MspInit+0xf0>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <HAL_ADC_MspInit+0xf0>)
 8000bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bba:	6153      	str	r3, [r2, #20]
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_ADC_MspInit+0xf0>)
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_ADC_MspInit+0xf0>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <HAL_ADC_MspInit+0xf0>)
 8000bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bd2:	6153      	str	r3, [r2, #20]
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_ADC_MspInit+0xf0>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000be0:	2310      	movs	r3, #16
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <HAL_ADC_MspInit+0xf8>)
 8000bf4:	f001 fc62 	bl	80024bc <HAL_GPIO_Init>
}
 8000bf8:	bf00      	nop
 8000bfa:	3730      	adds	r7, #48	; 0x30
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000050 	.word	0x20000050
 8000c04:	40021000 	.word	0x40021000
 8000c08:	50000100 	.word	0x50000100
 8000c0c:	48000800 	.word	0x48000800

08000c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	; 0x30
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a2f      	ldr	r2, [pc, #188]	; (8000cec <HAL_I2C_MspInit+0xdc>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d128      	bne.n	8000c84 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <HAL_I2C_MspInit+0xe0>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a2e      	ldr	r2, [pc, #184]	; (8000cf0 <HAL_I2C_MspInit+0xe0>)
 8000c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3c:	6153      	str	r3, [r2, #20]
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <HAL_I2C_MspInit+0xe0>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000c4a:	23c0      	movs	r3, #192	; 0xc0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4e:	2312      	movs	r3, #18
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4823      	ldr	r0, [pc, #140]	; (8000cf4 <HAL_I2C_MspInit+0xe4>)
 8000c66:	f001 fc29 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_I2C_MspInit+0xe0>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a20      	ldr	r2, [pc, #128]	; (8000cf0 <HAL_I2C_MspInit+0xe0>)
 8000c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <HAL_I2C_MspInit+0xe0>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c82:	e02e      	b.n	8000ce2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <HAL_I2C_MspInit+0xe8>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d129      	bne.n	8000ce2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_I2C_MspInit+0xe0>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <HAL_I2C_MspInit+0xe0>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	6153      	str	r3, [r2, #20]
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_I2C_MspInit+0xe0>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ca6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	2312      	movs	r3, #18
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f001 fbf9 	bl	80024bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_I2C_MspInit+0xe0>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <HAL_I2C_MspInit+0xe0>)
 8000cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_I2C_MspInit+0xe0>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
}
 8000ce2:	bf00      	nop
 8000ce4:	3730      	adds	r7, #48	; 0x30
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	40005800 	.word	0x40005800

08000cfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_SPI_MspInit+0x7c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d128      	bne.n	8000d70 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_SPI_MspInit+0x80>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <HAL_SPI_MspInit+0x80>)
 8000d24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_SPI_MspInit+0x80>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_SPI_MspInit+0x80>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_SPI_MspInit+0x80>)
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	6153      	str	r3, [r2, #20]
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_SPI_MspInit+0x80>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000d4e:	23e0      	movs	r3, #224	; 0xe0
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6c:	f001 fba6 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40013000 	.word	0x40013000
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <HAL_PCD_MspInit+0x80>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d129      	bne.n	8000df6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <HAL_PCD_MspInit+0x84>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <HAL_PCD_MspInit+0x84>)
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	6153      	str	r3, [r2, #20]
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_PCD_MspInit+0x84>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000dba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000dcc:	230e      	movs	r3, #14
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dda:	f001 fb6f 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_PCD_MspInit+0x84>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_PCD_MspInit+0x84>)
 8000de4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000de8:	61d3      	str	r3, [r2, #28]
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_PCD_MspInit+0x84>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	; 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40005c00 	.word	0x40005c00
 8000e04:	40021000 	.word	0x40021000

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5c:	f000 f888 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <SystemInit+0x28>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <SystemInit+0x28>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SystemInit+0x28>)
 8000e7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e96:	e003      	b.n	8000ea0 <LoopCopyDataInit>

08000e98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e9e:	3104      	adds	r1, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ea0:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ea4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ea6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ea8:	d3f6      	bcc.n	8000e98 <CopyDataInit>
	ldr	r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000eac:	e002      	b.n	8000eb4 <LoopFillZerobss>

08000eae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000eb0:	f842 3b04 	str.w	r3, [r2], #4

08000eb4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <LoopForever+0x16>)
	cmp	r2, r3
 8000eb6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000eb8:	d3f9      	bcc.n	8000eae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eba:	f7ff ffd3 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f003 f9f3 	bl	80042a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec2:	f7ff f981 	bl	80001c8 <main>

08000ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ec8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000ecc:	08004360 	.word	0x08004360
	ldr	r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ed4:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8000ed8:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8000edc:	20000460 	.word	0x20000460

08000ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_Init+0x28>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_Init+0x28>)
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f001 faad 	bl	8002454 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f7ff fde4 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40022000 	.word	0x40022000

08000f10 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fab7 	bl	80024a2 <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f4c:	f001 fa8d 	bl	800246a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000010 	.word	0x20000010
 8000f68:	20000018 	.word	0x20000018
 8000f6c:	20000014 	.word	0x20000014

08000f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000018 	.word	0x20000018
 8000f94:	2000045c 	.word	0x2000045c

08000f98 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2000045c 	.word	0x2000045c

08000fb0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff ffee 	bl	8000f98 <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fc8:	d005      	beq.n	8000fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_Delay+0x40>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ffde 	bl	8000f98 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8f7      	bhi.n	8000fd8 <HAL_Delay+0x28>
  {
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000018 	.word	0x20000018

08000ff4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09a      	sub	sp, #104	; 0x68
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001002:	2300      	movs	r3, #0
 8001004:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e1c9      	b.n	80013a8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	2b00      	cmp	r3, #0
 8001024:	d176      	bne.n	8001114 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d152      	bne.n	80010d4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff fd63 	bl	8000b14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d13b      	bne.n	80010d4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f001 f839 	bl	80020d4 <ADC_Disable>
 8001062:	4603      	mov	r3, r0
 8001064:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	2b00      	cmp	r3, #0
 8001072:	d12f      	bne.n	80010d4 <HAL_ADC_Init+0xe0>
 8001074:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001078:	2b00      	cmp	r3, #0
 800107a:	d12b      	bne.n	80010d4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001084:	f023 0302 	bic.w	r3, r3, #2
 8001088:	f043 0202 	orr.w	r2, r3, #2
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800109e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010ae:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010b0:	4b86      	ldr	r3, [pc, #536]	; (80012cc <HAL_ADC_Init+0x2d8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a86      	ldr	r2, [pc, #536]	; (80012d0 <HAL_ADC_Init+0x2dc>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	0c9a      	lsrs	r2, r3, #18
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010c6:	e002      	b.n	80010ce <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f9      	bne.n	80010c8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010f0:	d110      	bne.n	8001114 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f023 0312 	bic.w	r3, r3, #18
 80010fa:	f043 0210 	orr.w	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	2b00      	cmp	r3, #0
 800111e:	f040 8136 	bne.w	800138e <HAL_ADC_Init+0x39a>
 8001122:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001126:	2b00      	cmp	r3, #0
 8001128:	f040 8131 	bne.w	800138e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001136:	2b00      	cmp	r3, #0
 8001138:	f040 8129 	bne.w	800138e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001144:	f043 0202 	orr.w	r2, r3, #2
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001154:	d004      	beq.n	8001160 <HAL_ADC_Init+0x16c>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a5e      	ldr	r2, [pc, #376]	; (80012d4 <HAL_ADC_Init+0x2e0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d101      	bne.n	8001164 <HAL_ADC_Init+0x170>
 8001160:	4b5d      	ldr	r3, [pc, #372]	; (80012d8 <HAL_ADC_Init+0x2e4>)
 8001162:	e000      	b.n	8001166 <HAL_ADC_Init+0x172>
 8001164:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <HAL_ADC_Init+0x2e8>)
 8001166:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001170:	d102      	bne.n	8001178 <HAL_ADC_Init+0x184>
 8001172:	4b58      	ldr	r3, [pc, #352]	; (80012d4 <HAL_ADC_Init+0x2e0>)
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e01a      	b.n	80011ae <HAL_ADC_Init+0x1ba>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a55      	ldr	r2, [pc, #340]	; (80012d4 <HAL_ADC_Init+0x2e0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d103      	bne.n	800118a <HAL_ADC_Init+0x196>
 8001182:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	e011      	b.n	80011ae <HAL_ADC_Init+0x1ba>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a54      	ldr	r2, [pc, #336]	; (80012e0 <HAL_ADC_Init+0x2ec>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d102      	bne.n	800119a <HAL_ADC_Init+0x1a6>
 8001194:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <HAL_ADC_Init+0x2f0>)
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e009      	b.n	80011ae <HAL_ADC_Init+0x1ba>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a51      	ldr	r2, [pc, #324]	; (80012e4 <HAL_ADC_Init+0x2f0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d102      	bne.n	80011aa <HAL_ADC_Init+0x1b6>
 80011a4:	4b4e      	ldr	r3, [pc, #312]	; (80012e0 <HAL_ADC_Init+0x2ec>)
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e001      	b.n	80011ae <HAL_ADC_Init+0x1ba>
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d108      	bne.n	80011ce <HAL_ADC_Init+0x1da>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d101      	bne.n	80011ce <HAL_ADC_Init+0x1da>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_ADC_Init+0x1dc>
 80011ce:	2300      	movs	r3, #0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d11c      	bne.n	800120e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011d4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d010      	beq.n	80011fc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d107      	bne.n	80011f6 <HAL_ADC_Init+0x202>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d101      	bne.n	80011f6 <HAL_ADC_Init+0x202>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_ADC_Init+0x204>
 80011f6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d108      	bne.n	800120e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80011fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	431a      	orrs	r2, r3
 800120a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800120c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7e5b      	ldrb	r3, [r3, #25]
 8001212:	035b      	lsls	r3, r3, #13
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001218:	2a01      	cmp	r2, #1
 800121a:	d002      	beq.n	8001222 <HAL_ADC_Init+0x22e>
 800121c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001220:	e000      	b.n	8001224 <HAL_ADC_Init+0x230>
 8001222:	2200      	movs	r2, #0
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	4313      	orrs	r3, r2
 8001232:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001234:	4313      	orrs	r3, r2
 8001236:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d11b      	bne.n	800127a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7e5b      	ldrb	r3, [r3, #25]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d109      	bne.n	800125e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	3b01      	subs	r3, #1
 8001250:	045a      	lsls	r2, r3, #17
 8001252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001254:	4313      	orrs	r3, r2
 8001256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125a:	663b      	str	r3, [r7, #96]	; 0x60
 800125c:	e00d      	b.n	800127a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001266:	f043 0220 	orr.w	r2, r3, #32
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	2b01      	cmp	r3, #1
 8001280:	d03a      	beq.n	80012f8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <HAL_ADC_Init+0x2ec>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d004      	beq.n	8001296 <HAL_ADC_Init+0x2a2>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <HAL_ADC_Init+0x2f0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d128      	bne.n	80012e8 <HAL_ADC_Init+0x2f4>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800129e:	d012      	beq.n	80012c6 <HAL_ADC_Init+0x2d2>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a8:	d00a      	beq.n	80012c0 <HAL_ADC_Init+0x2cc>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80012b2:	d002      	beq.n	80012ba <HAL_ADC_Init+0x2c6>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	e018      	b.n	80012ec <HAL_ADC_Init+0x2f8>
 80012ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012be:	e015      	b.n	80012ec <HAL_ADC_Init+0x2f8>
 80012c0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80012c4:	e012      	b.n	80012ec <HAL_ADC_Init+0x2f8>
 80012c6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80012ca:	e00f      	b.n	80012ec <HAL_ADC_Init+0x2f8>
 80012cc:	20000010 	.word	0x20000010
 80012d0:	431bde83 	.word	0x431bde83
 80012d4:	50000100 	.word	0x50000100
 80012d8:	50000300 	.word	0x50000300
 80012dc:	50000700 	.word	0x50000700
 80012e0:	50000400 	.word	0x50000400
 80012e4:	50000500 	.word	0x50000500
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012f0:	4313      	orrs	r3, r2
 80012f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012f4:	4313      	orrs	r3, r2
 80012f6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b00      	cmp	r3, #0
 8001304:	d114      	bne.n	8001330 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001314:	f023 0302 	bic.w	r3, r3, #2
 8001318:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7e1b      	ldrb	r3, [r3, #24]
 800131e:	039a      	lsls	r2, r3, #14
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4313      	orrs	r3, r2
 800132a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800132c:	4313      	orrs	r3, r2
 800132e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_ADC_Init+0x3bc>)
 8001338:	4013      	ands	r3, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001340:	430b      	orrs	r3, r1
 8001342:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d10c      	bne.n	8001366 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f023 010f 	bic.w	r1, r3, #15
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	1e5a      	subs	r2, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	631a      	str	r2, [r3, #48]	; 0x30
 8001364:	e007      	b.n	8001376 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 020f 	bic.w	r2, r2, #15
 8001374:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f023 0303 	bic.w	r3, r3, #3
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
 800138c:	e00a      	b.n	80013a4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f023 0312 	bic.w	r3, r3, #18
 8001396:	f043 0210 	orr.w	r2, r3, #16
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800139e:	2301      	movs	r3, #1
 80013a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80013a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3768      	adds	r7, #104	; 0x68
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	fff0c007 	.word	0xfff0c007

080013b4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f040 80f9 	bne.w	80015c2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_ADC_Start+0x2a>
 80013da:	2302      	movs	r3, #2
 80013dc:	e0f4      	b.n	80015c8 <HAL_ADC_Start+0x214>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fe16 	bl	8002018 <ADC_Enable>
 80013ec:	4603      	mov	r3, r0
 80013ee:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 80e0 	bne.w	80015b8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001414:	d004      	beq.n	8001420 <HAL_ADC_Start+0x6c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a6d      	ldr	r2, [pc, #436]	; (80015d0 <HAL_ADC_Start+0x21c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d106      	bne.n	800142e <HAL_ADC_Start+0x7a>
 8001420:	4b6c      	ldr	r3, [pc, #432]	; (80015d4 <HAL_ADC_Start+0x220>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	2b00      	cmp	r3, #0
 800142a:	d010      	beq.n	800144e <HAL_ADC_Start+0x9a>
 800142c:	e005      	b.n	800143a <HAL_ADC_Start+0x86>
 800142e:	4b6a      	ldr	r3, [pc, #424]	; (80015d8 <HAL_ADC_Start+0x224>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	2b00      	cmp	r3, #0
 8001438:	d009      	beq.n	800144e <HAL_ADC_Start+0x9a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001442:	d004      	beq.n	800144e <HAL_ADC_Start+0x9a>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a64      	ldr	r2, [pc, #400]	; (80015dc <HAL_ADC_Start+0x228>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d115      	bne.n	800147a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d036      	beq.n	80014d6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001470:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001478:	e02d      	b.n	80014d6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800148e:	d004      	beq.n	800149a <HAL_ADC_Start+0xe6>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a4e      	ldr	r2, [pc, #312]	; (80015d0 <HAL_ADC_Start+0x21c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d10a      	bne.n	80014b0 <HAL_ADC_Start+0xfc>
 800149a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf14      	ite	ne
 80014a8:	2301      	movne	r3, #1
 80014aa:	2300      	moveq	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	e008      	b.n	80014c2 <HAL_ADC_Start+0x10e>
 80014b0:	4b4a      	ldr	r3, [pc, #296]	; (80015dc <HAL_ADC_Start+0x228>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf14      	ite	ne
 80014bc:	2301      	movne	r3, #1
 80014be:	2300      	moveq	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014e2:	d106      	bne.n	80014f2 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e8:	f023 0206 	bic.w	r2, r3, #6
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	645a      	str	r2, [r3, #68]	; 0x44
 80014f0:	e002      	b.n	80014f8 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	221c      	movs	r2, #28
 8001506:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001510:	d004      	beq.n	800151c <HAL_ADC_Start+0x168>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a2e      	ldr	r2, [pc, #184]	; (80015d0 <HAL_ADC_Start+0x21c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d106      	bne.n	800152a <HAL_ADC_Start+0x176>
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <HAL_ADC_Start+0x220>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	2b00      	cmp	r3, #0
 8001526:	d03e      	beq.n	80015a6 <HAL_ADC_Start+0x1f2>
 8001528:	e005      	b.n	8001536 <HAL_ADC_Start+0x182>
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_ADC_Start+0x224>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	2b00      	cmp	r3, #0
 8001534:	d037      	beq.n	80015a6 <HAL_ADC_Start+0x1f2>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800153e:	d004      	beq.n	800154a <HAL_ADC_Start+0x196>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <HAL_ADC_Start+0x21c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d106      	bne.n	8001558 <HAL_ADC_Start+0x1a4>
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <HAL_ADC_Start+0x220>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	2b05      	cmp	r3, #5
 8001554:	d027      	beq.n	80015a6 <HAL_ADC_Start+0x1f2>
 8001556:	e005      	b.n	8001564 <HAL_ADC_Start+0x1b0>
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <HAL_ADC_Start+0x224>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	2b05      	cmp	r3, #5
 8001562:	d020      	beq.n	80015a6 <HAL_ADC_Start+0x1f2>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800156c:	d004      	beq.n	8001578 <HAL_ADC_Start+0x1c4>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <HAL_ADC_Start+0x21c>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d106      	bne.n	8001586 <HAL_ADC_Start+0x1d2>
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_ADC_Start+0x220>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	2b09      	cmp	r3, #9
 8001582:	d010      	beq.n	80015a6 <HAL_ADC_Start+0x1f2>
 8001584:	e005      	b.n	8001592 <HAL_ADC_Start+0x1de>
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_ADC_Start+0x224>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	2b09      	cmp	r3, #9
 8001590:	d009      	beq.n	80015a6 <HAL_ADC_Start+0x1f2>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800159a:	d004      	beq.n	80015a6 <HAL_ADC_Start+0x1f2>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <HAL_ADC_Start+0x228>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d10f      	bne.n	80015c6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0204 	orr.w	r2, r2, #4
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	e006      	b.n	80015c6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015c0:	e001      	b.n	80015c6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015c2:	2302      	movs	r3, #2
 80015c4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	50000100 	.word	0x50000100
 80015d4:	50000300 	.word	0x50000300
 80015d8:	50000700 	.word	0x50000700
 80015dc:	50000400 	.word	0x50000400

080015e0 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_Stop+0x1a>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e023      	b.n	8001642 <HAL_ADC_Stop+0x62>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001602:	216c      	movs	r1, #108	; 0x6c
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 fdc5 	bl	8002194 <ADC_ConversionStop>
 800160a:	4603      	mov	r3, r0
 800160c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d111      	bne.n	8001638 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 fd5d 	bl	80020d4 <ADC_Disable>
 800161a:	4603      	mov	r3, r0
 800161c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	f043 0201 	orr.w	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b08      	cmp	r3, #8
 8001660:	d102      	bne.n	8001668 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001662:	2308      	movs	r3, #8
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e03a      	b.n	80016de <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001670:	d004      	beq.n	800167c <HAL_ADC_PollForConversion+0x30>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6e      	ldr	r2, [pc, #440]	; (8001830 <HAL_ADC_PollForConversion+0x1e4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d101      	bne.n	8001680 <HAL_ADC_PollForConversion+0x34>
 800167c:	4b6d      	ldr	r3, [pc, #436]	; (8001834 <HAL_ADC_PollForConversion+0x1e8>)
 800167e:	e000      	b.n	8001682 <HAL_ADC_PollForConversion+0x36>
 8001680:	4b6d      	ldr	r3, [pc, #436]	; (8001838 <HAL_ADC_PollForConversion+0x1ec>)
 8001682:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	2b00      	cmp	r3, #0
 800168e:	d112      	bne.n	80016b6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b01      	cmp	r3, #1
 800169c:	d11d      	bne.n	80016da <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f043 0220 	orr.w	r2, r3, #32
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0b8      	b.n	8001828 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f043 0220 	orr.w	r2, r3, #32
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e0a6      	b.n	8001828 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80016da:	230c      	movs	r3, #12
 80016dc:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e6:	d004      	beq.n	80016f2 <HAL_ADC_PollForConversion+0xa6>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a50      	ldr	r2, [pc, #320]	; (8001830 <HAL_ADC_PollForConversion+0x1e4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d106      	bne.n	8001700 <HAL_ADC_PollForConversion+0xb4>
 80016f2:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_ADC_PollForConversion+0x1e8>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d010      	beq.n	8001720 <HAL_ADC_PollForConversion+0xd4>
 80016fe:	e005      	b.n	800170c <HAL_ADC_PollForConversion+0xc0>
 8001700:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <HAL_ADC_PollForConversion+0x1ec>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	2b00      	cmp	r3, #0
 800170a:	d009      	beq.n	8001720 <HAL_ADC_PollForConversion+0xd4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001714:	d004      	beq.n	8001720 <HAL_ADC_PollForConversion+0xd4>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a48      	ldr	r2, [pc, #288]	; (800183c <HAL_ADC_PollForConversion+0x1f0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d104      	bne.n	800172a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	e00f      	b.n	800174a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001732:	d004      	beq.n	800173e <HAL_ADC_PollForConversion+0xf2>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a3d      	ldr	r2, [pc, #244]	; (8001830 <HAL_ADC_PollForConversion+0x1e4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d102      	bne.n	8001744 <HAL_ADC_PollForConversion+0xf8>
 800173e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001742:	e000      	b.n	8001746 <HAL_ADC_PollForConversion+0xfa>
 8001744:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_ADC_PollForConversion+0x1f0>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800174a:	f7ff fc25 	bl	8000f98 <HAL_GetTick>
 800174e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001750:	e01a      	b.n	8001788 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001758:	d016      	beq.n	8001788 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <HAL_ADC_PollForConversion+0x124>
 8001760:	f7ff fc1a 	bl	8000f98 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d20b      	bcs.n	8001788 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f043 0204 	orr.w	r2, r3, #4
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e04f      	b.n	8001828 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	4013      	ands	r3, r2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0dd      	beq.n	8001752 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d131      	bne.n	8001814 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d12c      	bne.n	8001814 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d125      	bne.n	8001814 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d112      	bne.n	80017fc <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d112      	bne.n	8001814 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f043 0201 	orr.w	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
 80017fa:	e00b      	b.n	8001814 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f043 0220 	orr.w	r2, r3, #32
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	f043 0201 	orr.w	r2, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d103      	bne.n	8001826 <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	50000100 	.word	0x50000100
 8001834:	50000300 	.word	0x50000300
 8001838:	50000700 	.word	0x50000700
 800183c:	50000400 	.word	0x50000400

08001840 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800185c:	b480      	push	{r7}
 800185e:	b09b      	sub	sp, #108	; 0x6c
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_ADC_ConfigChannel+0x22>
 800187a:	2302      	movs	r3, #2
 800187c:	e2cb      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x5ba>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	f040 82af 	bne.w	8001df4 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b04      	cmp	r3, #4
 800189c:	d81c      	bhi.n	80018d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	461a      	mov	r2, r3
 80018b2:	231f      	movs	r3, #31
 80018b4:	4093      	lsls	r3, r2
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4019      	ands	r1, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa00 f203 	lsl.w	r2, r0, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	631a      	str	r2, [r3, #48]	; 0x30
 80018d6:	e063      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d81e      	bhi.n	800191e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	3b1e      	subs	r3, #30
 80018f4:	221f      	movs	r2, #31
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	4019      	ands	r1, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	3b1e      	subs	r3, #30
 8001910:	fa00 f203 	lsl.w	r2, r0, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	635a      	str	r2, [r3, #52]	; 0x34
 800191c:	e040      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b0e      	cmp	r3, #14
 8001924:	d81e      	bhi.n	8001964 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	3b3c      	subs	r3, #60	; 0x3c
 800193a:	221f      	movs	r2, #31
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	4019      	ands	r1, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	3b3c      	subs	r3, #60	; 0x3c
 8001956:	fa00 f203 	lsl.w	r2, r0, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	639a      	str	r2, [r3, #56]	; 0x38
 8001962:	e01d      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	3b5a      	subs	r3, #90	; 0x5a
 8001978:	221f      	movs	r2, #31
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	4019      	ands	r1, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	3b5a      	subs	r3, #90	; 0x5a
 8001994:	fa00 f203 	lsl.w	r2, r0, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f040 80e5 	bne.w	8001b7a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	d91c      	bls.n	80019f2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6999      	ldr	r1, [r3, #24]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	3b1e      	subs	r3, #30
 80019ca:	2207      	movs	r2, #7
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	4019      	ands	r1, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	6898      	ldr	r0, [r3, #8]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	3b1e      	subs	r3, #30
 80019e4:	fa00 f203 	lsl.w	r2, r0, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	619a      	str	r2, [r3, #24]
 80019f0:	e019      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6959      	ldr	r1, [r3, #20]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	2207      	movs	r2, #7
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	4019      	ands	r1, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6898      	ldr	r0, [r3, #8]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	08db      	lsrs	r3, r3, #3
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d84f      	bhi.n	8001ae8 <HAL_ADC_ConfigChannel+0x28c>
 8001a48:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <HAL_ADC_ConfigChannel+0x1f4>)
 8001a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4e:	bf00      	nop
 8001a50:	08001a61 	.word	0x08001a61
 8001a54:	08001a83 	.word	0x08001a83
 8001a58:	08001aa5 	.word	0x08001aa5
 8001a5c:	08001ac7 	.word	0x08001ac7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a66:	4b9f      	ldr	r3, [pc, #636]	; (8001ce4 <HAL_ADC_ConfigChannel+0x488>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	0691      	lsls	r1, r2, #26
 8001a70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a72:	430a      	orrs	r2, r1
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a7e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a80:	e07e      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a88:	4b96      	ldr	r3, [pc, #600]	; (8001ce4 <HAL_ADC_ConfigChannel+0x488>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	0691      	lsls	r1, r2, #26
 8001a92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a94:	430a      	orrs	r2, r1
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001aa0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001aa2:	e06d      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001aaa:	4b8e      	ldr	r3, [pc, #568]	; (8001ce4 <HAL_ADC_ConfigChannel+0x488>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	0691      	lsls	r1, r2, #26
 8001ab4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ac2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ac4:	e05c      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001acc:	4b85      	ldr	r3, [pc, #532]	; (8001ce4 <HAL_ADC_ConfigChannel+0x488>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	0691      	lsls	r1, r2, #26
 8001ad6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ae4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ae6:	e04b      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	069b      	lsls	r3, r3, #26
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d107      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b0a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	069b      	lsls	r3, r3, #26
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d107      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b2e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	069b      	lsls	r3, r3, #26
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d107      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b52:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	069b      	lsls	r3, r3, #26
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d10a      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b76:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b78:	e001      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001b7a:	bf00      	nop
 8001b7c:	e000      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001b7e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d108      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x344>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x344>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x346>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 8131 	bne.w	8001e0a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d00f      	beq.n	8001bd0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	400a      	ands	r2, r1
 8001bca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001bce:	e049      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	409a      	lsls	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b09      	cmp	r3, #9
 8001bf0:	d91c      	bls.n	8001c2c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6999      	ldr	r1, [r3, #24]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	3b1b      	subs	r3, #27
 8001c04:	2207      	movs	r2, #7
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	4019      	ands	r1, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6898      	ldr	r0, [r3, #8]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b1b      	subs	r3, #27
 8001c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	619a      	str	r2, [r3, #24]
 8001c2a:	e01b      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6959      	ldr	r1, [r3, #20]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	2207      	movs	r2, #7
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4019      	ands	r1, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6898      	ldr	r0, [r3, #8]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c6c:	d004      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x41c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <HAL_ADC_ConfigChannel+0x48c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d101      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x420>
 8001c78:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <HAL_ADC_ConfigChannel+0x490>)
 8001c7a:	e000      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x422>
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <HAL_ADC_ConfigChannel+0x494>)
 8001c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d015      	beq.n	8001cc0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c98:	2b11      	cmp	r3, #17
 8001c9a:	d105      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00b      	beq.n	8001cc0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001cac:	2b12      	cmp	r3, #18
 8001cae:	f040 80ac 	bne.w	8001e0a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 80a5 	bne.w	8001e0a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cc8:	d102      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x474>
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <HAL_ADC_ConfigChannel+0x48c>)
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	e023      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x4bc>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_ADC_ConfigChannel+0x48c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x498>
 8001cda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	e01a      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x4bc>
 8001ce2:	bf00      	nop
 8001ce4:	83fff000 	.word	0x83fff000
 8001ce8:	50000100 	.word	0x50000100
 8001cec:	50000300 	.word	0x50000300
 8001cf0:	50000700 	.word	0x50000700
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a4a      	ldr	r2, [pc, #296]	; (8001e24 <HAL_ADC_ConfigChannel+0x5c8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d102      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x4a8>
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <HAL_ADC_ConfigChannel+0x5cc>)
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e009      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x4bc>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a47      	ldr	r2, [pc, #284]	; (8001e28 <HAL_ADC_ConfigChannel+0x5cc>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d102      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x4b8>
 8001d0e:	4b45      	ldr	r3, [pc, #276]	; (8001e24 <HAL_ADC_ConfigChannel+0x5c8>)
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	e001      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x4bc>
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d108      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x4dc>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x4dc>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x4de>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d150      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d3e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d010      	beq.n	8001d66 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d107      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x504>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x504>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x506>
 8001d60:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d13c      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b10      	cmp	r3, #16
 8001d6c:	d11d      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x54e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d76:	d118      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d82:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d84:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <HAL_ADC_ConfigChannel+0x5d0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a29      	ldr	r2, [pc, #164]	; (8001e30 <HAL_ADC_ConfigChannel+0x5d4>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0c9a      	lsrs	r2, r3, #18
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d9a:	e002      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f9      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001da8:	e02e      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b11      	cmp	r3, #17
 8001db0:	d10b      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x56e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dba:	d106      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dc8:	e01e      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b12      	cmp	r3, #18
 8001dd0:	d11a      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ddc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dde:	e013      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f043 0220 	orr.w	r2, r3, #32
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001df2:	e00a      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e06:	e000      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e08:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	376c      	adds	r7, #108	; 0x6c
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	50000400 	.word	0x50000400
 8001e28:	50000500 	.word	0x50000500
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	431bde83 	.word	0x431bde83

08001e34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b099      	sub	sp, #100	; 0x64
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e4c:	d102      	bne.n	8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e4e:	4b6d      	ldr	r3, [pc, #436]	; (8002004 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	e01a      	b.n	8001e8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a6a      	ldr	r2, [pc, #424]	; (8002004 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d103      	bne.n	8001e66 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001e5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	e011      	b.n	8001e8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a67      	ldr	r2, [pc, #412]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d102      	bne.n	8001e76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e70:	4b66      	ldr	r3, [pc, #408]	; (800200c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	e009      	b.n	8001e8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a64      	ldr	r2, [pc, #400]	; (800200c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d102      	bne.n	8001e86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001e80:	4b61      	ldr	r3, [pc, #388]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	e001      	b.n	8001e8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0b0      	b.n	8001ff6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e0a9      	b.n	8001ff6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f040 808d 	bne.w	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f040 8086 	bne.w	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ed0:	d004      	beq.n	8001edc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a4b      	ldr	r2, [pc, #300]	; (8002004 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001edc:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001ede:	e000      	b.n	8001ee2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001ee2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d040      	beq.n	8001f6e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001eec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001efe:	035b      	lsls	r3, r3, #13
 8001f00:	430b      	orrs	r3, r1
 8001f02:	431a      	orrs	r2, r3
 8001f04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f06:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d108      	bne.n	8001f28 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d15c      	bne.n	8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d107      	bne.n	8001f4a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001f4a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d14b      	bne.n	8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f58:	f023 030f 	bic.w	r3, r3, #15
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	6811      	ldr	r1, [r2, #0]
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	6892      	ldr	r2, [r2, #8]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	431a      	orrs	r2, r3
 8001f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f6a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f6c:	e03c      	b.n	8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f78:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d108      	bne.n	8001f9a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d123      	bne.n	8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d107      	bne.n	8001fbc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001fbc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d112      	bne.n	8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001fc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fca:	f023 030f 	bic.w	r3, r3, #15
 8001fce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fd0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fd2:	e009      	b.n	8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f043 0220 	orr.w	r2, r3, #32
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001fe6:	e000      	b.n	8001fea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fe8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3764      	adds	r7, #100	; 0x64
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	50000100 	.word	0x50000100
 8002008:	50000400 	.word	0x50000400
 800200c:	50000500 	.word	0x50000500
 8002010:	50000300 	.word	0x50000300
 8002014:	50000700 	.word	0x50000700

08002018 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d108      	bne.n	8002044 <ADC_Enable+0x2c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <ADC_Enable+0x2c>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <ADC_Enable+0x2e>
 8002044:	2300      	movs	r3, #0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d13c      	bne.n	80020c4 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <ADC_Enable+0xb8>)
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f043 0210 	orr.w	r2, r3, #16
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e028      	b.n	80020c6 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002084:	f7fe ff88 	bl	8000f98 <HAL_GetTick>
 8002088:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800208a:	e014      	b.n	80020b6 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800208c:	f7fe ff84 	bl	8000f98 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d90d      	bls.n	80020b6 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f043 0210 	orr.w	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e007      	b.n	80020c6 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d1e3      	bne.n	800208c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	8000003f 	.word	0x8000003f

080020d4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <ADC_Disable+0x2c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <ADC_Disable+0x2c>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <ADC_Disable+0x2e>
 8002100:	2300      	movs	r3, #0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d040      	beq.n	8002188 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 030d 	and.w	r3, r3, #13
 8002110:	2b01      	cmp	r3, #1
 8002112:	d10f      	bne.n	8002134 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0202 	orr.w	r2, r2, #2
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2203      	movs	r2, #3
 800212a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800212c:	f7fe ff34 	bl	8000f98 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002132:	e022      	b.n	800217a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f043 0210 	orr.w	r2, r3, #16
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e01c      	b.n	800218a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002150:	f7fe ff22 	bl	8000f98 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d90d      	bls.n	800217a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f043 0210 	orr.w	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e007      	b.n	800218a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d0e3      	beq.n	8002150 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8093 	beq.w	80022e0 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021c8:	d12a      	bne.n	8002220 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d126      	bne.n	8002220 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d122      	bne.n	8002220 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80021da:	230c      	movs	r3, #12
 80021dc:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80021de:	e014      	b.n	800220a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4a42      	ldr	r2, [pc, #264]	; (80022ec <ADC_ConversionStop+0x158>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d90d      	bls.n	8002204 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f043 0210 	orr.w	r2, r3, #16
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e06e      	b.n	80022e2 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	3301      	adds	r3, #1
 8002208:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002214:	2b40      	cmp	r3, #64	; 0x40
 8002216:	d1e3      	bne.n	80021e0 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2240      	movs	r2, #64	; 0x40
 800221e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2b60      	cmp	r3, #96	; 0x60
 8002224:	d015      	beq.n	8002252 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b04      	cmp	r3, #4
 8002232:	d10e      	bne.n	8002252 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0210 	orr.w	r2, r2, #16
 8002250:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b0c      	cmp	r3, #12
 8002256:	d015      	beq.n	8002284 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b08      	cmp	r3, #8
 8002264:	d10e      	bne.n	8002284 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0220 	orr.w	r2, r2, #32
 8002282:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b60      	cmp	r3, #96	; 0x60
 8002288:	d004      	beq.n	8002294 <ADC_ConversionStop+0x100>
 800228a:	2b6c      	cmp	r3, #108	; 0x6c
 800228c:	d105      	bne.n	800229a <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800228e:	230c      	movs	r3, #12
 8002290:	617b      	str	r3, [r7, #20]
        break;
 8002292:	e005      	b.n	80022a0 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002294:	2308      	movs	r3, #8
 8002296:	617b      	str	r3, [r7, #20]
        break;
 8002298:	e002      	b.n	80022a0 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800229a:	2304      	movs	r3, #4
 800229c:	617b      	str	r3, [r7, #20]
        break;
 800229e:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80022a0:	f7fe fe7a 	bl	8000f98 <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80022a6:	e014      	b.n	80022d2 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80022a8:	f7fe fe76 	bl	8000f98 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b0b      	cmp	r3, #11
 80022b4:	d90d      	bls.n	80022d2 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e007      	b.n	80022e2 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e3      	bne.n	80022a8 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	000993ff 	.word	0x000993ff

080022f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <__NVIC_SetPriorityGrouping+0x44>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800230c:	4013      	ands	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800231c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002322:	4a04      	ldr	r2, [pc, #16]	; (8002334 <__NVIC_SetPriorityGrouping+0x44>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60d3      	str	r3, [r2, #12]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <__NVIC_GetPriorityGrouping+0x18>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	f003 0307 	and.w	r3, r3, #7
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	6039      	str	r1, [r7, #0]
 800235e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	2b00      	cmp	r3, #0
 8002366:	db0a      	blt.n	800237e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	490c      	ldr	r1, [pc, #48]	; (80023a0 <__NVIC_SetPriority+0x4c>)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	0112      	lsls	r2, r2, #4
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	440b      	add	r3, r1
 8002378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800237c:	e00a      	b.n	8002394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4908      	ldr	r1, [pc, #32]	; (80023a4 <__NVIC_SetPriority+0x50>)
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	3b04      	subs	r3, #4
 800238c:	0112      	lsls	r2, r2, #4
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	440b      	add	r3, r1
 8002392:	761a      	strb	r2, [r3, #24]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000e100 	.word	0xe000e100
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f1c3 0307 	rsb	r3, r3, #7
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	bf28      	it	cs
 80023c6:	2304      	movcs	r3, #4
 80023c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d902      	bls.n	80023d8 <NVIC_EncodePriority+0x30>
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3b03      	subs	r3, #3
 80023d6:	e000      	b.n	80023da <NVIC_EncodePriority+0x32>
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43da      	mvns	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	401a      	ands	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	43d9      	mvns	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	4313      	orrs	r3, r2
         );
}
 8002402:	4618      	mov	r0, r3
 8002404:	3724      	adds	r7, #36	; 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002420:	d301      	bcc.n	8002426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002422:	2301      	movs	r3, #1
 8002424:	e00f      	b.n	8002446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <SysTick_Config+0x40>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242e:	210f      	movs	r1, #15
 8002430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002434:	f7ff ff8e 	bl	8002354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <SysTick_Config+0x40>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <SysTick_Config+0x40>)
 8002440:	2207      	movs	r2, #7
 8002442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	e000e010 	.word	0xe000e010

08002454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ff47 	bl	80022f0 <__NVIC_SetPriorityGrouping>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800247c:	f7ff ff5c 	bl	8002338 <__NVIC_GetPriorityGrouping>
 8002480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	6978      	ldr	r0, [r7, #20]
 8002488:	f7ff ff8e 	bl	80023a8 <NVIC_EncodePriority>
 800248c:	4602      	mov	r2, r0
 800248e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff5d 	bl	8002354 <__NVIC_SetPriority>
}
 800249a:	bf00      	nop
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ffb0 	bl	8002410 <SysTick_Config>
 80024b0:	4603      	mov	r3, r0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ca:	e154      	b.n	8002776 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	4013      	ands	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8146 	beq.w	8002770 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x38>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b12      	cmp	r3, #18
 80024f2:	d123      	bne.n	800253c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	08da      	lsrs	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3208      	adds	r2, #8
 80024fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	08da      	lsrs	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3208      	adds	r2, #8
 8002536:	6939      	ldr	r1, [r7, #16]
 8002538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d00b      	beq.n	8002590 <HAL_GPIO_Init+0xd4>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d007      	beq.n	8002590 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002584:	2b11      	cmp	r3, #17
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b12      	cmp	r3, #18
 800258e:	d130      	bne.n	80025f2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c6:	2201      	movs	r2, #1
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 0201 	and.w	r2, r3, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	2203      	movs	r2, #3
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80a0 	beq.w	8002770 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002630:	4b58      	ldr	r3, [pc, #352]	; (8002794 <HAL_GPIO_Init+0x2d8>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4a57      	ldr	r2, [pc, #348]	; (8002794 <HAL_GPIO_Init+0x2d8>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6193      	str	r3, [r2, #24]
 800263c:	4b55      	ldr	r3, [pc, #340]	; (8002794 <HAL_GPIO_Init+0x2d8>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002648:	4a53      	ldr	r2, [pc, #332]	; (8002798 <HAL_GPIO_Init+0x2dc>)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002672:	d019      	beq.n	80026a8 <HAL_GPIO_Init+0x1ec>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a49      	ldr	r2, [pc, #292]	; (800279c <HAL_GPIO_Init+0x2e0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d013      	beq.n	80026a4 <HAL_GPIO_Init+0x1e8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a48      	ldr	r2, [pc, #288]	; (80027a0 <HAL_GPIO_Init+0x2e4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00d      	beq.n	80026a0 <HAL_GPIO_Init+0x1e4>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a47      	ldr	r2, [pc, #284]	; (80027a4 <HAL_GPIO_Init+0x2e8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d007      	beq.n	800269c <HAL_GPIO_Init+0x1e0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a46      	ldr	r2, [pc, #280]	; (80027a8 <HAL_GPIO_Init+0x2ec>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d101      	bne.n	8002698 <HAL_GPIO_Init+0x1dc>
 8002694:	2304      	movs	r3, #4
 8002696:	e008      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 8002698:	2305      	movs	r3, #5
 800269a:	e006      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 800269c:	2303      	movs	r3, #3
 800269e:	e004      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e002      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 80026a8:	2300      	movs	r3, #0
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	f002 0203 	and.w	r2, r2, #3
 80026b0:	0092      	lsls	r2, r2, #2
 80026b2:	4093      	lsls	r3, r2
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ba:	4937      	ldr	r1, [pc, #220]	; (8002798 <HAL_GPIO_Init+0x2dc>)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c8:	4b38      	ldr	r3, [pc, #224]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026ec:	4a2f      	ldr	r2, [pc, #188]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026f2:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002716:	4a25      	ldr	r2, [pc, #148]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271c:	4b23      	ldr	r3, [pc, #140]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002740:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800276a:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3301      	adds	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	f47f aea3 	bne.w	80024cc <HAL_GPIO_Init+0x10>
  }
}
 8002786:	bf00      	nop
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	40010000 	.word	0x40010000
 800279c:	48000400 	.word	0x48000400
 80027a0:	48000800 	.word	0x48000800
 80027a4:	48000c00 	.word	0x48000c00
 80027a8:	48001000 	.word	0x48001000
 80027ac:	40010400 	.word	0x40010400

080027b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027cc:	e002      	b.n	80027d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e081      	b.n	80028f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fa02 	bl	8000c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002830:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002840:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	e006      	b.n	8002868 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002866:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d104      	bne.n	800287a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002878:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800288c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800289c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	ea42 0103 	orr.w	r1, r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	021a      	lsls	r2, r3, #8
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69d9      	ldr	r1, [r3, #28]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1a      	ldr	r2, [r3, #32]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b20      	cmp	r3, #32
 8002912:	d138      	bne.n	8002986 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800291e:	2302      	movs	r3, #2
 8002920:	e032      	b.n	8002988 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2224      	movs	r2, #36	; 0x24
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002950:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6819      	ldr	r1, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e000      	b.n	8002988 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
  }
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d139      	bne.n	8002a1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e033      	b.n	8002a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	; 0x24
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e000      	b.n	8002a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
  }
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2e:	b08b      	sub	sp, #44	; 0x2c
 8002a30:	af06      	add	r7, sp, #24
 8002a32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0a6      	b.n	8002b8c <HAL_PCD_Init+0x160>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe f994 	bl	8000d80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 fbdd 	bl	8004224 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
 8002a6e:	e035      	b.n	8002adc <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	015b      	lsls	r3, r3, #5
 8002a76:	4413      	add	r3, r2
 8002a78:	3329      	adds	r3, #41	; 0x29
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	015b      	lsls	r3, r3, #5
 8002a84:	4413      	add	r3, r2
 8002a86:	3328      	adds	r3, #40	; 0x28
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	b291      	uxth	r1, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	015b      	lsls	r3, r3, #5
 8002a96:	4413      	add	r3, r2
 8002a98:	3336      	adds	r3, #54	; 0x36
 8002a9a:	460a      	mov	r2, r1
 8002a9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	015b      	lsls	r3, r3, #5
 8002aa4:	4413      	add	r3, r2
 8002aa6:	332b      	adds	r3, #43	; 0x2b
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	015b      	lsls	r3, r3, #5
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3338      	adds	r3, #56	; 0x38
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	015b      	lsls	r3, r3, #5
 8002ac0:	4413      	add	r3, r2
 8002ac2:	333c      	adds	r3, #60	; 0x3c
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	3302      	adds	r3, #2
 8002ace:	015b      	lsls	r3, r3, #5
 8002ad0:	4413      	add	r3, r2
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d3c4      	bcc.n	8002a70 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	e031      	b.n	8002b50 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	015b      	lsls	r3, r3, #5
 8002af2:	4413      	add	r3, r2
 8002af4:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	015b      	lsls	r3, r3, #5
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	015b      	lsls	r3, r3, #5
 8002b12:	4413      	add	r3, r2
 8002b14:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	015b      	lsls	r3, r3, #5
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	015b      	lsls	r3, r3, #5
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	330a      	adds	r3, #10
 8002b42:	015b      	lsls	r3, r3, #5
 8002b44:	4413      	add	r3, r2
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d3c8      	bcc.n	8002aec <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	687e      	ldr	r6, [r7, #4]
 8002b62:	466d      	mov	r5, sp
 8002b64:	f106 0410 	add.w	r4, r6, #16
 8002b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	602b      	str	r3, [r5, #0]
 8002b70:	1d33      	adds	r3, r6, #4
 8002b72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b74:	6838      	ldr	r0, [r7, #0]
 8002b76:	f001 fb72 	bl	800425e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f000 bef4 	b.w	8003996 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 816a 	beq.w	8002e92 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bbe:	4bb3      	ldr	r3, [pc, #716]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d00c      	beq.n	8002be4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bca:	4bb0      	ldr	r3, [pc, #704]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d159      	bne.n	8002c8a <HAL_RCC_OscConfig+0xf6>
 8002bd6:	4bad      	ldr	r3, [pc, #692]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be2:	d152      	bne.n	8002c8a <HAL_RCC_OscConfig+0xf6>
 8002be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bf8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d102      	bne.n	8002c16 <HAL_RCC_OscConfig+0x82>
 8002c10:	4b9e      	ldr	r3, [pc, #632]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	e015      	b.n	8002c42 <HAL_RCC_OscConfig+0xae>
 8002c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c1a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c2e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c32:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002c3e:	4b93      	ldr	r3, [pc, #588]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c46:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c4a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c4e:	fa92 f2a2 	rbit	r2, r2
 8002c52:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c56:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c5a:	fab2 f282 	clz	r2, r2
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	f042 0220 	orr.w	r2, r2, #32
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f002 021f 	and.w	r2, r2, #31
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 810c 	beq.w	8002e90 <HAL_RCC_OscConfig+0x2fc>
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 8106 	bne.w	8002e90 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f000 be86 	b.w	8003996 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c94:	d106      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x110>
 8002c96:	4b7d      	ldr	r3, [pc, #500]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a7c      	ldr	r2, [pc, #496]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e030      	b.n	8002d06 <HAL_RCC_OscConfig+0x172>
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x134>
 8002cae:	4b77      	ldr	r3, [pc, #476]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a76      	ldr	r2, [pc, #472]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b74      	ldr	r3, [pc, #464]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a73      	ldr	r2, [pc, #460]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e01e      	b.n	8002d06 <HAL_RCC_OscConfig+0x172>
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd2:	d10c      	bne.n	8002cee <HAL_RCC_OscConfig+0x15a>
 8002cd4:	4b6d      	ldr	r3, [pc, #436]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a6c      	ldr	r2, [pc, #432]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002cda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b6a      	ldr	r3, [pc, #424]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a69      	ldr	r2, [pc, #420]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	e00b      	b.n	8002d06 <HAL_RCC_OscConfig+0x172>
 8002cee:	4b67      	ldr	r3, [pc, #412]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a66      	ldr	r2, [pc, #408]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b64      	ldr	r3, [pc, #400]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a63      	ldr	r2, [pc, #396]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d04:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d06:	4b61      	ldr	r3, [pc, #388]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	f023 020f 	bic.w	r2, r3, #15
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	495d      	ldr	r1, [pc, #372]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d059      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe f938 	bl	8000f98 <HAL_GetTick>
 8002d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2e:	f7fe f933 	bl	8000f98 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d902      	bls.n	8002d44 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	f000 be29 	b.w	8003996 <HAL_RCC_OscConfig+0xe02>
 8002d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d48:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d58:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d102      	bne.n	8002d76 <HAL_RCC_OscConfig+0x1e2>
 8002d70:	4b46      	ldr	r3, [pc, #280]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	e015      	b.n	8002da2 <HAL_RCC_OscConfig+0x20e>
 8002d76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d7a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d8e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d92:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d9e:	4b3b      	ldr	r3, [pc, #236]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002da6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002daa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002dae:	fa92 f2a2 	rbit	r2, r2
 8002db2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002db6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002dba:	fab2 f282 	clz	r2, r2
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	f042 0220 	orr.w	r2, r2, #32
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f002 021f 	and.w	r2, r2, #31
 8002dca:	2101      	movs	r1, #1
 8002dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ab      	beq.n	8002d2e <HAL_RCC_OscConfig+0x19a>
 8002dd6:	e05c      	b.n	8002e92 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f8de 	bl	8000f98 <HAL_GetTick>
 8002ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de2:	f7fe f8d9 	bl	8000f98 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d902      	bls.n	8002df8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	f000 bdcf 	b.w	8003996 <HAL_RCC_OscConfig+0xe02>
 8002df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dfc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e0c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d102      	bne.n	8002e2a <HAL_RCC_OscConfig+0x296>
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	e015      	b.n	8002e56 <HAL_RCC_OscConfig+0x2c2>
 8002e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e2e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e42:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e46:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <HAL_RCC_OscConfig+0x2f8>)
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e5a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e5e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e62:	fa92 f2a2 	rbit	r2, r2
 8002e66:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e6a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e6e:	fab2 f282 	clz	r2, r2
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	f042 0220 	orr.w	r2, r2, #32
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f002 021f 	and.w	r2, r2, #31
 8002e7e:	2101      	movs	r1, #1
 8002e80:	fa01 f202 	lsl.w	r2, r1, r2
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1ab      	bne.n	8002de2 <HAL_RCC_OscConfig+0x24e>
 8002e8a:	e002      	b.n	8002e92 <HAL_RCC_OscConfig+0x2fe>
 8002e8c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 816f 	beq.w	8003180 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ea2:	4bd0      	ldr	r3, [pc, #832]	; (80031e4 <HAL_RCC_OscConfig+0x650>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002eae:	4bcd      	ldr	r3, [pc, #820]	; (80031e4 <HAL_RCC_OscConfig+0x650>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d16c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x400>
 8002eba:	4bca      	ldr	r3, [pc, #808]	; (80031e4 <HAL_RCC_OscConfig+0x650>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d166      	bne.n	8002f94 <HAL_RCC_OscConfig+0x400>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ed8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d102      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x362>
 8002ef0:	4bbc      	ldr	r3, [pc, #752]	; (80031e4 <HAL_RCC_OscConfig+0x650>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	e013      	b.n	8002f1e <HAL_RCC_OscConfig+0x38a>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f08:	2302      	movs	r3, #2
 8002f0a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f1a:	4bb2      	ldr	r3, [pc, #712]	; (80031e4 <HAL_RCC_OscConfig+0x650>)
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f24:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f28:	fa92 f2a2 	rbit	r2, r2
 8002f2c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f30:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f34:	fab2 f282 	clz	r2, r2
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	f042 0220 	orr.w	r2, r2, #32
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	f002 021f 	and.w	r2, r2, #31
 8002f44:	2101      	movs	r1, #1
 8002f46:	fa01 f202 	lsl.w	r2, r1, r2
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_RCC_OscConfig+0x3cc>
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d002      	beq.n	8002f60 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f000 bd1b 	b.w	8003996 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f60:	4ba0      	ldr	r3, [pc, #640]	; (80031e4 <HAL_RCC_OscConfig+0x650>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	21f8      	movs	r1, #248	; 0xf8
 8002f70:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f78:	fa91 f1a1 	rbit	r1, r1
 8002f7c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f80:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f84:	fab1 f181 	clz	r1, r1
 8002f88:	b2c9      	uxtb	r1, r1
 8002f8a:	408b      	lsls	r3, r1
 8002f8c:	4995      	ldr	r1, [pc, #596]	; (80031e4 <HAL_RCC_OscConfig+0x650>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	e0f5      	b.n	8003180 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8085 	beq.w	80030aa <HAL_RCC_OscConfig+0x516>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002fb2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2301      	movs	r3, #1
 8002fca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fd ffe4 	bl	8000f98 <HAL_GetTick>
 8002fd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd4:	e00a      	b.n	8002fec <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd6:	f7fd ffdf 	bl	8000f98 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d902      	bls.n	8002fec <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	f000 bcd5 	b.w	8003996 <HAL_RCC_OscConfig+0xe02>
 8002fec:	2302      	movs	r3, #2
 8002fee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002ffe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d102      	bne.n	800301c <HAL_RCC_OscConfig+0x488>
 8003016:	4b73      	ldr	r3, [pc, #460]	; (80031e4 <HAL_RCC_OscConfig+0x650>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	e013      	b.n	8003044 <HAL_RCC_OscConfig+0x4b0>
 800301c:	2302      	movs	r3, #2
 800301e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800302e:	2302      	movs	r3, #2
 8003030:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003034:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003040:	4b68      	ldr	r3, [pc, #416]	; (80031e4 <HAL_RCC_OscConfig+0x650>)
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	2202      	movs	r2, #2
 8003046:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800304a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800304e:	fa92 f2a2 	rbit	r2, r2
 8003052:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003056:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800305a:	fab2 f282 	clz	r2, r2
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	f042 0220 	orr.w	r2, r2, #32
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	f002 021f 	and.w	r2, r2, #31
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f202 	lsl.w	r2, r1, r2
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0af      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b5b      	ldr	r3, [pc, #364]	; (80031e4 <HAL_RCC_OscConfig+0x650>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	21f8      	movs	r1, #248	; 0xf8
 8003086:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800308e:	fa91 f1a1 	rbit	r1, r1
 8003092:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003096:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800309a:	fab1 f181 	clz	r1, r1
 800309e:	b2c9      	uxtb	r1, r1
 80030a0:	408b      	lsls	r3, r1
 80030a2:	4950      	ldr	r1, [pc, #320]	; (80031e4 <HAL_RCC_OscConfig+0x650>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]
 80030a8:	e06a      	b.n	8003180 <HAL_RCC_OscConfig+0x5ec>
 80030aa:	2301      	movs	r3, #1
 80030ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80030bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	461a      	mov	r2, r3
 80030d2:	2300      	movs	r3, #0
 80030d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fd ff5f 	bl	8000f98 <HAL_GetTick>
 80030da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e0:	f7fd ff5a 	bl	8000f98 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d902      	bls.n	80030f6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	f000 bc50 	b.w	8003996 <HAL_RCC_OscConfig+0xe02>
 80030f6:	2302      	movs	r3, #2
 80030f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d102      	bne.n	8003126 <HAL_RCC_OscConfig+0x592>
 8003120:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <HAL_RCC_OscConfig+0x650>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	e013      	b.n	800314e <HAL_RCC_OscConfig+0x5ba>
 8003126:	2302      	movs	r3, #2
 8003128:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003130:	fa93 f3a3 	rbit	r3, r3
 8003134:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003138:	2302      	movs	r3, #2
 800313a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800313e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800314a:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <HAL_RCC_OscConfig+0x650>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	2202      	movs	r2, #2
 8003150:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003154:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003158:	fa92 f2a2 	rbit	r2, r2
 800315c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003160:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003164:	fab2 f282 	clz	r2, r2
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	f042 0220 	orr.w	r2, r2, #32
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	f002 021f 	and.w	r2, r2, #31
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f202 	lsl.w	r2, r1, r2
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1af      	bne.n	80030e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003180:	1d3b      	adds	r3, r7, #4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 80da 	beq.w	8003344 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003190:	1d3b      	adds	r3, r7, #4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d069      	beq.n	800326e <HAL_RCC_OscConfig+0x6da>
 800319a:	2301      	movs	r3, #1
 800319c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80031ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_OscConfig+0x654>)
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	461a      	mov	r2, r3
 80031c0:	2301      	movs	r3, #1
 80031c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c4:	f7fd fee8 	bl	8000f98 <HAL_GetTick>
 80031c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031cc:	e00e      	b.n	80031ec <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ce:	f7fd fee3 	bl	8000f98 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d906      	bls.n	80031ec <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e3d9      	b.n	8003996 <HAL_RCC_OscConfig+0xe02>
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	10908120 	.word	0x10908120
 80031ec:	2302      	movs	r3, #2
 80031ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003202:	2202      	movs	r2, #2
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	fa93 f2a3 	rbit	r2, r3
 8003210:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800321a:	2202      	movs	r2, #2
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	fa93 f2a3 	rbit	r2, r3
 8003228:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800322c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	4ba5      	ldr	r3, [pc, #660]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 8003230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003232:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003236:	2102      	movs	r1, #2
 8003238:	6019      	str	r1, [r3, #0]
 800323a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	fa93 f1a3 	rbit	r1, r3
 8003244:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003248:	6019      	str	r1, [r3, #0]
  return result;
 800324a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	2101      	movs	r1, #1
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0b0      	beq.n	80031ce <HAL_RCC_OscConfig+0x63a>
 800326c:	e06a      	b.n	8003344 <HAL_RCC_OscConfig+0x7b0>
 800326e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	fa93 f2a3 	rbit	r2, r3
 8003280:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003284:	601a      	str	r2, [r3, #0]
  return result;
 8003286:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800328a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	4b8c      	ldr	r3, [pc, #560]	; (80034c8 <HAL_RCC_OscConfig+0x934>)
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	461a      	mov	r2, r3
 800329c:	2300      	movs	r3, #0
 800329e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a0:	f7fd fe7a 	bl	8000f98 <HAL_GetTick>
 80032a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a8:	e009      	b.n	80032be <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032aa:	f7fd fe75 	bl	8000f98 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e36b      	b.n	8003996 <HAL_RCC_OscConfig+0xe02>
 80032be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80032c2:	2202      	movs	r2, #2
 80032c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	fa93 f2a3 	rbit	r2, r3
 80032d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80032da:	2202      	movs	r2, #2
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	fa93 f2a3 	rbit	r2, r3
 80032e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032f2:	2202      	movs	r2, #2
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	fa93 f2a3 	rbit	r2, r3
 8003300:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003304:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003306:	4b6f      	ldr	r3, [pc, #444]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 8003308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800330a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800330e:	2102      	movs	r1, #2
 8003310:	6019      	str	r1, [r3, #0]
 8003312:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	fa93 f1a3 	rbit	r1, r3
 800331c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003320:	6019      	str	r1, [r3, #0]
  return result;
 8003322:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2101      	movs	r1, #1
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1b2      	bne.n	80032aa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8158 	beq.w	8003604 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003354:	2300      	movs	r3, #0
 8003356:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335a:	4b5a      	ldr	r3, [pc, #360]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d112      	bne.n	800338c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	4b57      	ldr	r3, [pc, #348]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003370:	61d3      	str	r3, [r2, #28]
 8003372:	4b54      	ldr	r3, [pc, #336]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800337a:	f107 0308 	add.w	r3, r7, #8
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f107 0308 	add.w	r3, r7, #8
 8003384:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	4b4f      	ldr	r3, [pc, #316]	; (80034cc <HAL_RCC_OscConfig+0x938>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d11a      	bne.n	80033ce <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003398:	4b4c      	ldr	r3, [pc, #304]	; (80034cc <HAL_RCC_OscConfig+0x938>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a4b      	ldr	r2, [pc, #300]	; (80034cc <HAL_RCC_OscConfig+0x938>)
 800339e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a4:	f7fd fdf8 	bl	8000f98 <HAL_GetTick>
 80033a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ac:	e009      	b.n	80033c2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ae:	f7fd fdf3 	bl	8000f98 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	; 0x64
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e2e9      	b.n	8003996 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c2:	4b42      	ldr	r3, [pc, #264]	; (80034cc <HAL_RCC_OscConfig+0x938>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0ef      	beq.n	80033ae <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d106      	bne.n	80033e6 <HAL_RCC_OscConfig+0x852>
 80033d8:	4b3a      	ldr	r3, [pc, #232]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4a39      	ldr	r2, [pc, #228]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	e02f      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10c      	bne.n	800340a <HAL_RCC_OscConfig+0x876>
 80033f0:	4b34      	ldr	r3, [pc, #208]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4a33      	ldr	r2, [pc, #204]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	6213      	str	r3, [r2, #32]
 80033fc:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4a30      	ldr	r2, [pc, #192]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 8003402:	f023 0304 	bic.w	r3, r3, #4
 8003406:	6213      	str	r3, [r2, #32]
 8003408:	e01d      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b05      	cmp	r3, #5
 8003412:	d10c      	bne.n	800342e <HAL_RCC_OscConfig+0x89a>
 8003414:	4b2b      	ldr	r3, [pc, #172]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a2a      	ldr	r2, [pc, #168]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	4b28      	ldr	r3, [pc, #160]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4a27      	ldr	r2, [pc, #156]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6213      	str	r3, [r2, #32]
 800342c:	e00b      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
 800342e:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a24      	ldr	r2, [pc, #144]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6213      	str	r3, [r2, #32]
 800343a:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d06b      	beq.n	8003528 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003450:	f7fd fda2 	bl	8000f98 <HAL_GetTick>
 8003454:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	e00b      	b.n	8003472 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fd fd9d 	bl	8000f98 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e291      	b.n	8003996 <HAL_RCC_OscConfig+0xe02>
 8003472:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003476:	2202      	movs	r2, #2
 8003478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	fa93 f2a3 	rbit	r2, r3
 8003484:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800348e:	2202      	movs	r2, #2
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	fa93 f2a3 	rbit	r2, r3
 800349c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034a0:	601a      	str	r2, [r3, #0]
  return result;
 80034a2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a8:	fab3 f383 	clz	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f043 0302 	orr.w	r3, r3, #2
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d109      	bne.n	80034d0 <HAL_RCC_OscConfig+0x93c>
 80034bc:	4b01      	ldr	r3, [pc, #4]	; (80034c4 <HAL_RCC_OscConfig+0x930>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	e014      	b.n	80034ec <HAL_RCC_OscConfig+0x958>
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
 80034c8:	10908120 	.word	0x10908120
 80034cc:	40007000 	.word	0x40007000
 80034d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80034d4:	2202      	movs	r2, #2
 80034d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	fa93 f2a3 	rbit	r2, r3
 80034e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	4bbb      	ldr	r3, [pc, #748]	; (80037d8 <HAL_RCC_OscConfig+0xc44>)
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034f0:	2102      	movs	r1, #2
 80034f2:	6011      	str	r1, [r2, #0]
 80034f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	fa92 f1a2 	rbit	r1, r2
 80034fe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003502:	6011      	str	r1, [r2, #0]
  return result;
 8003504:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	fab2 f282 	clz	r2, r2
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f002 021f 	and.w	r2, r2, #31
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f202 	lsl.w	r2, r1, r2
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d099      	beq.n	800345a <HAL_RCC_OscConfig+0x8c6>
 8003526:	e063      	b.n	80035f0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003528:	f7fd fd36 	bl	8000f98 <HAL_GetTick>
 800352c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003530:	e00b      	b.n	800354a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7fd fd31 	bl	8000f98 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e225      	b.n	8003996 <HAL_RCC_OscConfig+0xe02>
 800354a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800354e:	2202      	movs	r2, #2
 8003550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	fa93 f2a3 	rbit	r2, r3
 800355c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003566:	2202      	movs	r2, #2
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	fa93 f2a3 	rbit	r2, r3
 8003574:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003578:	601a      	str	r2, [r3, #0]
  return result;
 800357a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800357e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f043 0302 	orr.w	r3, r3, #2
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d102      	bne.n	800359a <HAL_RCC_OscConfig+0xa06>
 8003594:	4b90      	ldr	r3, [pc, #576]	; (80037d8 <HAL_RCC_OscConfig+0xc44>)
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	e00d      	b.n	80035b6 <HAL_RCC_OscConfig+0xa22>
 800359a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800359e:	2202      	movs	r2, #2
 80035a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	fa93 f2a3 	rbit	r2, r3
 80035ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	4b89      	ldr	r3, [pc, #548]	; (80037d8 <HAL_RCC_OscConfig+0xc44>)
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035ba:	2102      	movs	r1, #2
 80035bc:	6011      	str	r1, [r2, #0]
 80035be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	fa92 f1a2 	rbit	r1, r2
 80035c8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80035cc:	6011      	str	r1, [r2, #0]
  return result;
 80035ce:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	fab2 f282 	clz	r2, r2
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	f002 021f 	and.w	r2, r2, #31
 80035e4:	2101      	movs	r1, #1
 80035e6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1a0      	bne.n	8003532 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f8:	4b77      	ldr	r3, [pc, #476]	; (80037d8 <HAL_RCC_OscConfig+0xc44>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	4a76      	ldr	r2, [pc, #472]	; (80037d8 <HAL_RCC_OscConfig+0xc44>)
 80035fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003602:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003604:	1d3b      	adds	r3, r7, #4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 81c2 	beq.w	8003994 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003610:	4b71      	ldr	r3, [pc, #452]	; (80037d8 <HAL_RCC_OscConfig+0xc44>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b08      	cmp	r3, #8
 800361a:	f000 819c 	beq.w	8003956 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	2b02      	cmp	r3, #2
 8003626:	f040 8114 	bne.w	8003852 <HAL_RCC_OscConfig+0xcbe>
 800362a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800362e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	fa93 f2a3 	rbit	r2, r3
 800363e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003642:	601a      	str	r2, [r3, #0]
  return result;
 8003644:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003648:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	461a      	mov	r2, r3
 800365c:	2300      	movs	r3, #0
 800365e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fd fc9a 	bl	8000f98 <HAL_GetTick>
 8003664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003668:	e009      	b.n	800367e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366a:	f7fd fc95 	bl	8000f98 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e18b      	b.n	8003996 <HAL_RCC_OscConfig+0xe02>
 800367e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003682:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	fa93 f2a3 	rbit	r2, r3
 8003692:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003696:	601a      	str	r2, [r3, #0]
  return result;
 8003698:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800369c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d102      	bne.n	80036b8 <HAL_RCC_OscConfig+0xb24>
 80036b2:	4b49      	ldr	r3, [pc, #292]	; (80037d8 <HAL_RCC_OscConfig+0xc44>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	e01b      	b.n	80036f0 <HAL_RCC_OscConfig+0xb5c>
 80036b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fa93 f2a3 	rbit	r2, r3
 80036cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	fa93 f2a3 	rbit	r2, r3
 80036e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	4b3a      	ldr	r3, [pc, #232]	; (80037d8 <HAL_RCC_OscConfig+0xc44>)
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036f8:	6011      	str	r1, [r2, #0]
 80036fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	fa92 f1a2 	rbit	r1, r2
 8003704:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003708:	6011      	str	r1, [r2, #0]
  return result;
 800370a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f042 0220 	orr.w	r2, r2, #32
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f002 021f 	and.w	r2, r2, #31
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d19e      	bne.n	800366a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800372c:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <HAL_RCC_OscConfig+0xc44>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	430b      	orrs	r3, r1
 8003742:	4925      	ldr	r1, [pc, #148]	; (80037d8 <HAL_RCC_OscConfig+0xc44>)
 8003744:	4313      	orrs	r3, r2
 8003746:	604b      	str	r3, [r1, #4]
 8003748:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800374c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	fa93 f2a3 	rbit	r2, r3
 800375c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003760:	601a      	str	r2, [r3, #0]
  return result;
 8003762:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003766:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003768:	fab3 f383 	clz	r3, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003772:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	461a      	mov	r2, r3
 800377a:	2301      	movs	r3, #1
 800377c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fd fc0b 	bl	8000f98 <HAL_GetTick>
 8003782:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003786:	e009      	b.n	800379c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003788:	f7fd fc06 	bl	8000f98 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0fc      	b.n	8003996 <HAL_RCC_OscConfig+0xe02>
 800379c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	fa93 f2a3 	rbit	r2, r3
 80037b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037b4:	601a      	str	r2, [r3, #0]
  return result;
 80037b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <HAL_RCC_OscConfig+0xc48>
 80037d0:	4b01      	ldr	r3, [pc, #4]	; (80037d8 <HAL_RCC_OscConfig+0xc44>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	e01e      	b.n	8003814 <HAL_RCC_OscConfig+0xc80>
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000
 80037dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	fa93 f2a3 	rbit	r2, r3
 80037f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	fa93 f2a3 	rbit	r2, r3
 800380a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	4b63      	ldr	r3, [pc, #396]	; (80039a0 <HAL_RCC_OscConfig+0xe0c>)
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003818:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800381c:	6011      	str	r1, [r2, #0]
 800381e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	fa92 f1a2 	rbit	r1, r2
 8003828:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800382c:	6011      	str	r1, [r2, #0]
  return result;
 800382e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	fab2 f282 	clz	r2, r2
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	f042 0220 	orr.w	r2, r2, #32
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	f002 021f 	and.w	r2, r2, #31
 8003844:	2101      	movs	r1, #1
 8003846:	fa01 f202 	lsl.w	r2, r1, r2
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d09b      	beq.n	8003788 <HAL_RCC_OscConfig+0xbf4>
 8003850:	e0a0      	b.n	8003994 <HAL_RCC_OscConfig+0xe00>
 8003852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003856:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800385a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	fa93 f2a3 	rbit	r2, r3
 8003866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800386a:	601a      	str	r2, [r3, #0]
  return result;
 800386c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003870:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800387c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	461a      	mov	r2, r3
 8003884:	2300      	movs	r3, #0
 8003886:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fd fb86 	bl	8000f98 <HAL_GetTick>
 800388c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003890:	e009      	b.n	80038a6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003892:	f7fd fb81 	bl	8000f98 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e077      	b.n	8003996 <HAL_RCC_OscConfig+0xe02>
 80038a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	fa93 f2a3 	rbit	r2, r3
 80038ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038be:	601a      	str	r2, [r3, #0]
  return result;
 80038c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c6:	fab3 f383 	clz	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d102      	bne.n	80038e0 <HAL_RCC_OscConfig+0xd4c>
 80038da:	4b31      	ldr	r3, [pc, #196]	; (80039a0 <HAL_RCC_OscConfig+0xe0c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	e01b      	b.n	8003918 <HAL_RCC_OscConfig+0xd84>
 80038e0:	f107 0320 	add.w	r3, r7, #32
 80038e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	f107 0320 	add.w	r3, r7, #32
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	fa93 f2a3 	rbit	r2, r3
 80038f4:	f107 031c 	add.w	r3, r7, #28
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	f107 0318 	add.w	r3, r7, #24
 80038fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	f107 0318 	add.w	r3, r7, #24
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	fa93 f2a3 	rbit	r2, r3
 800390e:	f107 0314 	add.w	r3, r7, #20
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	4b22      	ldr	r3, [pc, #136]	; (80039a0 <HAL_RCC_OscConfig+0xe0c>)
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	f107 0210 	add.w	r2, r7, #16
 800391c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003920:	6011      	str	r1, [r2, #0]
 8003922:	f107 0210 	add.w	r2, r7, #16
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	fa92 f1a2 	rbit	r1, r2
 800392c:	f107 020c 	add.w	r2, r7, #12
 8003930:	6011      	str	r1, [r2, #0]
  return result;
 8003932:	f107 020c 	add.w	r2, r7, #12
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	fab2 f282 	clz	r2, r2
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	f042 0220 	orr.w	r2, r2, #32
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	f002 021f 	and.w	r2, r2, #31
 8003948:	2101      	movs	r1, #1
 800394a:	fa01 f202 	lsl.w	r2, r1, r2
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d19e      	bne.n	8003892 <HAL_RCC_OscConfig+0xcfe>
 8003954:	e01e      	b.n	8003994 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e018      	b.n	8003996 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_RCC_OscConfig+0xe0c>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800396c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003970:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	429a      	cmp	r2, r3
 800397c:	d108      	bne.n	8003990 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800397e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003982:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003986:	1d3b      	adds	r3, r7, #4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000

080039a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b09e      	sub	sp, #120	; 0x78
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e162      	b.n	8003c82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039bc:	4b90      	ldr	r3, [pc, #576]	; (8003c00 <HAL_RCC_ClockConfig+0x25c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d910      	bls.n	80039ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b8d      	ldr	r3, [pc, #564]	; (8003c00 <HAL_RCC_ClockConfig+0x25c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 0207 	bic.w	r2, r3, #7
 80039d2:	498b      	ldr	r1, [pc, #556]	; (8003c00 <HAL_RCC_ClockConfig+0x25c>)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b89      	ldr	r3, [pc, #548]	; (8003c00 <HAL_RCC_ClockConfig+0x25c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e14a      	b.n	8003c82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f8:	4b82      	ldr	r3, [pc, #520]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	497f      	ldr	r1, [pc, #508]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 80dc 	beq.w	8003bd0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d13c      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xf6>
 8003a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a28:	fa93 f3a3 	rbit	r3, r3
 8003a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a30:	fab3 f383 	clz	r3, r3
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d102      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xa6>
 8003a44:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	e00f      	b.n	8003a6a <HAL_RCC_ClockConfig+0xc6>
 8003a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	667b      	str	r3, [r7, #100]	; 0x64
 8003a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a66:	4b67      	ldr	r3, [pc, #412]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a72:	fa92 f2a2 	rbit	r2, r2
 8003a76:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a7a:	fab2 f282 	clz	r2, r2
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	f042 0220 	orr.w	r2, r2, #32
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	f002 021f 	and.w	r2, r2, #31
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d17b      	bne.n	8003b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e0f3      	b.n	8003c82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d13c      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x178>
 8003aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d102      	bne.n	8003acc <HAL_RCC_ClockConfig+0x128>
 8003ac6:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	e00f      	b.n	8003aec <HAL_RCC_ClockConfig+0x148>
 8003acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ad0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad4:	fa93 f3a3 	rbit	r3, r3
 8003ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8003ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ade:	643b      	str	r3, [r7, #64]	; 0x40
 8003ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae8:	4b46      	ldr	r3, [pc, #280]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003af0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003af4:	fa92 f2a2 	rbit	r2, r2
 8003af8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003afc:	fab2 f282 	clz	r2, r2
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	f042 0220 	orr.w	r2, r2, #32
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	f002 021f 	and.w	r2, r2, #31
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d13a      	bne.n	8003b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0b2      	b.n	8003c82 <HAL_RCC_ClockConfig+0x2de>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d102      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x1a0>
 8003b3e:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	e00d      	b.n	8003b60 <HAL_RCC_ClockConfig+0x1bc>
 8003b44:	2302      	movs	r3, #2
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	fa93 f3a3 	rbit	r3, r3
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b50:	2302      	movs	r3, #2
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	4b29      	ldr	r3, [pc, #164]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	2202      	movs	r2, #2
 8003b62:	61ba      	str	r2, [r7, #24]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	fa92 f2a2 	rbit	r2, r2
 8003b6a:	617a      	str	r2, [r7, #20]
  return result;
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	fab2 f282 	clz	r2, r2
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	f042 0220 	orr.w	r2, r2, #32
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	f002 021f 	and.w	r2, r2, #31
 8003b7e:	2101      	movs	r1, #1
 8003b80:	fa01 f202 	lsl.w	r2, r1, r2
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e079      	b.n	8003c82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f023 0203 	bic.w	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	491a      	ldr	r1, [pc, #104]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ba0:	f7fd f9fa 	bl	8000f98 <HAL_GetTick>
 8003ba4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba8:	f7fd f9f6 	bl	8000f98 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e061      	b.n	8003c82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 020c 	and.w	r2, r3, #12
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d1eb      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCC_ClockConfig+0x25c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d214      	bcs.n	8003c08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_RCC_ClockConfig+0x25c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 0207 	bic.w	r2, r3, #7
 8003be6:	4906      	ldr	r1, [pc, #24]	; (8003c00 <HAL_RCC_ClockConfig+0x25c>)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <HAL_RCC_ClockConfig+0x25c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e040      	b.n	8003c82 <HAL_RCC_ClockConfig+0x2de>
 8003c00:	40022000 	.word	0x40022000
 8003c04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <HAL_RCC_ClockConfig+0x2e8>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	491a      	ldr	r1, [pc, #104]	; (8003c8c <HAL_RCC_ClockConfig+0x2e8>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c32:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <HAL_RCC_ClockConfig+0x2e8>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4912      	ldr	r1, [pc, #72]	; (8003c8c <HAL_RCC_ClockConfig+0x2e8>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c46:	f000 f829 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003c4a:	4601      	mov	r1, r0
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <HAL_RCC_ClockConfig+0x2e8>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c54:	22f0      	movs	r2, #240	; 0xf0
 8003c56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	fa92 f2a2 	rbit	r2, r2
 8003c5e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	fab2 f282 	clz	r2, r2
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	40d3      	lsrs	r3, r2
 8003c6a:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <HAL_RCC_ClockConfig+0x2ec>)
 8003c6c:	5cd3      	ldrb	r3, [r2, r3]
 8003c6e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c72:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <HAL_RCC_ClockConfig+0x2f0>)
 8003c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c76:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <HAL_RCC_ClockConfig+0x2f4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fd f948 	bl	8000f10 <HAL_InitTick>
  
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3778      	adds	r7, #120	; 0x78
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	08004328 	.word	0x08004328
 8003c94:	20000010 	.word	0x20000010
 8003c98:	20000014 	.word	0x20000014

08003c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b08b      	sub	sp, #44	; 0x2c
 8003ca0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	2300      	movs	r3, #0
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003cb6:	4b29      	ldr	r3, [pc, #164]	; (8003d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d002      	beq.n	8003ccc <HAL_RCC_GetSysClockFreq+0x30>
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d003      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x36>
 8003cca:	e03c      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ccc:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cce:	623b      	str	r3, [r7, #32]
      break;
 8003cd0:	e03c      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003cd8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003cdc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	fa92 f2a2 	rbit	r2, r2
 8003ce4:	607a      	str	r2, [r7, #4]
  return result;
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	fab2 f282 	clz	r2, r2
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	40d3      	lsrs	r3, r2
 8003cf0:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cf2:	5cd3      	ldrb	r3, [r2, r3]
 8003cf4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cf6:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	220f      	movs	r2, #15
 8003d00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	fa92 f2a2 	rbit	r2, r2
 8003d08:	60fa      	str	r2, [r7, #12]
  return result;
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	fab2 f282 	clz	r2, r2
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	40d3      	lsrs	r3, r2
 8003d14:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d16:	5cd3      	ldrb	r3, [r2, r3]
 8003d18:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d24:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
 8003d34:	e004      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	4a0c      	ldr	r2, [pc, #48]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	623b      	str	r3, [r7, #32]
      break;
 8003d44:	e002      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d48:	623b      	str	r3, [r7, #32]
      break;
 8003d4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	372c      	adds	r7, #44	; 0x2c
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	007a1200 	.word	0x007a1200
 8003d64:	08004338 	.word	0x08004338
 8003d68:	08004348 	.word	0x08004348
 8003d6c:	003d0900 	.word	0x003d0900

08003d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b092      	sub	sp, #72	; 0x48
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80d7 	beq.w	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d94:	4b4e      	ldr	r3, [pc, #312]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10e      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da0:	4b4b      	ldr	r3, [pc, #300]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	4a4a      	ldr	r2, [pc, #296]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003daa:	61d3      	str	r3, [r2, #28]
 8003dac:	4b48      	ldr	r3, [pc, #288]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	4b45      	ldr	r3, [pc, #276]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d118      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dca:	4b42      	ldr	r3, [pc, #264]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a41      	ldr	r2, [pc, #260]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd f8df 	bl	8000f98 <HAL_GetTick>
 8003dda:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	e008      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dde:	f7fd f8db 	bl	8000f98 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b64      	cmp	r3, #100	; 0x64
 8003dea:	d901      	bls.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e169      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	4b38      	ldr	r3, [pc, #224]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dfc:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e04:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 8084 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d07c      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e1c:	4b2c      	ldr	r3, [pc, #176]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b26      	ldr	r3, [pc, #152]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	461a      	mov	r2, r3
 8003e46:	2301      	movs	r3, #1
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e52:	fa93 f3a3 	rbit	r3, r3
 8003e56:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e6e:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e72:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d04b      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7e:	f7fd f88b 	bl	8000f98 <HAL_GetTick>
 8003e82:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fd f887 	bl	8000f98 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e113      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	fa93 f3a3 	rbit	r3, r3
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	623b      	str	r3, [r7, #32]
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	fa93 f3a3 	rbit	r3, r3
 8003eb2:	61fb      	str	r3, [r7, #28]
  return result;
 8003eb4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f043 0302 	orr.w	r3, r3, #2
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d108      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003eca:	4b01      	ldr	r3, [pc, #4]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	e00d      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40007000 	.word	0x40007000
 8003ed8:	10908100 	.word	0x10908100
 8003edc:	2302      	movs	r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	4b78      	ldr	r3, [pc, #480]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	2202      	movs	r2, #2
 8003eee:	613a      	str	r2, [r7, #16]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	fa92 f2a2 	rbit	r2, r2
 8003ef6:	60fa      	str	r2, [r7, #12]
  return result;
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	fab2 f282 	clz	r2, r2
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	f002 021f 	and.w	r2, r2, #31
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0b7      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f16:	4b6d      	ldr	r3, [pc, #436]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	496a      	ldr	r1, [pc, #424]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f30:	4b66      	ldr	r3, [pc, #408]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	4a65      	ldr	r2, [pc, #404]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f48:	4b60      	ldr	r3, [pc, #384]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	f023 0203 	bic.w	r2, r3, #3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	495d      	ldr	r1, [pc, #372]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f66:	4b59      	ldr	r3, [pc, #356]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	4956      	ldr	r1, [pc, #344]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f84:	4b51      	ldr	r3, [pc, #324]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	494e      	ldr	r1, [pc, #312]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d008      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fa2:	4b4a      	ldr	r3, [pc, #296]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	f023 0210 	bic.w	r2, r3, #16
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	4947      	ldr	r1, [pc, #284]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003fc0:	4b42      	ldr	r3, [pc, #264]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	493f      	ldr	r1, [pc, #252]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d008      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fde:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	f023 0220 	bic.w	r2, r3, #32
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4938      	ldr	r1, [pc, #224]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ffc:	4b33      	ldr	r3, [pc, #204]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	4930      	ldr	r1, [pc, #192]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800400a:	4313      	orrs	r3, r2
 800400c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800401a:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	4929      	ldr	r1, [pc, #164]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004028:	4313      	orrs	r3, r2
 800402a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004038:	4b24      	ldr	r3, [pc, #144]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	4921      	ldr	r1, [pc, #132]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004046:	4313      	orrs	r3, r2
 8004048:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004052:	2b00      	cmp	r3, #0
 8004054:	d008      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	491a      	ldr	r1, [pc, #104]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004064:	4313      	orrs	r3, r2
 8004066:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004074:	4b15      	ldr	r3, [pc, #84]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004080:	4912      	ldr	r1, [pc, #72]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004082:	4313      	orrs	r3, r2
 8004084:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	490b      	ldr	r1, [pc, #44]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040bc:	4903      	ldr	r1, [pc, #12]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3748      	adds	r7, #72	; 0x48
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000

080040d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e084      	b.n	80041ec <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d106      	bne.n	8004102 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7fc fdfd 	bl	8000cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2202      	movs	r2, #2
 8004106:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004118:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004122:	d902      	bls.n	800412a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e002      	b.n	8004130 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800412a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800412e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004138:	d007      	beq.n	800414a <HAL_SPI_Init+0x7a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004142:	d002      	beq.n	800414a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800415a:	d903      	bls.n	8004164 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
 8004162:	e002      	b.n	800416a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	ea42 0103 	orr.w	r1, r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	0c1b      	lsrs	r3, r3, #16
 80041aa:	f003 0204 	and.w	r2, r3, #4
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	ea42 0103 	orr.w	r1, r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69da      	ldr	r2, [r3, #28]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004200:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004208:	b29a      	uxth	r2, r3
 800420a:	89fb      	ldrh	r3, [r7, #14]
 800420c:	4313      	orrs	r3, r2
 800420e:	b29a      	uxth	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800422c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004230:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004238:	b29b      	uxth	r3, r3
 800423a:	b21a      	sxth	r2, r3
 800423c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004240:	43db      	mvns	r3, r3
 8004242:	b21b      	sxth	r3, r3
 8004244:	4013      	ands	r3, r2
 8004246:	b21b      	sxth	r3, r3
 8004248:	b29a      	uxth	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800425e:	b084      	sub	sp, #16
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	f107 0014 	add.w	r0, r7, #20
 800426c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ffaf 	bl	80041f4 <USB_EnableGlobalInt>

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042a2:	b004      	add	sp, #16
 80042a4:	4770      	bx	lr
	...

080042a8 <__libc_init_array>:
 80042a8:	b570      	push	{r4, r5, r6, lr}
 80042aa:	4e0d      	ldr	r6, [pc, #52]	; (80042e0 <__libc_init_array+0x38>)
 80042ac:	4c0d      	ldr	r4, [pc, #52]	; (80042e4 <__libc_init_array+0x3c>)
 80042ae:	1ba4      	subs	r4, r4, r6
 80042b0:	10a4      	asrs	r4, r4, #2
 80042b2:	2500      	movs	r5, #0
 80042b4:	42a5      	cmp	r5, r4
 80042b6:	d109      	bne.n	80042cc <__libc_init_array+0x24>
 80042b8:	4e0b      	ldr	r6, [pc, #44]	; (80042e8 <__libc_init_array+0x40>)
 80042ba:	4c0c      	ldr	r4, [pc, #48]	; (80042ec <__libc_init_array+0x44>)
 80042bc:	f000 f820 	bl	8004300 <_init>
 80042c0:	1ba4      	subs	r4, r4, r6
 80042c2:	10a4      	asrs	r4, r4, #2
 80042c4:	2500      	movs	r5, #0
 80042c6:	42a5      	cmp	r5, r4
 80042c8:	d105      	bne.n	80042d6 <__libc_init_array+0x2e>
 80042ca:	bd70      	pop	{r4, r5, r6, pc}
 80042cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042d0:	4798      	blx	r3
 80042d2:	3501      	adds	r5, #1
 80042d4:	e7ee      	b.n	80042b4 <__libc_init_array+0xc>
 80042d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042da:	4798      	blx	r3
 80042dc:	3501      	adds	r5, #1
 80042de:	e7f2      	b.n	80042c6 <__libc_init_array+0x1e>
 80042e0:	08004358 	.word	0x08004358
 80042e4:	08004358 	.word	0x08004358
 80042e8:	08004358 	.word	0x08004358
 80042ec:	0800435c 	.word	0x0800435c

080042f0 <memset>:
 80042f0:	4402      	add	r2, r0
 80042f2:	4603      	mov	r3, r0
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d100      	bne.n	80042fa <memset+0xa>
 80042f8:	4770      	bx	lr
 80042fa:	f803 1b01 	strb.w	r1, [r3], #1
 80042fe:	e7f9      	b.n	80042f4 <memset+0x4>

08004300 <_init>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	bf00      	nop
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr

0800430c <_fini>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	bf00      	nop
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr
