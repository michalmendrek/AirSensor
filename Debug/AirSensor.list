
AirSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004334  08004334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800437c  0800437c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800437c  0800437c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800437c  0800437c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000001c  080043a0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080043a0  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093bb  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000167b  00000000  00000000  00029407  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000800  00000000  00000000  0002aa88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000738  00000000  00000000  0002b288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000199dc  00000000  00000000  0002b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008086  00000000  00000000  0004539c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098903  00000000  00000000  0004d422  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5d25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fa4  00000000  00000000  000e5da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800431c 	.word	0x0800431c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	0800431c 	.word	0x0800431c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fd44 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f819 	bl	8000206 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f972 	bl	80004bc <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f872 	bl	80002c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001dc:	f000 f8e0 	bl	80003a0 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 80001e0:	f000 f93c 	bl	800045c <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //GetMeasurements();
	  if(GPIOA->IDR & (1<<0))
 80001e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e8:	691b      	ldr	r3, [r3, #16]
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d003      	beq.n	80001fa <main+0x32>
	  {
	  Calibrate(1);
 80001f2:	2001      	movs	r0, #1
 80001f4:	f000 fb2c 	bl	8000850 <Calibrate>
 80001f8:	e7f4      	b.n	80001e4 <main+0x1c>
	  } else
	  {
		  Calibrate(0);
 80001fa:	2000      	movs	r0, #0
 80001fc:	f000 fb28 	bl	8000850 <Calibrate>
		  GetMeasurements();
 8000200:	f000 fa6c 	bl	80006dc <GetMeasurements>
	  if(GPIOA->IDR & (1<<0))
 8000204:	e7ee      	b.n	80001e4 <main+0x1c>

08000206 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000206:	b580      	push	{r7, lr}
 8000208:	b09e      	sub	sp, #120	; 0x78
 800020a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000210:	2228      	movs	r2, #40	; 0x28
 8000212:	2100      	movs	r1, #0
 8000214:	4618      	mov	r0, r3
 8000216:	f004 f879 	bl	800430c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022a:	463b      	mov	r3, r7
 800022c:	223c      	movs	r2, #60	; 0x3c
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f004 f86b 	bl	800430c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000236:	2301      	movs	r3, #1
 8000238:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800023a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800023e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000248:	2302      	movs	r3, #2
 800024a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000252:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000256:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800025c:	4618      	mov	r0, r3
 800025e:	f002 f979 	bl	8002554 <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000268:	f000 f9dc 	bl	8000624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000270:	2302      	movs	r3, #2
 8000272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000282:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000286:	2101      	movs	r1, #1
 8000288:	4618      	mov	r0, r3
 800028a:	f003 f86b 	bl	8003364 <HAL_RCC_ClockConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000294:	f000 f9c6 	bl	8000624 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000298:	2382      	movs	r3, #130	; 0x82
 800029a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a6:	463b      	mov	r3, r7
 80002a8:	4618      	mov	r0, r3
 80002aa:	f003 fa91 	bl	80037d0 <HAL_RCCEx_PeriphCLKConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002b4:	f000 f9b6 	bl	8000624 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3778      	adds	r7, #120	; 0x78
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	; 0x28
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002c6:	f107 031c 	add.w	r3, r7, #28
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
 80002e0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002e2:	4b2e      	ldr	r3, [pc, #184]	; (800039c <MX_ADC1_Init+0xdc>)
 80002e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002ea:	4b2c      	ldr	r3, [pc, #176]	; (800039c <MX_ADC1_Init+0xdc>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002f0:	4b2a      	ldr	r3, [pc, #168]	; (800039c <MX_ADC1_Init+0xdc>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002f6:	4b29      	ldr	r3, [pc, #164]	; (800039c <MX_ADC1_Init+0xdc>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002fc:	4b27      	ldr	r3, [pc, #156]	; (800039c <MX_ADC1_Init+0xdc>)
 80002fe:	2200      	movs	r2, #0
 8000300:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000302:	4b26      	ldr	r3, [pc, #152]	; (800039c <MX_ADC1_Init+0xdc>)
 8000304:	2200      	movs	r2, #0
 8000306:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <MX_ADC1_Init+0xdc>)
 800030c:	2200      	movs	r2, #0
 800030e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000310:	4b22      	ldr	r3, [pc, #136]	; (800039c <MX_ADC1_Init+0xdc>)
 8000312:	2201      	movs	r2, #1
 8000314:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000316:	4b21      	ldr	r3, [pc, #132]	; (800039c <MX_ADC1_Init+0xdc>)
 8000318:	2200      	movs	r2, #0
 800031a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800031c:	4b1f      	ldr	r3, [pc, #124]	; (800039c <MX_ADC1_Init+0xdc>)
 800031e:	2201      	movs	r2, #1
 8000320:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000322:	4b1e      	ldr	r3, [pc, #120]	; (800039c <MX_ADC1_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800032a:	4b1c      	ldr	r3, [pc, #112]	; (800039c <MX_ADC1_Init+0xdc>)
 800032c:	2204      	movs	r2, #4
 800032e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000330:	4b1a      	ldr	r3, [pc, #104]	; (800039c <MX_ADC1_Init+0xdc>)
 8000332:	2200      	movs	r2, #0
 8000334:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000336:	4b19      	ldr	r3, [pc, #100]	; (800039c <MX_ADC1_Init+0xdc>)
 8000338:	2201      	movs	r2, #1
 800033a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800033c:	4817      	ldr	r0, [pc, #92]	; (800039c <MX_ADC1_Init+0xdc>)
 800033e:	f000 fd13 	bl	8000d68 <HAL_ADC_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000348:	f000 f96c 	bl	8000624 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800034c:	2300      	movs	r3, #0
 800034e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000350:	f107 031c 	add.w	r3, r7, #28
 8000354:	4619      	mov	r1, r3
 8000356:	4811      	ldr	r0, [pc, #68]	; (800039c <MX_ADC1_Init+0xdc>)
 8000358:	f001 fc26 	bl	8001ba8 <HAL_ADCEx_MultiModeConfigChannel>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000362:	f000 f95f 	bl	8000624 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000366:	2302      	movs	r3, #2
 8000368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800036a:	2301      	movs	r3, #1
 800036c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000376:	2300      	movs	r3, #0
 8000378:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4619      	mov	r1, r3
 8000382:	4806      	ldr	r0, [pc, #24]	; (800039c <MX_ADC1_Init+0xdc>)
 8000384:	f001 f924 	bl	80015d0 <HAL_ADC_ConfigChannel>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800038e:	f000 f949 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	3728      	adds	r7, #40	; 0x28
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	200000a4 	.word	0x200000a4

080003a0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003a6:	463b      	mov	r3, r7
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
 80003b4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80003b6:	4b27      	ldr	r3, [pc, #156]	; (8000454 <MX_ADC2_Init+0xb4>)
 80003b8:	4a27      	ldr	r2, [pc, #156]	; (8000458 <MX_ADC2_Init+0xb8>)
 80003ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003bc:	4b25      	ldr	r3, [pc, #148]	; (8000454 <MX_ADC2_Init+0xb4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003c2:	4b24      	ldr	r3, [pc, #144]	; (8000454 <MX_ADC2_Init+0xb4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c8:	4b22      	ldr	r3, [pc, #136]	; (8000454 <MX_ADC2_Init+0xb4>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003ce:	4b21      	ldr	r3, [pc, #132]	; (8000454 <MX_ADC2_Init+0xb4>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003d4:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <MX_ADC2_Init+0xb4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003dc:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <MX_ADC2_Init+0xb4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e2:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MX_ADC2_Init+0xb4>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <MX_ADC2_Init+0xb4>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80003ee:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_ADC2_Init+0xb4>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <MX_ADC2_Init+0xb4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <MX_ADC2_Init+0xb4>)
 80003fe:	2204      	movs	r2, #4
 8000400:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_ADC2_Init+0xb4>)
 8000404:	2200      	movs	r2, #0
 8000406:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_ADC2_Init+0xb4>)
 800040a:	2200      	movs	r2, #0
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800040e:	4811      	ldr	r0, [pc, #68]	; (8000454 <MX_ADC2_Init+0xb4>)
 8000410:	f000 fcaa 	bl	8000d68 <HAL_ADC_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800041a:	f000 f903 	bl	8000624 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800041e:	2305      	movs	r3, #5
 8000420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000422:	2301      	movs	r3, #1
 8000424:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800042a:	2300      	movs	r3, #0
 800042c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000436:	463b      	mov	r3, r7
 8000438:	4619      	mov	r1, r3
 800043a:	4806      	ldr	r0, [pc, #24]	; (8000454 <MX_ADC2_Init+0xb4>)
 800043c:	f001 f8c8 	bl	80015d0 <HAL_ADC_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000446:	f000 f8ed 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	3718      	adds	r7, #24
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000054 	.word	0x20000054
 8000458:	50000100 	.word	0x50000100

0800045c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000462:	4a15      	ldr	r2, [pc, #84]	; (80004b8 <MX_USART2_UART_Init+0x5c>)
 8000464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800046c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800046e:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000482:	220c      	movs	r2, #12
 8000484:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 80004a0:	f003 fb46 	bl	8003b30 <HAL_UART_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004aa:	f000 f8bb 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200000f4 	.word	0x200000f4
 80004b8:	40004400 	.word	0x40004400

080004bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08a      	sub	sp, #40	; 0x28
 80004c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004d2:	4b50      	ldr	r3, [pc, #320]	; (8000614 <MX_GPIO_Init+0x158>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a4f      	ldr	r2, [pc, #316]	; (8000614 <MX_GPIO_Init+0x158>)
 80004d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b4d      	ldr	r3, [pc, #308]	; (8000614 <MX_GPIO_Init+0x158>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	4b4a      	ldr	r3, [pc, #296]	; (8000614 <MX_GPIO_Init+0x158>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a49      	ldr	r2, [pc, #292]	; (8000614 <MX_GPIO_Init+0x158>)
 80004f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b47      	ldr	r3, [pc, #284]	; (8000614 <MX_GPIO_Init+0x158>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000502:	4b44      	ldr	r3, [pc, #272]	; (8000614 <MX_GPIO_Init+0x158>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a43      	ldr	r2, [pc, #268]	; (8000614 <MX_GPIO_Init+0x158>)
 8000508:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b41      	ldr	r3, [pc, #260]	; (8000614 <MX_GPIO_Init+0x158>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b3e      	ldr	r3, [pc, #248]	; (8000614 <MX_GPIO_Init+0x158>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a3d      	ldr	r2, [pc, #244]	; (8000614 <MX_GPIO_Init+0x158>)
 8000520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b3b      	ldr	r3, [pc, #236]	; (8000614 <MX_GPIO_Init+0x158>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	4b38      	ldr	r3, [pc, #224]	; (8000614 <MX_GPIO_Init+0x158>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a37      	ldr	r2, [pc, #220]	; (8000614 <MX_GPIO_Init+0x158>)
 8000538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b35      	ldr	r3, [pc, #212]	; (8000614 <MX_GPIO_Init+0x158>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800054a:	2200      	movs	r2, #0
 800054c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000550:	4831      	ldr	r0, [pc, #196]	; (8000618 <MX_GPIO_Init+0x15c>)
 8000552:	f001 ffe7 	bl	8002524 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 8000556:	2337      	movs	r3, #55	; 0x37
 8000558:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800055a:	4b30      	ldr	r3, [pc, #192]	; (800061c <MX_GPIO_Init+0x160>)
 800055c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4619      	mov	r1, r3
 8000568:	482b      	ldr	r0, [pc, #172]	; (8000618 <MX_GPIO_Init+0x15c>)
 800056a:	f001 fe61 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800056e:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000572:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000574:	2301      	movs	r3, #1
 8000576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057c:	2300      	movs	r3, #0
 800057e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4619      	mov	r1, r3
 8000586:	4824      	ldr	r0, [pc, #144]	; (8000618 <MX_GPIO_Init+0x15c>)
 8000588:	f001 fe52 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058c:	2301      	movs	r3, #1
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4619      	mov	r1, r3
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f001 fe45 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80005a6:	23e0      	movs	r3, #224	; 0xe0
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b2:	2303      	movs	r3, #3
 80005b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005b6:	2305      	movs	r3, #5
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f001 fe34 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80005c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d6:	2303      	movs	r3, #3
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80005da:	230e      	movs	r3, #14
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e8:	f001 fe22 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80005ec:	23c0      	movs	r3, #192	; 0xc0
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f0:	2312      	movs	r3, #18
 80005f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f8:	2303      	movs	r3, #3
 80005fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005fc:	2304      	movs	r3, #4
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <MX_GPIO_Init+0x164>)
 8000608:	f001 fe12 	bl	8002230 <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	; 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	48001000 	.word	0x48001000
 800061c:	10120000 	.word	0x10120000
 8000620:	48000400 	.word	0x48000400

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <DisplayAir>:
static uint16_t CO[4]={LD7_Pin,LD9_Pin,LD5_Pin,LD10_Pin};
static uint32_t ADC_3_INITIAL=0;
static uint32_t ADC_2_INITIAL=0;

void DisplayAir(QualityState State)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	int i=0;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
		for(i=0;i<4;i++)
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	e00b      	b.n	8000660 <DisplayAir+0x2c>
		{
			HAL_GPIO_WritePin(GPIOE,AIR[i],GPIO_PIN_RESET);
 8000648:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <DisplayAir+0x4c>)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000650:	2200      	movs	r2, #0
 8000652:	4619      	mov	r1, r3
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <DisplayAir+0x50>)
 8000656:	f001 ff65 	bl	8002524 <HAL_GPIO_WritePin>
		for(i=0;i<4;i++)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b03      	cmp	r3, #3
 8000664:	ddf0      	ble.n	8000648 <DisplayAir+0x14>
		}
	HAL_GPIO_WritePin(GPIOE,AIR[State],GPIO_PIN_SET);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4a05      	ldr	r2, [pc, #20]	; (8000680 <DisplayAir+0x4c>)
 800066a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800066e:	2201      	movs	r2, #1
 8000670:	4619      	mov	r1, r3
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <DisplayAir+0x50>)
 8000674:	f001 ff56 	bl	8002524 <HAL_GPIO_WritePin>
}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000000 	.word	0x20000000
 8000684:	48001000 	.word	0x48001000

08000688 <DisplayCO>:

void DisplayCO(QualityState State)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	int i=0;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
	for(i=0;i<4;i++)
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e00b      	b.n	80006b4 <DisplayCO+0x2c>
	{
		HAL_GPIO_WritePin(GPIOE,CO[i],GPIO_PIN_RESET);
 800069c:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <DisplayCO+0x4c>)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a4:	2200      	movs	r2, #0
 80006a6:	4619      	mov	r1, r3
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <DisplayCO+0x50>)
 80006aa:	f001 ff3b 	bl	8002524 <HAL_GPIO_WritePin>
	for(i=0;i<4;i++)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3301      	adds	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	ddf0      	ble.n	800069c <DisplayCO+0x14>
	}
	HAL_GPIO_WritePin(GPIOE,CO[State],GPIO_PIN_SET);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <DisplayCO+0x4c>)
 80006be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c2:	2201      	movs	r2, #1
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	; (80006d8 <DisplayCO+0x50>)
 80006c8:	f001 ff2c 	bl	8002524 <HAL_GPIO_WritePin>
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000008 	.word	0x20000008
 80006d8:	48001000 	.word	0x48001000

080006dc <GetMeasurements>:


void GetMeasurements(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	extern ADC_HandleTypeDef hadc1;
	extern ADC_HandleTypeDef hadc2;

	static uint16_t adc_2=0, adc_3=0;
	HAL_ADC_Start(&hadc1);
 80006e0:	4855      	ldr	r0, [pc, #340]	; (8000838 <GetMeasurements+0x15c>)
 80006e2:	f000 fd21 	bl	8001128 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80006e6:	2164      	movs	r1, #100	; 0x64
 80006e8:	4853      	ldr	r0, [pc, #332]	; (8000838 <GetMeasurements+0x15c>)
 80006ea:	f000 fe69 	bl	80013c0 <HAL_ADC_PollForConversion>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d145      	bne.n	8000780 <GetMeasurements+0xa4>
	{
		adc_2=HAL_ADC_GetValue(&hadc1);
 80006f4:	4850      	ldr	r0, [pc, #320]	; (8000838 <GetMeasurements+0x15c>)
 80006f6:	f000 ff5d 	bl	80015b4 <HAL_ADC_GetValue>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b4f      	ldr	r3, [pc, #316]	; (800083c <GetMeasurements+0x160>)
 8000700:	801a      	strh	r2, [r3, #0]
		if(adc_2>ADC_2_INITIAL+600)DisplayAir(Red);
 8000702:	4b4e      	ldr	r3, [pc, #312]	; (800083c <GetMeasurements+0x160>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	4b4d      	ldr	r3, [pc, #308]	; (8000840 <GetMeasurements+0x164>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000710:	429a      	cmp	r2, r3
 8000712:	d902      	bls.n	800071a <GetMeasurements+0x3e>
 8000714:	2003      	movs	r0, #3
 8000716:	f7ff ff8d 	bl	8000634 <DisplayAir>
		if(adc_2<ADC_2_INITIAL+400 && adc_2 >ADC_2_INITIAL+300)DisplayAir(Orange);
 800071a:	4b48      	ldr	r3, [pc, #288]	; (800083c <GetMeasurements+0x160>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	4b47      	ldr	r3, [pc, #284]	; (8000840 <GetMeasurements+0x164>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000728:	429a      	cmp	r2, r3
 800072a:	d20b      	bcs.n	8000744 <GetMeasurements+0x68>
 800072c:	4b43      	ldr	r3, [pc, #268]	; (800083c <GetMeasurements+0x160>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b43      	ldr	r3, [pc, #268]	; (8000840 <GetMeasurements+0x164>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800073a:	429a      	cmp	r2, r3
 800073c:	d902      	bls.n	8000744 <GetMeasurements+0x68>
 800073e:	2002      	movs	r0, #2
 8000740:	f7ff ff78 	bl	8000634 <DisplayAir>
		if(adc_2<ADC_2_INITIAL+300 && adc_2 >ADC_2_INITIAL+100) DisplayAir(Blue);
 8000744:	4b3d      	ldr	r3, [pc, #244]	; (800083c <GetMeasurements+0x160>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <GetMeasurements+0x164>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000752:	429a      	cmp	r2, r3
 8000754:	d20a      	bcs.n	800076c <GetMeasurements+0x90>
 8000756:	4b39      	ldr	r3, [pc, #228]	; (800083c <GetMeasurements+0x160>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b38      	ldr	r3, [pc, #224]	; (8000840 <GetMeasurements+0x164>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3364      	adds	r3, #100	; 0x64
 8000762:	429a      	cmp	r2, r3
 8000764:	d902      	bls.n	800076c <GetMeasurements+0x90>
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff ff64 	bl	8000634 <DisplayAir>
		if(adc_2<=ADC_2_INITIAL) DisplayAir(Green);
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <GetMeasurements+0x160>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b33      	ldr	r3, [pc, #204]	; (8000840 <GetMeasurements+0x164>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	429a      	cmp	r2, r3
 8000778:	d802      	bhi.n	8000780 <GetMeasurements+0xa4>
 800077a:	2000      	movs	r0, #0
 800077c:	f7ff ff5a 	bl	8000634 <DisplayAir>

	}

	HAL_ADC_Start(&hadc2);
 8000780:	4830      	ldr	r0, [pc, #192]	; (8000844 <GetMeasurements+0x168>)
 8000782:	f000 fcd1 	bl	8001128 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK)
 8000786:	2164      	movs	r1, #100	; 0x64
 8000788:	482e      	ldr	r0, [pc, #184]	; (8000844 <GetMeasurements+0x168>)
 800078a:	f000 fe19 	bl	80013c0 <HAL_ADC_PollForConversion>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d146      	bne.n	8000822 <GetMeasurements+0x146>
		{
	    adc_3=HAL_ADC_GetValue(&hadc2);
 8000794:	482b      	ldr	r0, [pc, #172]	; (8000844 <GetMeasurements+0x168>)
 8000796:	f000 ff0d 	bl	80015b4 <HAL_ADC_GetValue>
 800079a:	4603      	mov	r3, r0
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <GetMeasurements+0x16c>)
 80007a0:	801a      	strh	r2, [r3, #0]
	    if(adc_3>ADC_3_INITIAL+500)DisplayCO(Red);
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <GetMeasurements+0x16c>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <GetMeasurements+0x170>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d902      	bls.n	80007ba <GetMeasurements+0xde>
 80007b4:	2003      	movs	r0, #3
 80007b6:	f7ff ff67 	bl	8000688 <DisplayCO>
		if(adc_3<ADC_3_INITIAL+500 && adc_3 > ADC_3_INITIAL+400)DisplayCO(Orange);
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <GetMeasurements+0x16c>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <GetMeasurements+0x170>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d20b      	bcs.n	80007e4 <GetMeasurements+0x108>
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <GetMeasurements+0x16c>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <GetMeasurements+0x170>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80007da:	429a      	cmp	r2, r3
 80007dc:	d902      	bls.n	80007e4 <GetMeasurements+0x108>
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff ff52 	bl	8000688 <DisplayCO>
	    if(adc_3<ADC_3_INITIAL+400 && adc_3 > ADC_3_INITIAL+300) DisplayCO(Blue);
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <GetMeasurements+0x16c>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <GetMeasurements+0x170>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d20b      	bcs.n	800080e <GetMeasurements+0x132>
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <GetMeasurements+0x16c>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <GetMeasurements+0x170>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000804:	429a      	cmp	r2, r3
 8000806:	d902      	bls.n	800080e <GetMeasurements+0x132>
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff ff3d 	bl	8000688 <DisplayCO>
	    if(adc_3<=ADC_3_INITIAL) DisplayCO(Green);
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <GetMeasurements+0x16c>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <GetMeasurements+0x170>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	d802      	bhi.n	8000822 <GetMeasurements+0x146>
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff ff33 	bl	8000688 <DisplayCO>
		}
	HAL_Delay (200);
 8000822:	20c8      	movs	r0, #200	; 0xc8
 8000824:	f000 fa7e 	bl	8000d24 <HAL_Delay>
	HAL_ADC_Stop (&hadc1);
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <GetMeasurements+0x15c>)
 800082a:	f000 fd93 	bl	8001354 <HAL_ADC_Stop>
	HAL_ADC_Stop (&hadc2);
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <GetMeasurements+0x168>)
 8000830:	f000 fd90 	bl	8001354 <HAL_ADC_Stop>

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000a4 	.word	0x200000a4
 800083c:	20000040 	.word	0x20000040
 8000840:	2000003c 	.word	0x2000003c
 8000844:	20000054 	.word	0x20000054
 8000848:	20000042 	.word	0x20000042
 800084c:	20000038 	.word	0x20000038

08000850 <Calibrate>:

void Calibrate(int val)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b087      	sub	sp, #28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	static int i=0;
	static int j=0;
	static int state=0;
	extern ADC_HandleTypeDef hadc1;
	extern ADC_HandleTypeDef hadc2;
	uint16_t Leds[8]={LD4_Pin,LD3_Pin,LD5_Pin,LD7_Pin,LD9_Pin,LD10_Pin,LD8_Pin,LD6_Pin};
 8000858:	4b4c      	ldr	r3, [pc, #304]	; (800098c <Calibrate+0x13c>)
 800085a:	f107 0408 	add.w	r4, r7, #8
 800085e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000860:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(val==1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b01      	cmp	r3, #1
 8000868:	f040 8083 	bne.w	8000972 <Calibrate+0x122>
	{
if(i<8)
 800086c:	4b48      	ldr	r3, [pc, #288]	; (8000990 <Calibrate+0x140>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b07      	cmp	r3, #7
 8000872:	dc4c      	bgt.n	800090e <Calibrate+0xbe>
{
	HAL_GPIO_WritePin(GPIOE,Leds[i++],GPIO_PIN_SET);
 8000874:	4b46      	ldr	r3, [pc, #280]	; (8000990 <Calibrate+0x140>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1c5a      	adds	r2, r3, #1
 800087a:	4945      	ldr	r1, [pc, #276]	; (8000990 <Calibrate+0x140>)
 800087c:	600a      	str	r2, [r1, #0]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	f107 0218 	add.w	r2, r7, #24
 8000884:	4413      	add	r3, r2
 8000886:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800088a:	2201      	movs	r2, #1
 800088c:	4619      	mov	r1, r3
 800088e:	4841      	ldr	r0, [pc, #260]	; (8000994 <Calibrate+0x144>)
 8000890:	f001 fe48 	bl	8002524 <HAL_GPIO_WritePin>
	for(j=0;j<10;j++)
 8000894:	4b40      	ldr	r3, [pc, #256]	; (8000998 <Calibrate+0x148>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	e033      	b.n	8000904 <Calibrate+0xb4>
	{
		HAL_ADC_Start(&hadc1);
 800089c:	483f      	ldr	r0, [pc, #252]	; (800099c <Calibrate+0x14c>)
 800089e:	f000 fc43 	bl	8001128 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80008a2:	2164      	movs	r1, #100	; 0x64
 80008a4:	483d      	ldr	r0, [pc, #244]	; (800099c <Calibrate+0x14c>)
 80008a6:	f000 fd8b 	bl	80013c0 <HAL_ADC_PollForConversion>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d108      	bne.n	80008c2 <Calibrate+0x72>
			{
				ADC_2_INITIAL+=HAL_ADC_GetValue(&hadc1);
 80008b0:	483a      	ldr	r0, [pc, #232]	; (800099c <Calibrate+0x14c>)
 80008b2:	f000 fe7f 	bl	80015b4 <HAL_ADC_GetValue>
 80008b6:	4602      	mov	r2, r0
 80008b8:	4b39      	ldr	r3, [pc, #228]	; (80009a0 <Calibrate+0x150>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4413      	add	r3, r2
 80008be:	4a38      	ldr	r2, [pc, #224]	; (80009a0 <Calibrate+0x150>)
 80008c0:	6013      	str	r3, [r2, #0]
			}
		HAL_ADC_Start(&hadc2);
 80008c2:	4838      	ldr	r0, [pc, #224]	; (80009a4 <Calibrate+0x154>)
 80008c4:	f000 fc30 	bl	8001128 <HAL_ADC_Start>

		if (HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK)
 80008c8:	2164      	movs	r1, #100	; 0x64
 80008ca:	4836      	ldr	r0, [pc, #216]	; (80009a4 <Calibrate+0x154>)
 80008cc:	f000 fd78 	bl	80013c0 <HAL_ADC_PollForConversion>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d108      	bne.n	80008e8 <Calibrate+0x98>
			{
			    ADC_3_INITIAL+=HAL_ADC_GetValue(&hadc2);
 80008d6:	4833      	ldr	r0, [pc, #204]	; (80009a4 <Calibrate+0x154>)
 80008d8:	f000 fe6c 	bl	80015b4 <HAL_ADC_GetValue>
 80008dc:	4602      	mov	r2, r0
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <Calibrate+0x158>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a30      	ldr	r2, [pc, #192]	; (80009a8 <Calibrate+0x158>)
 80008e6:	6013      	str	r3, [r2, #0]
			}
			HAL_Delay (200);
 80008e8:	20c8      	movs	r0, #200	; 0xc8
 80008ea:	f000 fa1b 	bl	8000d24 <HAL_Delay>
			HAL_ADC_Stop (&hadc1);
 80008ee:	482b      	ldr	r0, [pc, #172]	; (800099c <Calibrate+0x14c>)
 80008f0:	f000 fd30 	bl	8001354 <HAL_ADC_Stop>
			HAL_ADC_Stop (&hadc2);
 80008f4:	482b      	ldr	r0, [pc, #172]	; (80009a4 <Calibrate+0x154>)
 80008f6:	f000 fd2d 	bl	8001354 <HAL_ADC_Stop>
	for(j=0;j<10;j++)
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <Calibrate+0x148>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	4a25      	ldr	r2, [pc, #148]	; (8000998 <Calibrate+0x148>)
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <Calibrate+0x148>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b09      	cmp	r3, #9
 800090a:	ddc7      	ble.n	800089c <Calibrate+0x4c>
}
	}
	}
	} else {state=0; i=0; j=0;}

}
 800090c:	e03a      	b.n	8000984 <Calibrate+0x134>
	if(state==0)
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <Calibrate+0x15c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d136      	bne.n	8000984 <Calibrate+0x134>
	ADC_2_INITIAL/=80;
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <Calibrate+0x150>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a25      	ldr	r2, [pc, #148]	; (80009b0 <Calibrate+0x160>)
 800091c:	fba2 2303 	umull	r2, r3, r2, r3
 8000920:	099b      	lsrs	r3, r3, #6
 8000922:	4a1f      	ldr	r2, [pc, #124]	; (80009a0 <Calibrate+0x150>)
 8000924:	6013      	str	r3, [r2, #0]
	ADC_3_INITIAL/=80;
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <Calibrate+0x158>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <Calibrate+0x160>)
 800092c:	fba2 2303 	umull	r2, r3, r2, r3
 8000930:	099b      	lsrs	r3, r3, #6
 8000932:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <Calibrate+0x158>)
 8000934:	6013      	str	r3, [r2, #0]
	state=1;
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <Calibrate+0x15c>)
 8000938:	2201      	movs	r2, #1
 800093a:	601a      	str	r2, [r3, #0]
	for(j=0;j<8;j++){HAL_GPIO_WritePin(GPIOE,Leds[j],GPIO_PIN_RESET);
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <Calibrate+0x148>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	e011      	b.n	8000968 <Calibrate+0x118>
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <Calibrate+0x148>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	f107 0218 	add.w	r2, r7, #24
 800094e:	4413      	add	r3, r2
 8000950:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000954:	2200      	movs	r2, #0
 8000956:	4619      	mov	r1, r3
 8000958:	480e      	ldr	r0, [pc, #56]	; (8000994 <Calibrate+0x144>)
 800095a:	f001 fde3 	bl	8002524 <HAL_GPIO_WritePin>
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <Calibrate+0x148>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <Calibrate+0x148>)
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <Calibrate+0x148>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b07      	cmp	r3, #7
 800096e:	dde9      	ble.n	8000944 <Calibrate+0xf4>
}
 8000970:	e008      	b.n	8000984 <Calibrate+0x134>
	} else {state=0; i=0; j=0;}
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <Calibrate+0x15c>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <Calibrate+0x140>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <Calibrate+0x148>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
}
 8000984:	bf00      	nop
 8000986:	371c      	adds	r7, #28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd90      	pop	{r4, r7, pc}
 800098c:	08004334 	.word	0x08004334
 8000990:	20000044 	.word	0x20000044
 8000994:	48001000 	.word	0x48001000
 8000998:	20000048 	.word	0x20000048
 800099c:	200000a4 	.word	0x200000a4
 80009a0:	2000003c 	.word	0x2000003c
 80009a4:	20000054 	.word	0x20000054
 80009a8:	20000038 	.word	0x20000038
 80009ac:	2000004c 	.word	0x2000004c
 80009b0:	cccccccd 	.word	0xcccccccd

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_MspInit+0x44>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <HAL_MspInit+0x44>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6193      	str	r3, [r2, #24]
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <HAL_MspInit+0x44>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x44>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_MspInit+0x44>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	61d3      	str	r3, [r2, #28]
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x44>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a1c:	d12e      	bne.n	8000a7c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a1e:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <HAL_ADC_MspInit+0xec>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a30      	ldr	r2, [pc, #192]	; (8000ae8 <HAL_ADC_MspInit+0xec>)
 8000a26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a28:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <HAL_ADC_MspInit+0xec>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d10b      	bne.n	8000a48 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a30:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <HAL_ADC_MspInit+0xf0>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	4a2d      	ldr	r2, [pc, #180]	; (8000aec <HAL_ADC_MspInit+0xf0>)
 8000a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	6153      	str	r3, [r2, #20]
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <HAL_ADC_MspInit+0xf0>)
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	61bb      	str	r3, [r7, #24]
 8000a46:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <HAL_ADC_MspInit+0xf0>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	4a27      	ldr	r2, [pc, #156]	; (8000aec <HAL_ADC_MspInit+0xf0>)
 8000a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a52:	6153      	str	r3, [r2, #20]
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <HAL_ADC_MspInit+0xf0>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f001 fbdb 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000a7a:	e031      	b.n	8000ae0 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <HAL_ADC_MspInit+0xf4>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d12c      	bne.n	8000ae0 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_ADC_MspInit+0xec>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <HAL_ADC_MspInit+0xec>)
 8000a8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_ADC_MspInit+0xec>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d10b      	bne.n	8000ab0 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_ADC_MspInit+0xf0>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	4a13      	ldr	r2, [pc, #76]	; (8000aec <HAL_ADC_MspInit+0xf0>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6153      	str	r3, [r2, #20]
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_ADC_MspInit+0xf0>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_ADC_MspInit+0xf0>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <HAL_ADC_MspInit+0xf0>)
 8000ab6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000aba:	6153      	str	r3, [r2, #20]
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_ADC_MspInit+0xf0>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000acc:	2303      	movs	r3, #3
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <HAL_ADC_MspInit+0xf8>)
 8000adc:	f001 fba8 	bl	8002230 <HAL_GPIO_Init>
}
 8000ae0:	bf00      	nop
 8000ae2:	3730      	adds	r7, #48	; 0x30
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000050 	.word	0x20000050
 8000aec:	40021000 	.word	0x40021000
 8000af0:	50000100 	.word	0x50000100
 8000af4:	48000800 	.word	0x48000800

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0x7c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d128      	bne.n	8000b6c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0x80>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <HAL_UART_MspInit+0x80>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	61d3      	str	r3, [r2, #28]
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_UART_MspInit+0x80>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_UART_MspInit+0x80>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_UART_MspInit+0x80>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6153      	str	r3, [r2, #20]
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_UART_MspInit+0x80>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f001 fb62 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	; 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40004400 	.word	0x40004400
 8000b78:	40021000 	.word	0x40021000

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd0:	f000 f888 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <SystemInit+0x28>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <SystemInit+0x28>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <SystemInit+0x28>)
 8000bee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bf2:	609a      	str	r2, [r3, #8]
#endif
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c0a:	e003      	b.n	8000c14 <LoopCopyDataInit>

08000c0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c12:	3104      	adds	r1, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c1c:	d3f6      	bcc.n	8000c0c <CopyDataInit>
	ldr	r2, =_sbss
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c20:	e002      	b.n	8000c28 <LoopFillZerobss>

08000c22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c24:	f842 3b04 	str.w	r3, [r2], #4

08000c28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <LoopForever+0x16>)
	cmp	r2, r3
 8000c2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c2c:	d3f9      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c2e:	f7ff ffd3 	bl	8000bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f003 fb47 	bl	80042c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c36:	f7ff fac7 	bl	80001c8 <main>

08000c3a <LoopForever>:

LoopForever:
    b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c3c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000c40:	08004384 	.word	0x08004384
	ldr	r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c48:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8000c4c:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8000c50:	20000178 	.word	0x20000178

08000c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_2_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_Init+0x28>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <HAL_Init+0x28>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f001 faad 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 f808 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff fe9e 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40022000 	.word	0x40022000

08000c84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x54>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x58>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 fab7 	bl	8002216 <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00e      	b.n	8000cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d80a      	bhi.n	8000cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc0:	f001 fa8d 	bl	80021de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <HAL_InitTick+0x5c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000010 	.word	0x20000010
 8000cdc:	20000018 	.word	0x20000018
 8000ce0:	20000014 	.word	0x20000014

08000ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000018 	.word	0x20000018
 8000d08:	20000174 	.word	0x20000174

08000d0c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000174 	.word	0x20000174

08000d24 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d2c:	f7ff ffee 	bl	8000d0c <HAL_GetTick>
 8000d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d3c:	d005      	beq.n	8000d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_Delay+0x40>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d4a:	bf00      	nop
 8000d4c:	f7ff ffde 	bl	8000d0c <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d8f7      	bhi.n	8000d4c <HAL_Delay+0x28>
  {
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000018 	.word	0x20000018

08000d68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b09a      	sub	sp, #104	; 0x68
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e1c9      	b.n	800111c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 0310 	and.w	r3, r3, #16
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d176      	bne.n	8000e88 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d152      	bne.n	8000e48 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fe1d 	bl	80009fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d13b      	bne.n	8000e48 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f001 f839 	bl	8001e48 <ADC_Disable>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f003 0310 	and.w	r3, r3, #16
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d12f      	bne.n	8000e48 <HAL_ADC_Init+0xe0>
 8000de8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d12b      	bne.n	8000e48 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000df8:	f023 0302 	bic.w	r3, r3, #2
 8000dfc:	f043 0202 	orr.w	r2, r3, #2
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e12:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e22:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e24:	4b86      	ldr	r3, [pc, #536]	; (8001040 <HAL_ADC_Init+0x2d8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a86      	ldr	r2, [pc, #536]	; (8001044 <HAL_ADC_Init+0x2dc>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	0c9a      	lsrs	r2, r3, #18
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e3a:	e002      	b.n	8000e42 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1f9      	bne.n	8000e3c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d007      	beq.n	8000e66 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e64:	d110      	bne.n	8000e88 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f023 0312 	bic.w	r3, r3, #18
 8000e6e:	f043 0210 	orr.w	r2, r3, #16
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f043 0201 	orr.w	r2, r3, #1
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f040 8136 	bne.w	8001102 <HAL_ADC_Init+0x39a>
 8000e96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f040 8131 	bne.w	8001102 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 8129 	bne.w	8001102 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000eb8:	f043 0202 	orr.w	r2, r3, #2
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ec8:	d004      	beq.n	8000ed4 <HAL_ADC_Init+0x16c>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a5e      	ldr	r2, [pc, #376]	; (8001048 <HAL_ADC_Init+0x2e0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d101      	bne.n	8000ed8 <HAL_ADC_Init+0x170>
 8000ed4:	4b5d      	ldr	r3, [pc, #372]	; (800104c <HAL_ADC_Init+0x2e4>)
 8000ed6:	e000      	b.n	8000eda <HAL_ADC_Init+0x172>
 8000ed8:	4b5d      	ldr	r3, [pc, #372]	; (8001050 <HAL_ADC_Init+0x2e8>)
 8000eda:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ee4:	d102      	bne.n	8000eec <HAL_ADC_Init+0x184>
 8000ee6:	4b58      	ldr	r3, [pc, #352]	; (8001048 <HAL_ADC_Init+0x2e0>)
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	e01a      	b.n	8000f22 <HAL_ADC_Init+0x1ba>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a55      	ldr	r2, [pc, #340]	; (8001048 <HAL_ADC_Init+0x2e0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d103      	bne.n	8000efe <HAL_ADC_Init+0x196>
 8000ef6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e011      	b.n	8000f22 <HAL_ADC_Init+0x1ba>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a54      	ldr	r2, [pc, #336]	; (8001054 <HAL_ADC_Init+0x2ec>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d102      	bne.n	8000f0e <HAL_ADC_Init+0x1a6>
 8000f08:	4b53      	ldr	r3, [pc, #332]	; (8001058 <HAL_ADC_Init+0x2f0>)
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e009      	b.n	8000f22 <HAL_ADC_Init+0x1ba>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a51      	ldr	r2, [pc, #324]	; (8001058 <HAL_ADC_Init+0x2f0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d102      	bne.n	8000f1e <HAL_ADC_Init+0x1b6>
 8000f18:	4b4e      	ldr	r3, [pc, #312]	; (8001054 <HAL_ADC_Init+0x2ec>)
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e001      	b.n	8000f22 <HAL_ADC_Init+0x1ba>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d108      	bne.n	8000f42 <HAL_ADC_Init+0x1da>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Init+0x1da>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <HAL_ADC_Init+0x1dc>
 8000f42:	2300      	movs	r3, #0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d11c      	bne.n	8000f82 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f48:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d010      	beq.n	8000f70 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d107      	bne.n	8000f6a <HAL_ADC_Init+0x202>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d101      	bne.n	8000f6a <HAL_ADC_Init+0x202>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_ADC_Init+0x204>
 8000f6a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d108      	bne.n	8000f82 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f80:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7e5b      	ldrb	r3, [r3, #25]
 8000f86:	035b      	lsls	r3, r3, #13
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f8c:	2a01      	cmp	r2, #1
 8000f8e:	d002      	beq.n	8000f96 <HAL_ADC_Init+0x22e>
 8000f90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f94:	e000      	b.n	8000f98 <HAL_ADC_Init+0x230>
 8000f96:	2200      	movs	r2, #0
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d11b      	bne.n	8000fee <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7e5b      	ldrb	r3, [r3, #25]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d109      	bne.n	8000fd2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	045a      	lsls	r2, r3, #17
 8000fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fce:	663b      	str	r3, [r7, #96]	; 0x60
 8000fd0:	e00d      	b.n	8000fee <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000fda:	f043 0220 	orr.w	r2, r3, #32
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f043 0201 	orr.w	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d03a      	beq.n	800106c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <HAL_ADC_Init+0x2ec>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d004      	beq.n	800100a <HAL_ADC_Init+0x2a2>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <HAL_ADC_Init+0x2f0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d128      	bne.n	800105c <HAL_ADC_Init+0x2f4>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001012:	d012      	beq.n	800103a <HAL_ADC_Init+0x2d2>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800101c:	d00a      	beq.n	8001034 <HAL_ADC_Init+0x2cc>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001022:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001026:	d002      	beq.n	800102e <HAL_ADC_Init+0x2c6>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	e018      	b.n	8001060 <HAL_ADC_Init+0x2f8>
 800102e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001032:	e015      	b.n	8001060 <HAL_ADC_Init+0x2f8>
 8001034:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001038:	e012      	b.n	8001060 <HAL_ADC_Init+0x2f8>
 800103a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800103e:	e00f      	b.n	8001060 <HAL_ADC_Init+0x2f8>
 8001040:	20000010 	.word	0x20000010
 8001044:	431bde83 	.word	0x431bde83
 8001048:	50000100 	.word	0x50000100
 800104c:	50000300 	.word	0x50000300
 8001050:	50000700 	.word	0x50000700
 8001054:	50000400 	.word	0x50000400
 8001058:	50000500 	.word	0x50000500
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001064:	4313      	orrs	r3, r2
 8001066:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001068:	4313      	orrs	r3, r2
 800106a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b00      	cmp	r3, #0
 8001078:	d114      	bne.n	80010a4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001088:	f023 0302 	bic.w	r3, r3, #2
 800108c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7e1b      	ldrb	r3, [r3, #24]
 8001092:	039a      	lsls	r2, r3, #14
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4313      	orrs	r3, r2
 800109e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010a0:	4313      	orrs	r3, r2
 80010a2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <HAL_ADC_Init+0x3bc>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010b4:	430b      	orrs	r3, r1
 80010b6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10c      	bne.n	80010da <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f023 010f 	bic.w	r1, r3, #15
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	631a      	str	r2, [r3, #48]	; 0x30
 80010d8:	e007      	b.n	80010ea <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 020f 	bic.w	r2, r2, #15
 80010e8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f023 0303 	bic.w	r3, r3, #3
 80010f8:	f043 0201 	orr.w	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001100:	e00a      	b.n	8001118 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f023 0312 	bic.w	r3, r3, #18
 800110a:	f043 0210 	orr.w	r2, r3, #16
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001112:	2301      	movs	r3, #1
 8001114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001118:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800111c:	4618      	mov	r0, r3
 800111e:	3768      	adds	r7, #104	; 0x68
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	fff0c007 	.word	0xfff0c007

08001128 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	2b00      	cmp	r3, #0
 8001140:	f040 80f9 	bne.w	8001336 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800114a:	2b01      	cmp	r3, #1
 800114c:	d101      	bne.n	8001152 <HAL_ADC_Start+0x2a>
 800114e:	2302      	movs	r3, #2
 8001150:	e0f4      	b.n	800133c <HAL_ADC_Start+0x214>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 fe16 	bl	8001d8c <ADC_Enable>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 80e0 	bne.w	800132c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001174:	f023 0301 	bic.w	r3, r3, #1
 8001178:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001188:	d004      	beq.n	8001194 <HAL_ADC_Start+0x6c>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6d      	ldr	r2, [pc, #436]	; (8001344 <HAL_ADC_Start+0x21c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d106      	bne.n	80011a2 <HAL_ADC_Start+0x7a>
 8001194:	4b6c      	ldr	r3, [pc, #432]	; (8001348 <HAL_ADC_Start+0x220>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	2b00      	cmp	r3, #0
 800119e:	d010      	beq.n	80011c2 <HAL_ADC_Start+0x9a>
 80011a0:	e005      	b.n	80011ae <HAL_ADC_Start+0x86>
 80011a2:	4b6a      	ldr	r3, [pc, #424]	; (800134c <HAL_ADC_Start+0x224>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <HAL_ADC_Start+0x9a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011b6:	d004      	beq.n	80011c2 <HAL_ADC_Start+0x9a>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a64      	ldr	r2, [pc, #400]	; (8001350 <HAL_ADC_Start+0x228>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d115      	bne.n	80011ee <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d036      	beq.n	800124a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011ec:	e02d      	b.n	800124a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001202:	d004      	beq.n	800120e <HAL_ADC_Start+0xe6>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a4e      	ldr	r2, [pc, #312]	; (8001344 <HAL_ADC_Start+0x21c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10a      	bne.n	8001224 <HAL_ADC_Start+0xfc>
 800120e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf14      	ite	ne
 800121c:	2301      	movne	r3, #1
 800121e:	2300      	moveq	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	e008      	b.n	8001236 <HAL_ADC_Start+0x10e>
 8001224:	4b4a      	ldr	r3, [pc, #296]	; (8001350 <HAL_ADC_Start+0x228>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf14      	ite	ne
 8001230:	2301      	movne	r3, #1
 8001232:	2300      	moveq	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001242:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001256:	d106      	bne.n	8001266 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	f023 0206 	bic.w	r2, r3, #6
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	645a      	str	r2, [r3, #68]	; 0x44
 8001264:	e002      	b.n	800126c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	221c      	movs	r2, #28
 800127a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001284:	d004      	beq.n	8001290 <HAL_ADC_Start+0x168>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a2e      	ldr	r2, [pc, #184]	; (8001344 <HAL_ADC_Start+0x21c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d106      	bne.n	800129e <HAL_ADC_Start+0x176>
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_ADC_Start+0x220>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 031f 	and.w	r3, r3, #31
 8001298:	2b00      	cmp	r3, #0
 800129a:	d03e      	beq.n	800131a <HAL_ADC_Start+0x1f2>
 800129c:	e005      	b.n	80012aa <HAL_ADC_Start+0x182>
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_ADC_Start+0x224>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d037      	beq.n	800131a <HAL_ADC_Start+0x1f2>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012b2:	d004      	beq.n	80012be <HAL_ADC_Start+0x196>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a22      	ldr	r2, [pc, #136]	; (8001344 <HAL_ADC_Start+0x21c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d106      	bne.n	80012cc <HAL_ADC_Start+0x1a4>
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <HAL_ADC_Start+0x220>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 031f 	and.w	r3, r3, #31
 80012c6:	2b05      	cmp	r3, #5
 80012c8:	d027      	beq.n	800131a <HAL_ADC_Start+0x1f2>
 80012ca:	e005      	b.n	80012d8 <HAL_ADC_Start+0x1b0>
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_ADC_Start+0x224>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	d020      	beq.n	800131a <HAL_ADC_Start+0x1f2>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012e0:	d004      	beq.n	80012ec <HAL_ADC_Start+0x1c4>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_ADC_Start+0x21c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d106      	bne.n	80012fa <HAL_ADC_Start+0x1d2>
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_ADC_Start+0x220>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 031f 	and.w	r3, r3, #31
 80012f4:	2b09      	cmp	r3, #9
 80012f6:	d010      	beq.n	800131a <HAL_ADC_Start+0x1f2>
 80012f8:	e005      	b.n	8001306 <HAL_ADC_Start+0x1de>
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_ADC_Start+0x224>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	2b09      	cmp	r3, #9
 8001304:	d009      	beq.n	800131a <HAL_ADC_Start+0x1f2>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800130e:	d004      	beq.n	800131a <HAL_ADC_Start+0x1f2>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_ADC_Start+0x228>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d10f      	bne.n	800133a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f042 0204 	orr.w	r2, r2, #4
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	e006      	b.n	800133a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001334:	e001      	b.n	800133a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001336:	2302      	movs	r3, #2
 8001338:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	50000100 	.word	0x50000100
 8001348:	50000300 	.word	0x50000300
 800134c:	50000700 	.word	0x50000700
 8001350:	50000400 	.word	0x50000400

08001354 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_ADC_Stop+0x1a>
 800136a:	2302      	movs	r3, #2
 800136c:	e023      	b.n	80013b6 <HAL_ADC_Stop+0x62>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001376:	216c      	movs	r1, #108	; 0x6c
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 fdc5 	bl	8001f08 <ADC_ConversionStop>
 800137e:	4603      	mov	r3, r0
 8001380:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d111      	bne.n	80013ac <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 fd5d 	bl	8001e48 <ADC_Disable>
 800138e:	4603      	mov	r3, r0
 8001390:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d109      	bne.n	80013ac <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	f043 0201 	orr.w	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d102      	bne.n	80013dc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80013d6:	2308      	movs	r3, #8
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e03a      	b.n	8001452 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e4:	d004      	beq.n	80013f0 <HAL_ADC_PollForConversion+0x30>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a6e      	ldr	r2, [pc, #440]	; (80015a4 <HAL_ADC_PollForConversion+0x1e4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x34>
 80013f0:	4b6d      	ldr	r3, [pc, #436]	; (80015a8 <HAL_ADC_PollForConversion+0x1e8>)
 80013f2:	e000      	b.n	80013f6 <HAL_ADC_PollForConversion+0x36>
 80013f4:	4b6d      	ldr	r3, [pc, #436]	; (80015ac <HAL_ADC_PollForConversion+0x1ec>)
 80013f6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 031f 	and.w	r3, r3, #31
 8001400:	2b00      	cmp	r3, #0
 8001402:	d112      	bne.n	800142a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b01      	cmp	r3, #1
 8001410:	d11d      	bne.n	800144e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f043 0220 	orr.w	r2, r3, #32
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0b8      	b.n	800159c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00b      	beq.n	800144e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f043 0220 	orr.w	r2, r3, #32
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0a6      	b.n	800159c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800144e:	230c      	movs	r3, #12
 8001450:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800145a:	d004      	beq.n	8001466 <HAL_ADC_PollForConversion+0xa6>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a50      	ldr	r2, [pc, #320]	; (80015a4 <HAL_ADC_PollForConversion+0x1e4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d106      	bne.n	8001474 <HAL_ADC_PollForConversion+0xb4>
 8001466:	4b50      	ldr	r3, [pc, #320]	; (80015a8 <HAL_ADC_PollForConversion+0x1e8>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	2b00      	cmp	r3, #0
 8001470:	d010      	beq.n	8001494 <HAL_ADC_PollForConversion+0xd4>
 8001472:	e005      	b.n	8001480 <HAL_ADC_PollForConversion+0xc0>
 8001474:	4b4d      	ldr	r3, [pc, #308]	; (80015ac <HAL_ADC_PollForConversion+0x1ec>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	2b00      	cmp	r3, #0
 800147e:	d009      	beq.n	8001494 <HAL_ADC_PollForConversion+0xd4>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001488:	d004      	beq.n	8001494 <HAL_ADC_PollForConversion+0xd4>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a48      	ldr	r2, [pc, #288]	; (80015b0 <HAL_ADC_PollForConversion+0x1f0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d104      	bne.n	800149e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	e00f      	b.n	80014be <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a6:	d004      	beq.n	80014b2 <HAL_ADC_PollForConversion+0xf2>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a3d      	ldr	r2, [pc, #244]	; (80015a4 <HAL_ADC_PollForConversion+0x1e4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d102      	bne.n	80014b8 <HAL_ADC_PollForConversion+0xf8>
 80014b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014b6:	e000      	b.n	80014ba <HAL_ADC_PollForConversion+0xfa>
 80014b8:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <HAL_ADC_PollForConversion+0x1f0>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80014be:	f7ff fc25 	bl	8000d0c <HAL_GetTick>
 80014c2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014c4:	e01a      	b.n	80014fc <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014cc:	d016      	beq.n	80014fc <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <HAL_ADC_PollForConversion+0x124>
 80014d4:	f7ff fc1a 	bl	8000d0c <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d20b      	bcs.n	80014fc <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f043 0204 	orr.w	r2, r3, #4
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e04f      	b.n	800159c <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0dd      	beq.n	80014c6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001520:	2b00      	cmp	r3, #0
 8001522:	d131      	bne.n	8001588 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800152a:	2b00      	cmp	r3, #0
 800152c:	d12c      	bne.n	8001588 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b08      	cmp	r3, #8
 800153a:	d125      	bne.n	8001588 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d112      	bne.n	8001570 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d112      	bne.n	8001588 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f043 0201 	orr.w	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
 800156e:	e00b      	b.n	8001588 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f043 0220 	orr.w	r2, r3, #32
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	f043 0201 	orr.w	r2, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d103      	bne.n	800159a <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	50000100 	.word	0x50000100
 80015a8:	50000300 	.word	0x50000300
 80015ac:	50000700 	.word	0x50000700
 80015b0:	50000400 	.word	0x50000400

080015b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b09b      	sub	sp, #108	; 0x6c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x22>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e2cb      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x5ba>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	f040 82af 	bne.w	8001b68 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b04      	cmp	r3, #4
 8001610:	d81c      	bhi.n	800164c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	461a      	mov	r2, r3
 8001626:	231f      	movs	r3, #31
 8001628:	4093      	lsls	r3, r2
 800162a:	43db      	mvns	r3, r3
 800162c:	4019      	ands	r1, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa00 f203 	lsl.w	r2, r0, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
 800164a:	e063      	b.n	8001714 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b09      	cmp	r3, #9
 8001652:	d81e      	bhi.n	8001692 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	3b1e      	subs	r3, #30
 8001668:	221f      	movs	r2, #31
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	4019      	ands	r1, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	3b1e      	subs	r3, #30
 8001684:	fa00 f203 	lsl.w	r2, r0, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	635a      	str	r2, [r3, #52]	; 0x34
 8001690:	e040      	b.n	8001714 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b0e      	cmp	r3, #14
 8001698:	d81e      	bhi.n	80016d8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	3b3c      	subs	r3, #60	; 0x3c
 80016ae:	221f      	movs	r2, #31
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	4019      	ands	r1, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	3b3c      	subs	r3, #60	; 0x3c
 80016ca:	fa00 f203 	lsl.w	r2, r0, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	639a      	str	r2, [r3, #56]	; 0x38
 80016d6:	e01d      	b.n	8001714 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	3b5a      	subs	r3, #90	; 0x5a
 80016ec:	221f      	movs	r2, #31
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4019      	ands	r1, r3
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	3b5a      	subs	r3, #90	; 0x5a
 8001708:	fa00 f203 	lsl.w	r2, r0, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 80e5 	bne.w	80018ee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b09      	cmp	r3, #9
 800172a:	d91c      	bls.n	8001766 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6999      	ldr	r1, [r3, #24]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	3b1e      	subs	r3, #30
 800173e:	2207      	movs	r2, #7
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	4019      	ands	r1, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6898      	ldr	r0, [r3, #8]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	3b1e      	subs	r3, #30
 8001758:	fa00 f203 	lsl.w	r2, r0, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	619a      	str	r2, [r3, #24]
 8001764:	e019      	b.n	800179a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6959      	ldr	r1, [r3, #20]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	2207      	movs	r2, #7
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	4019      	ands	r1, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6898      	ldr	r0, [r3, #8]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	fa00 f203 	lsl.w	r2, r0, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	08db      	lsrs	r3, r3, #3
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d84f      	bhi.n	800185c <HAL_ADC_ConfigChannel+0x28c>
 80017bc:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <HAL_ADC_ConfigChannel+0x1f4>)
 80017be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c2:	bf00      	nop
 80017c4:	080017d5 	.word	0x080017d5
 80017c8:	080017f7 	.word	0x080017f7
 80017cc:	08001819 	.word	0x08001819
 80017d0:	0800183b 	.word	0x0800183b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017da:	4b9f      	ldr	r3, [pc, #636]	; (8001a58 <HAL_ADC_ConfigChannel+0x488>)
 80017dc:	4013      	ands	r3, r2
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	0691      	lsls	r1, r2, #26
 80017e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017e6:	430a      	orrs	r2, r1
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017f2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017f4:	e07e      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017fc:	4b96      	ldr	r3, [pc, #600]	; (8001a58 <HAL_ADC_ConfigChannel+0x488>)
 80017fe:	4013      	ands	r3, r2
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	0691      	lsls	r1, r2, #26
 8001806:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001808:	430a      	orrs	r2, r1
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001814:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001816:	e06d      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800181e:	4b8e      	ldr	r3, [pc, #568]	; (8001a58 <HAL_ADC_ConfigChannel+0x488>)
 8001820:	4013      	ands	r3, r2
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	0691      	lsls	r1, r2, #26
 8001828:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800182a:	430a      	orrs	r2, r1
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001836:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001838:	e05c      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001840:	4b85      	ldr	r3, [pc, #532]	; (8001a58 <HAL_ADC_ConfigChannel+0x488>)
 8001842:	4013      	ands	r3, r2
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	0691      	lsls	r1, r2, #26
 800184a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800184c:	430a      	orrs	r2, r1
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001858:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800185a:	e04b      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	069b      	lsls	r3, r3, #26
 800186c:	429a      	cmp	r2, r3
 800186e:	d107      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800187e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001886:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	069b      	lsls	r3, r3, #26
 8001890:	429a      	cmp	r2, r3
 8001892:	d107      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018a2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	069b      	lsls	r3, r3, #26
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d107      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018c6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	069b      	lsls	r3, r3, #26
 80018d8:	429a      	cmp	r2, r3
 80018da:	d10a      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018ea:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80018ec:	e001      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80018ee:	bf00      	nop
 80018f0:	e000      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80018f2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d108      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x344>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x344>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_ADC_ConfigChannel+0x346>
 8001914:	2300      	movs	r3, #0
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 8131 	bne.w	8001b7e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d00f      	beq.n	8001944 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2201      	movs	r2, #1
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	400a      	ands	r2, r1
 800193e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001942:	e049      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2201      	movs	r2, #1
 8001952:	409a      	lsls	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b09      	cmp	r3, #9
 8001964:	d91c      	bls.n	80019a0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6999      	ldr	r1, [r3, #24]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4613      	mov	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	3b1b      	subs	r3, #27
 8001978:	2207      	movs	r2, #7
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	4019      	ands	r1, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6898      	ldr	r0, [r3, #8]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	3b1b      	subs	r3, #27
 8001992:	fa00 f203 	lsl.w	r2, r0, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	619a      	str	r2, [r3, #24]
 800199e:	e01b      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6959      	ldr	r1, [r3, #20]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	2207      	movs	r2, #7
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4019      	ands	r1, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	6898      	ldr	r0, [r3, #8]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	fa00 f203 	lsl.w	r2, r0, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e0:	d004      	beq.n	80019ec <HAL_ADC_ConfigChannel+0x41c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1d      	ldr	r2, [pc, #116]	; (8001a5c <HAL_ADC_ConfigChannel+0x48c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d101      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x420>
 80019ec:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <HAL_ADC_ConfigChannel+0x490>)
 80019ee:	e000      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x422>
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <HAL_ADC_ConfigChannel+0x494>)
 80019f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	d105      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d015      	beq.n	8001a34 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a0c:	2b11      	cmp	r3, #17
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00b      	beq.n	8001a34 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a20:	2b12      	cmp	r3, #18
 8001a22:	f040 80ac 	bne.w	8001b7e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 80a5 	bne.w	8001b7e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a3c:	d102      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x474>
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_ADC_ConfigChannel+0x48c>)
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e023      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x4bc>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_ADC_ConfigChannel+0x48c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10c      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x498>
 8001a4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e01a      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x4bc>
 8001a56:	bf00      	nop
 8001a58:	83fff000 	.word	0x83fff000
 8001a5c:	50000100 	.word	0x50000100
 8001a60:	50000300 	.word	0x50000300
 8001a64:	50000700 	.word	0x50000700
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a4a      	ldr	r2, [pc, #296]	; (8001b98 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d102      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x4a8>
 8001a72:	4b4a      	ldr	r3, [pc, #296]	; (8001b9c <HAL_ADC_ConfigChannel+0x5cc>)
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	e009      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x4bc>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a47      	ldr	r2, [pc, #284]	; (8001b9c <HAL_ADC_ConfigChannel+0x5cc>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d102      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x4b8>
 8001a82:	4b45      	ldr	r3, [pc, #276]	; (8001b98 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	e001      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x4bc>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d108      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x4dc>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x4dc>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_ADC_ConfigChannel+0x4de>
 8001aac:	2300      	movs	r3, #0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d150      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ab2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d010      	beq.n	8001ada <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d107      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x504>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x504>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x506>
 8001ad4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d13c      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d11d      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x54e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aea:	d118      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001af6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a29      	ldr	r2, [pc, #164]	; (8001ba4 <HAL_ADC_ConfigChannel+0x5d4>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0c9a      	lsrs	r2, r3, #18
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b0e:	e002      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f9      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b1c:	e02e      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b11      	cmp	r3, #17
 8001b24:	d10b      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x56e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b2e:	d106      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b3c:	e01e      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d11a      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b50:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b52:	e013      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f043 0220 	orr.w	r2, r3, #32
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b66:	e00a      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f043 0220 	orr.w	r2, r3, #32
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b7a:	e000      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b7c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	376c      	adds	r7, #108	; 0x6c
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	50000400 	.word	0x50000400
 8001b9c:	50000500 	.word	0x50000500
 8001ba0:	20000010 	.word	0x20000010
 8001ba4:	431bde83 	.word	0x431bde83

08001ba8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b099      	sub	sp, #100	; 0x64
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc0:	d102      	bne.n	8001bc8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001bc2:	4b6d      	ldr	r3, [pc, #436]	; (8001d78 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	e01a      	b.n	8001bfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a6a      	ldr	r2, [pc, #424]	; (8001d78 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d103      	bne.n	8001bda <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001bd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	e011      	b.n	8001bfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a67      	ldr	r2, [pc, #412]	; (8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d102      	bne.n	8001bea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001be4:	4b66      	ldr	r3, [pc, #408]	; (8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	e009      	b.n	8001bfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a64      	ldr	r2, [pc, #400]	; (8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d102      	bne.n	8001bfa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001bf4:	4b61      	ldr	r3, [pc, #388]	; (8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	e001      	b.n	8001bfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0b0      	b.n	8001d6a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e0a9      	b.n	8001d6a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 808d 	bne.w	8001d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 8086 	bne.w	8001d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c44:	d004      	beq.n	8001c50 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a4b      	ldr	r2, [pc, #300]	; (8001d78 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001c50:	4b4c      	ldr	r3, [pc, #304]	; (8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001c52:	e000      	b.n	8001c56 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001c54:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001c56:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d040      	beq.n	8001ce2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c72:	035b      	lsls	r3, r3, #13
 8001c74:	430b      	orrs	r3, r1
 8001c76:	431a      	orrs	r2, r3
 8001c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c7a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d108      	bne.n	8001c9c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d15c      	bne.n	8001d5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d107      	bne.n	8001cbe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001cbe:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d14b      	bne.n	8001d5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ccc:	f023 030f 	bic.w	r3, r3, #15
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	6811      	ldr	r1, [r2, #0]
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	6892      	ldr	r2, [r2, #8]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cde:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ce0:	e03c      	b.n	8001d5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cec:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d108      	bne.n	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d123      	bne.n	8001d5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d107      	bne.n	8001d30 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001d30:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d112      	bne.n	8001d5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d3e:	f023 030f 	bic.w	r3, r3, #15
 8001d42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d44:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d46:	e009      	b.n	8001d5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f043 0220 	orr.w	r2, r3, #32
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d5a:	e000      	b.n	8001d5e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d5c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3764      	adds	r7, #100	; 0x64
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	50000100 	.word	0x50000100
 8001d7c:	50000400 	.word	0x50000400
 8001d80:	50000500 	.word	0x50000500
 8001d84:	50000300 	.word	0x50000300
 8001d88:	50000700 	.word	0x50000700

08001d8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d108      	bne.n	8001db8 <ADC_Enable+0x2c>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <ADC_Enable+0x2c>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <ADC_Enable+0x2e>
 8001db8:	2300      	movs	r3, #0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d13c      	bne.n	8001e38 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <ADC_Enable+0xb8>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00d      	beq.n	8001de8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f043 0210 	orr.w	r2, r3, #16
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e028      	b.n	8001e3a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001df8:	f7fe ff88 	bl	8000d0c <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dfe:	e014      	b.n	8001e2a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e00:	f7fe ff84 	bl	8000d0c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d90d      	bls.n	8001e2a <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f043 0210 	orr.w	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f043 0201 	orr.w	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e007      	b.n	8001e3a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d1e3      	bne.n	8001e00 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	8000003f 	.word	0x8000003f

08001e48 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d108      	bne.n	8001e74 <ADC_Disable+0x2c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <ADC_Disable+0x2c>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <ADC_Disable+0x2e>
 8001e74:	2300      	movs	r3, #0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d040      	beq.n	8001efc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 030d 	and.w	r3, r3, #13
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10f      	bne.n	8001ea8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0202 	orr.w	r2, r2, #2
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ea0:	f7fe ff34 	bl	8000d0c <HAL_GetTick>
 8001ea4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ea6:	e022      	b.n	8001eee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f043 0210 	orr.w	r2, r3, #16
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e01c      	b.n	8001efe <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ec4:	f7fe ff22 	bl	8000d0c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d90d      	bls.n	8001eee <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f043 0210 	orr.w	r2, r3, #16
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e007      	b.n	8001efe <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d0e3      	beq.n	8001ec4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 8093 	beq.w	8002054 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f3c:	d12a      	bne.n	8001f94 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d126      	bne.n	8001f94 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d122      	bne.n	8001f94 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001f4e:	230c      	movs	r3, #12
 8001f50:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001f52:	e014      	b.n	8001f7e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4a42      	ldr	r2, [pc, #264]	; (8002060 <ADC_ConversionStop+0x158>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d90d      	bls.n	8001f78 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f043 0210 	orr.w	r2, r3, #16
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e06e      	b.n	8002056 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f88:	2b40      	cmp	r3, #64	; 0x40
 8001f8a:	d1e3      	bne.n	8001f54 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2b60      	cmp	r3, #96	; 0x60
 8001f98:	d015      	beq.n	8001fc6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d10e      	bne.n	8001fc6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d107      	bne.n	8001fc6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0210 	orr.w	r2, r2, #16
 8001fc4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b0c      	cmp	r3, #12
 8001fca:	d015      	beq.n	8001ff8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d10e      	bne.n	8001ff8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d107      	bne.n	8001ff8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0220 	orr.w	r2, r2, #32
 8001ff6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b60      	cmp	r3, #96	; 0x60
 8001ffc:	d004      	beq.n	8002008 <ADC_ConversionStop+0x100>
 8001ffe:	2b6c      	cmp	r3, #108	; 0x6c
 8002000:	d105      	bne.n	800200e <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002002:	230c      	movs	r3, #12
 8002004:	617b      	str	r3, [r7, #20]
        break;
 8002006:	e005      	b.n	8002014 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002008:	2308      	movs	r3, #8
 800200a:	617b      	str	r3, [r7, #20]
        break;
 800200c:	e002      	b.n	8002014 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800200e:	2304      	movs	r3, #4
 8002010:	617b      	str	r3, [r7, #20]
        break;
 8002012:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002014:	f7fe fe7a 	bl	8000d0c <HAL_GetTick>
 8002018:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800201a:	e014      	b.n	8002046 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800201c:	f7fe fe76 	bl	8000d0c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b0b      	cmp	r3, #11
 8002028:	d90d      	bls.n	8002046 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f043 0210 	orr.w	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e007      	b.n	8002056 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1e3      	bne.n	800201c <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	000993ff 	.word	0x000993ff

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021a8:	f7ff ff8e 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff47 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff5c 	bl	80020ac <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff8e 	bl	800211c <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5d 	bl	80020c8 <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ffb0 	bl	8002184 <SysTick_Config>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223e:	e154      	b.n	80024ea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2101      	movs	r1, #1
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	4013      	ands	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 8146 	beq.w	80024e4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x38>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b12      	cmp	r3, #18
 8002266:	d123      	bne.n	80022b0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	08da      	lsrs	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3208      	adds	r2, #8
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	6939      	ldr	r1, [r7, #16]
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d00b      	beq.n	8002304 <HAL_GPIO_Init+0xd4>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d007      	beq.n	8002304 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f8:	2b11      	cmp	r3, #17
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b12      	cmp	r3, #18
 8002302:	d130      	bne.n	8002366 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800233a:	2201      	movs	r2, #1
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	f003 0201 	and.w	r2, r3, #1
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 80a0 	beq.w	80024e4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a4:	4b58      	ldr	r3, [pc, #352]	; (8002508 <HAL_GPIO_Init+0x2d8>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4a57      	ldr	r2, [pc, #348]	; (8002508 <HAL_GPIO_Init+0x2d8>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6193      	str	r3, [r2, #24]
 80023b0:	4b55      	ldr	r3, [pc, #340]	; (8002508 <HAL_GPIO_Init+0x2d8>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023bc:	4a53      	ldr	r2, [pc, #332]	; (800250c <HAL_GPIO_Init+0x2dc>)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	3302      	adds	r3, #2
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023e6:	d019      	beq.n	800241c <HAL_GPIO_Init+0x1ec>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a49      	ldr	r2, [pc, #292]	; (8002510 <HAL_GPIO_Init+0x2e0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d013      	beq.n	8002418 <HAL_GPIO_Init+0x1e8>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a48      	ldr	r2, [pc, #288]	; (8002514 <HAL_GPIO_Init+0x2e4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00d      	beq.n	8002414 <HAL_GPIO_Init+0x1e4>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a47      	ldr	r2, [pc, #284]	; (8002518 <HAL_GPIO_Init+0x2e8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d007      	beq.n	8002410 <HAL_GPIO_Init+0x1e0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a46      	ldr	r2, [pc, #280]	; (800251c <HAL_GPIO_Init+0x2ec>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_GPIO_Init+0x1dc>
 8002408:	2304      	movs	r3, #4
 800240a:	e008      	b.n	800241e <HAL_GPIO_Init+0x1ee>
 800240c:	2305      	movs	r3, #5
 800240e:	e006      	b.n	800241e <HAL_GPIO_Init+0x1ee>
 8002410:	2303      	movs	r3, #3
 8002412:	e004      	b.n	800241e <HAL_GPIO_Init+0x1ee>
 8002414:	2302      	movs	r3, #2
 8002416:	e002      	b.n	800241e <HAL_GPIO_Init+0x1ee>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_GPIO_Init+0x1ee>
 800241c:	2300      	movs	r3, #0
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	f002 0203 	and.w	r2, r2, #3
 8002424:	0092      	lsls	r2, r2, #2
 8002426:	4093      	lsls	r3, r2
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800242e:	4937      	ldr	r1, [pc, #220]	; (800250c <HAL_GPIO_Init+0x2dc>)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	3302      	adds	r3, #2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243c:	4b38      	ldr	r3, [pc, #224]	; (8002520 <HAL_GPIO_Init+0x2f0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002460:	4a2f      	ldr	r2, [pc, #188]	; (8002520 <HAL_GPIO_Init+0x2f0>)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002466:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <HAL_GPIO_Init+0x2f0>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800248a:	4a25      	ldr	r2, [pc, #148]	; (8002520 <HAL_GPIO_Init+0x2f0>)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002490:	4b23      	ldr	r3, [pc, #140]	; (8002520 <HAL_GPIO_Init+0x2f0>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024b4:	4a1a      	ldr	r2, [pc, #104]	; (8002520 <HAL_GPIO_Init+0x2f0>)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_GPIO_Init+0x2f0>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024de:	4a10      	ldr	r2, [pc, #64]	; (8002520 <HAL_GPIO_Init+0x2f0>)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3301      	adds	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f47f aea3 	bne.w	8002240 <HAL_GPIO_Init+0x10>
  }
}
 80024fa:	bf00      	nop
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	40010000 	.word	0x40010000
 8002510:	48000400 	.word	0x48000400
 8002514:	48000800 	.word	0x48000800
 8002518:	48000c00 	.word	0x48000c00
 800251c:	48001000 	.word	0x48001000
 8002520:	40010400 	.word	0x40010400

08002524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
 8002530:	4613      	mov	r3, r2
 8002532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002534:	787b      	ldrb	r3, [r7, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002540:	e002      	b.n	8002548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800255a:	af00      	add	r7, sp, #0
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	f000 bef4 	b.w	8003356 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 816a 	beq.w	8002852 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800257e:	4bb3      	ldr	r3, [pc, #716]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b04      	cmp	r3, #4
 8002588:	d00c      	beq.n	80025a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800258a:	4bb0      	ldr	r3, [pc, #704]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b08      	cmp	r3, #8
 8002594:	d159      	bne.n	800264a <HAL_RCC_OscConfig+0xf6>
 8002596:	4bad      	ldr	r3, [pc, #692]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a2:	d152      	bne.n	800264a <HAL_RCC_OscConfig+0xf6>
 80025a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d102      	bne.n	80025d6 <HAL_RCC_OscConfig+0x82>
 80025d0:	4b9e      	ldr	r3, [pc, #632]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	e015      	b.n	8002602 <HAL_RCC_OscConfig+0xae>
 80025d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025da:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025f2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80025fe:	4b93      	ldr	r3, [pc, #588]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002606:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800260a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800260e:	fa92 f2a2 	rbit	r2, r2
 8002612:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002616:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800261a:	fab2 f282 	clz	r2, r2
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	f042 0220 	orr.w	r2, r2, #32
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	f002 021f 	and.w	r2, r2, #31
 800262a:	2101      	movs	r1, #1
 800262c:	fa01 f202 	lsl.w	r2, r1, r2
 8002630:	4013      	ands	r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 810c 	beq.w	8002850 <HAL_RCC_OscConfig+0x2fc>
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 8106 	bne.w	8002850 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	f000 be86 	b.w	8003356 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d106      	bne.n	8002664 <HAL_RCC_OscConfig+0x110>
 8002656:	4b7d      	ldr	r3, [pc, #500]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a7c      	ldr	r2, [pc, #496]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e030      	b.n	80026c6 <HAL_RCC_OscConfig+0x172>
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x134>
 800266e:	4b77      	ldr	r3, [pc, #476]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a76      	ldr	r2, [pc, #472]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 8002674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b74      	ldr	r3, [pc, #464]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a73      	ldr	r2, [pc, #460]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 8002680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e01e      	b.n	80026c6 <HAL_RCC_OscConfig+0x172>
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002692:	d10c      	bne.n	80026ae <HAL_RCC_OscConfig+0x15a>
 8002694:	4b6d      	ldr	r3, [pc, #436]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a6c      	ldr	r2, [pc, #432]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 800269a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b6a      	ldr	r3, [pc, #424]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a69      	ldr	r2, [pc, #420]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	e00b      	b.n	80026c6 <HAL_RCC_OscConfig+0x172>
 80026ae:	4b67      	ldr	r3, [pc, #412]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a66      	ldr	r2, [pc, #408]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b64      	ldr	r3, [pc, #400]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a63      	ldr	r2, [pc, #396]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 80026c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026c6:	4b61      	ldr	r3, [pc, #388]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	f023 020f 	bic.w	r2, r3, #15
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	495d      	ldr	r1, [pc, #372]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d059      	beq.n	8002798 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fb12 	bl	8000d0c <HAL_GetTick>
 80026e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ee:	f7fe fb0d 	bl	8000d0c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d902      	bls.n	8002704 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	f000 be29 	b.w	8003356 <HAL_RCC_OscConfig+0xe02>
 8002704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002708:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002718:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d102      	bne.n	8002736 <HAL_RCC_OscConfig+0x1e2>
 8002730:	4b46      	ldr	r3, [pc, #280]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	e015      	b.n	8002762 <HAL_RCC_OscConfig+0x20e>
 8002736:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800273a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800274a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800274e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002752:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800275e:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002766:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800276a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800276e:	fa92 f2a2 	rbit	r2, r2
 8002772:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002776:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800277a:	fab2 f282 	clz	r2, r2
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	f042 0220 	orr.w	r2, r2, #32
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f002 021f 	and.w	r2, r2, #31
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f202 	lsl.w	r2, r1, r2
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0ab      	beq.n	80026ee <HAL_RCC_OscConfig+0x19a>
 8002796:	e05c      	b.n	8002852 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe fab8 	bl	8000d0c <HAL_GetTick>
 800279c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a2:	f7fe fab3 	bl	8000d0c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	; 0x64
 80027b0:	d902      	bls.n	80027b8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	f000 bdcf 	b.w	8003356 <HAL_RCC_OscConfig+0xe02>
 80027b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80027cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d102      	bne.n	80027ea <HAL_RCC_OscConfig+0x296>
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	e015      	b.n	8002816 <HAL_RCC_OscConfig+0x2c2>
 80027ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80027fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002802:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002806:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_RCC_OscConfig+0x2f8>)
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800281a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800281e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002822:	fa92 f2a2 	rbit	r2, r2
 8002826:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800282a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800282e:	fab2 f282 	clz	r2, r2
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f042 0220 	orr.w	r2, r2, #32
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f002 021f 	and.w	r2, r2, #31
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f202 	lsl.w	r2, r1, r2
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1ab      	bne.n	80027a2 <HAL_RCC_OscConfig+0x24e>
 800284a:	e002      	b.n	8002852 <HAL_RCC_OscConfig+0x2fe>
 800284c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 816f 	beq.w	8002b40 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002862:	4bd0      	ldr	r3, [pc, #832]	; (8002ba4 <HAL_RCC_OscConfig+0x650>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800286e:	4bcd      	ldr	r3, [pc, #820]	; (8002ba4 <HAL_RCC_OscConfig+0x650>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b08      	cmp	r3, #8
 8002878:	d16c      	bne.n	8002954 <HAL_RCC_OscConfig+0x400>
 800287a:	4bca      	ldr	r3, [pc, #808]	; (8002ba4 <HAL_RCC_OscConfig+0x650>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d166      	bne.n	8002954 <HAL_RCC_OscConfig+0x400>
 8002886:	2302      	movs	r3, #2
 8002888:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002898:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d102      	bne.n	80028b6 <HAL_RCC_OscConfig+0x362>
 80028b0:	4bbc      	ldr	r3, [pc, #752]	; (8002ba4 <HAL_RCC_OscConfig+0x650>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	e013      	b.n	80028de <HAL_RCC_OscConfig+0x38a>
 80028b6:	2302      	movs	r3, #2
 80028b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80028c8:	2302      	movs	r3, #2
 80028ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80028ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80028da:	4bb2      	ldr	r3, [pc, #712]	; (8002ba4 <HAL_RCC_OscConfig+0x650>)
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	2202      	movs	r2, #2
 80028e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80028e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028e8:	fa92 f2a2 	rbit	r2, r2
 80028ec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80028f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80028f4:	fab2 f282 	clz	r2, r2
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	f042 0220 	orr.w	r2, r2, #32
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	f002 021f 	and.w	r2, r2, #31
 8002904:	2101      	movs	r1, #1
 8002906:	fa01 f202 	lsl.w	r2, r1, r2
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <HAL_RCC_OscConfig+0x3cc>
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d002      	beq.n	8002920 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	f000 bd1b 	b.w	8003356 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	4ba0      	ldr	r3, [pc, #640]	; (8002ba4 <HAL_RCC_OscConfig+0x650>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	21f8      	movs	r1, #248	; 0xf8
 8002930:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002938:	fa91 f1a1 	rbit	r1, r1
 800293c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002940:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002944:	fab1 f181 	clz	r1, r1
 8002948:	b2c9      	uxtb	r1, r1
 800294a:	408b      	lsls	r3, r1
 800294c:	4995      	ldr	r1, [pc, #596]	; (8002ba4 <HAL_RCC_OscConfig+0x650>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002952:	e0f5      	b.n	8002b40 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 8085 	beq.w	8002a6a <HAL_RCC_OscConfig+0x516>
 8002960:	2301      	movs	r3, #1
 8002962:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002972:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	461a      	mov	r2, r3
 8002988:	2301      	movs	r3, #1
 800298a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe f9be 	bl	8000d0c <HAL_GetTick>
 8002990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002994:	e00a      	b.n	80029ac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002996:	f7fe f9b9 	bl	8000d0c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d902      	bls.n	80029ac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	f000 bcd5 	b.w	8003356 <HAL_RCC_OscConfig+0xe02>
 80029ac:	2302      	movs	r3, #2
 80029ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80029be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d102      	bne.n	80029dc <HAL_RCC_OscConfig+0x488>
 80029d6:	4b73      	ldr	r3, [pc, #460]	; (8002ba4 <HAL_RCC_OscConfig+0x650>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	e013      	b.n	8002a04 <HAL_RCC_OscConfig+0x4b0>
 80029dc:	2302      	movs	r3, #2
 80029de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029ee:	2302      	movs	r3, #2
 80029f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a00:	4b68      	ldr	r3, [pc, #416]	; (8002ba4 <HAL_RCC_OscConfig+0x650>)
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2202      	movs	r2, #2
 8002a06:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a0a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a0e:	fa92 f2a2 	rbit	r2, r2
 8002a12:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a16:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a1a:	fab2 f282 	clz	r2, r2
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	f042 0220 	orr.w	r2, r2, #32
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	f002 021f 	and.w	r2, r2, #31
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0af      	beq.n	8002996 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a36:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <HAL_RCC_OscConfig+0x650>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	21f8      	movs	r1, #248	; 0xf8
 8002a46:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a4e:	fa91 f1a1 	rbit	r1, r1
 8002a52:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a56:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002a5a:	fab1 f181 	clz	r1, r1
 8002a5e:	b2c9      	uxtb	r1, r1
 8002a60:	408b      	lsls	r3, r1
 8002a62:	4950      	ldr	r1, [pc, #320]	; (8002ba4 <HAL_RCC_OscConfig+0x650>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
 8002a68:	e06a      	b.n	8002b40 <HAL_RCC_OscConfig+0x5ec>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002a7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	461a      	mov	r2, r3
 8002a92:	2300      	movs	r3, #0
 8002a94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a96:	f7fe f939 	bl	8000d0c <HAL_GetTick>
 8002a9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7fe f934 	bl	8000d0c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d902      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	f000 bc50 	b.w	8003356 <HAL_RCC_OscConfig+0xe02>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d102      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x592>
 8002ae0:	4b30      	ldr	r3, [pc, #192]	; (8002ba4 <HAL_RCC_OscConfig+0x650>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	e013      	b.n	8002b0e <HAL_RCC_OscConfig+0x5ba>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002af8:	2302      	movs	r3, #2
 8002afa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002afe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <HAL_RCC_OscConfig+0x650>)
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b14:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b18:	fa92 f2a2 	rbit	r2, r2
 8002b1c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b20:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b24:	fab2 f282 	clz	r2, r2
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f042 0220 	orr.w	r2, r2, #32
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	f002 021f 	and.w	r2, r2, #31
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1af      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80da 	beq.w	8002d04 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d069      	beq.n	8002c2e <HAL_RCC_OscConfig+0x6da>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_OscConfig+0x654>)
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2301      	movs	r3, #1
 8002b82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7fe f8c2 	bl	8000d0c <HAL_GetTick>
 8002b88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8c:	e00e      	b.n	8002bac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7fe f8bd 	bl	8000d0c <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d906      	bls.n	8002bac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e3d9      	b.n	8003356 <HAL_RCC_OscConfig+0xe02>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	10908120 	.word	0x10908120
 8002bac:	2302      	movs	r3, #2
 8002bae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002bbe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	fa93 f2a3 	rbit	r2, r3
 8002bd0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002bda:	2202      	movs	r2, #2
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	fa93 f2a3 	rbit	r2, r3
 8002be8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002bec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bee:	4ba5      	ldr	r3, [pc, #660]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	6019      	str	r1, [r3, #0]
 8002bfa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	fa93 f1a3 	rbit	r1, r3
 8002c04:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c08:	6019      	str	r1, [r3, #0]
  return result;
 8002c0a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	fab3 f383 	clz	r3, r3
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0b0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x63a>
 8002c2c:	e06a      	b.n	8002d04 <HAL_RCC_OscConfig+0x7b0>
 8002c2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	fa93 f2a3 	rbit	r2, r3
 8002c40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c44:	601a      	str	r2, [r3, #0]
  return result;
 8002c46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c4a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b8c      	ldr	r3, [pc, #560]	; (8002e88 <HAL_RCC_OscConfig+0x934>)
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7fe f854 	bl	8000d0c <HAL_GetTick>
 8002c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c68:	e009      	b.n	8002c7e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c6a:	f7fe f84f 	bl	8000d0c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e36b      	b.n	8003356 <HAL_RCC_OscConfig+0xe02>
 8002c7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c82:	2202      	movs	r2, #2
 8002c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	fa93 f2a3 	rbit	r2, r3
 8002c90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	fa93 f2a3 	rbit	r2, r3
 8002ca8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fa93 f2a3 	rbit	r2, r3
 8002cc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc6:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002cce:	2102      	movs	r1, #2
 8002cd0:	6019      	str	r1, [r3, #0]
 8002cd2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	fa93 f1a3 	rbit	r1, r3
 8002cdc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ce0:	6019      	str	r1, [r3, #0]
  return result;
 8002ce2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1b2      	bne.n	8002c6a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d04:	1d3b      	adds	r3, r7, #4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8158 	beq.w	8002fc4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1a:	4b5a      	ldr	r3, [pc, #360]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d112      	bne.n	8002d4c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	4a56      	ldr	r2, [pc, #344]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	61d3      	str	r3, [r2, #28]
 8002d32:	4b54      	ldr	r3, [pc, #336]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d3a:	f107 0308 	add.w	r3, r7, #8
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	f107 0308 	add.w	r3, r7, #8
 8002d44:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	4b4f      	ldr	r3, [pc, #316]	; (8002e8c <HAL_RCC_OscConfig+0x938>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d11a      	bne.n	8002d8e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d58:	4b4c      	ldr	r3, [pc, #304]	; (8002e8c <HAL_RCC_OscConfig+0x938>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a4b      	ldr	r2, [pc, #300]	; (8002e8c <HAL_RCC_OscConfig+0x938>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d62:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d64:	f7fd ffd2 	bl	8000d0c <HAL_GetTick>
 8002d68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6c:	e009      	b.n	8002d82 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6e:	f7fd ffcd 	bl	8000d0c <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e2e9      	b.n	8003356 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d82:	4b42      	ldr	r3, [pc, #264]	; (8002e8c <HAL_RCC_OscConfig+0x938>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ef      	beq.n	8002d6e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8e:	1d3b      	adds	r3, r7, #4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d106      	bne.n	8002da6 <HAL_RCC_OscConfig+0x852>
 8002d98:	4b3a      	ldr	r3, [pc, #232]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4a39      	ldr	r2, [pc, #228]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6213      	str	r3, [r2, #32]
 8002da4:	e02f      	b.n	8002e06 <HAL_RCC_OscConfig+0x8b2>
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10c      	bne.n	8002dca <HAL_RCC_OscConfig+0x876>
 8002db0:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a33      	ldr	r2, [pc, #204]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6213      	str	r3, [r2, #32]
 8002dbc:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4a30      	ldr	r2, [pc, #192]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002dc2:	f023 0304 	bic.w	r3, r3, #4
 8002dc6:	6213      	str	r3, [r2, #32]
 8002dc8:	e01d      	b.n	8002e06 <HAL_RCC_OscConfig+0x8b2>
 8002dca:	1d3b      	adds	r3, r7, #4
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d10c      	bne.n	8002dee <HAL_RCC_OscConfig+0x89a>
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4a2a      	ldr	r2, [pc, #168]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	6213      	str	r3, [r2, #32]
 8002de0:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4a27      	ldr	r2, [pc, #156]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6213      	str	r3, [r2, #32]
 8002dec:	e00b      	b.n	8002e06 <HAL_RCC_OscConfig+0x8b2>
 8002dee:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4a24      	ldr	r2, [pc, #144]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	6213      	str	r3, [r2, #32]
 8002dfa:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002e00:	f023 0304 	bic.w	r3, r3, #4
 8002e04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d06b      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e10:	f7fd ff7c 	bl	8000d0c <HAL_GetTick>
 8002e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	e00b      	b.n	8002e32 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fd ff77 	bl	8000d0c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e291      	b.n	8003356 <HAL_RCC_OscConfig+0xe02>
 8002e32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e36:	2202      	movs	r2, #2
 8002e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	fa93 f2a3 	rbit	r2, r3
 8002e44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e4e:	2202      	movs	r2, #2
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	fa93 f2a3 	rbit	r2, r3
 8002e5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e60:	601a      	str	r2, [r3, #0]
  return result;
 8002e62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f043 0302 	orr.w	r3, r3, #2
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d109      	bne.n	8002e90 <HAL_RCC_OscConfig+0x93c>
 8002e7c:	4b01      	ldr	r3, [pc, #4]	; (8002e84 <HAL_RCC_OscConfig+0x930>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	e014      	b.n	8002eac <HAL_RCC_OscConfig+0x958>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	10908120 	.word	0x10908120
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e94:	2202      	movs	r2, #2
 8002e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	fa93 f2a3 	rbit	r2, r3
 8002ea2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	4bbb      	ldr	r3, [pc, #748]	; (8003198 <HAL_RCC_OscConfig+0xc44>)
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	6011      	str	r1, [r2, #0]
 8002eb4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	fa92 f1a2 	rbit	r1, r2
 8002ebe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002ec2:	6011      	str	r1, [r2, #0]
  return result;
 8002ec4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	fab2 f282 	clz	r2, r2
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	f002 021f 	and.w	r2, r2, #31
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d099      	beq.n	8002e1a <HAL_RCC_OscConfig+0x8c6>
 8002ee6:	e063      	b.n	8002fb0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee8:	f7fd ff10 	bl	8000d0c <HAL_GetTick>
 8002eec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef0:	e00b      	b.n	8002f0a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7fd ff0b 	bl	8000d0c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e225      	b.n	8003356 <HAL_RCC_OscConfig+0xe02>
 8002f0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f0e:	2202      	movs	r2, #2
 8002f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	fa93 f2a3 	rbit	r2, r3
 8002f1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f26:	2202      	movs	r2, #2
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	fa93 f2a3 	rbit	r2, r3
 8002f34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f38:	601a      	str	r2, [r3, #0]
  return result;
 8002f3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f043 0302 	orr.w	r3, r3, #2
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d102      	bne.n	8002f5a <HAL_RCC_OscConfig+0xa06>
 8002f54:	4b90      	ldr	r3, [pc, #576]	; (8003198 <HAL_RCC_OscConfig+0xc44>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	e00d      	b.n	8002f76 <HAL_RCC_OscConfig+0xa22>
 8002f5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f5e:	2202      	movs	r2, #2
 8002f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fa93 f2a3 	rbit	r2, r3
 8002f6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	4b89      	ldr	r3, [pc, #548]	; (8003198 <HAL_RCC_OscConfig+0xc44>)
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f7a:	2102      	movs	r1, #2
 8002f7c:	6011      	str	r1, [r2, #0]
 8002f7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	fa92 f1a2 	rbit	r1, r2
 8002f88:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002f8c:	6011      	str	r1, [r2, #0]
  return result;
 8002f8e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	fab2 f282 	clz	r2, r2
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f002 021f 	and.w	r2, r2, #31
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1a0      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb8:	4b77      	ldr	r3, [pc, #476]	; (8003198 <HAL_RCC_OscConfig+0xc44>)
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	4a76      	ldr	r2, [pc, #472]	; (8003198 <HAL_RCC_OscConfig+0xc44>)
 8002fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 81c2 	beq.w	8003354 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd0:	4b71      	ldr	r3, [pc, #452]	; (8003198 <HAL_RCC_OscConfig+0xc44>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	f000 819c 	beq.w	8003316 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	f040 8114 	bne.w	8003212 <HAL_RCC_OscConfig+0xcbe>
 8002fea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003002:	601a      	str	r2, [r3, #0]
  return result;
 8003004:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003008:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003014:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	461a      	mov	r2, r3
 800301c:	2300      	movs	r3, #0
 800301e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fd fe74 	bl	8000d0c <HAL_GetTick>
 8003024:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003028:	e009      	b.n	800303e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302a:	f7fd fe6f 	bl	8000d0c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e18b      	b.n	8003356 <HAL_RCC_OscConfig+0xe02>
 800303e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003042:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003046:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	fa93 f2a3 	rbit	r2, r3
 8003052:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003056:	601a      	str	r2, [r3, #0]
  return result;
 8003058:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800305c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d102      	bne.n	8003078 <HAL_RCC_OscConfig+0xb24>
 8003072:	4b49      	ldr	r3, [pc, #292]	; (8003198 <HAL_RCC_OscConfig+0xc44>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	e01b      	b.n	80030b0 <HAL_RCC_OscConfig+0xb5c>
 8003078:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800307c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	fa93 f2a3 	rbit	r2, r3
 800308c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003096:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	fa93 f2a3 	rbit	r2, r3
 80030a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <HAL_RCC_OscConfig+0xc44>)
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030b8:	6011      	str	r1, [r2, #0]
 80030ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	fa92 f1a2 	rbit	r1, r2
 80030c4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80030c8:	6011      	str	r1, [r2, #0]
  return result;
 80030ca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	fab2 f282 	clz	r2, r2
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	f042 0220 	orr.w	r2, r2, #32
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	f002 021f 	and.w	r2, r2, #31
 80030e0:	2101      	movs	r1, #1
 80030e2:	fa01 f202 	lsl.w	r2, r1, r2
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d19e      	bne.n	800302a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <HAL_RCC_OscConfig+0xc44>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030f4:	1d3b      	adds	r3, r7, #4
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030fa:	1d3b      	adds	r3, r7, #4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	430b      	orrs	r3, r1
 8003102:	4925      	ldr	r1, [pc, #148]	; (8003198 <HAL_RCC_OscConfig+0xc44>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
 8003108:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800310c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	fa93 f2a3 	rbit	r2, r3
 800311c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003120:	601a      	str	r2, [r3, #0]
  return result;
 8003122:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003126:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003132:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	461a      	mov	r2, r3
 800313a:	2301      	movs	r3, #1
 800313c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7fd fde5 	bl	8000d0c <HAL_GetTick>
 8003142:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003146:	e009      	b.n	800315c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fd fde0 	bl	8000d0c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0fc      	b.n	8003356 <HAL_RCC_OscConfig+0xe02>
 800315c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003160:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003174:	601a      	str	r2, [r3, #0]
  return result;
 8003176:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800317a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <HAL_RCC_OscConfig+0xc48>
 8003190:	4b01      	ldr	r3, [pc, #4]	; (8003198 <HAL_RCC_OscConfig+0xc44>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	e01e      	b.n	80031d4 <HAL_RCC_OscConfig+0xc80>
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f2a3 	rbit	r2, r3
 80031b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	fa93 f2a3 	rbit	r2, r3
 80031ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	4b63      	ldr	r3, [pc, #396]	; (8003360 <HAL_RCC_OscConfig+0xe0c>)
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031dc:	6011      	str	r1, [r2, #0]
 80031de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	fa92 f1a2 	rbit	r1, r2
 80031e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80031ec:	6011      	str	r1, [r2, #0]
  return result;
 80031ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	fab2 f282 	clz	r2, r2
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	f042 0220 	orr.w	r2, r2, #32
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	f002 021f 	and.w	r2, r2, #31
 8003204:	2101      	movs	r1, #1
 8003206:	fa01 f202 	lsl.w	r2, r1, r2
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d09b      	beq.n	8003148 <HAL_RCC_OscConfig+0xbf4>
 8003210:	e0a0      	b.n	8003354 <HAL_RCC_OscConfig+0xe00>
 8003212:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003216:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800321a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	fa93 f2a3 	rbit	r2, r3
 8003226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800322a:	601a      	str	r2, [r3, #0]
  return result;
 800322c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003230:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800323c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	461a      	mov	r2, r3
 8003244:	2300      	movs	r3, #0
 8003246:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fd fd60 	bl	8000d0c <HAL_GetTick>
 800324c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003250:	e009      	b.n	8003266 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003252:	f7fd fd5b 	bl	8000d0c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e077      	b.n	8003356 <HAL_RCC_OscConfig+0xe02>
 8003266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800326a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800326e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	fa93 f2a3 	rbit	r2, r3
 800327a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800327e:	601a      	str	r2, [r3, #0]
  return result;
 8003280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003284:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d102      	bne.n	80032a0 <HAL_RCC_OscConfig+0xd4c>
 800329a:	4b31      	ldr	r3, [pc, #196]	; (8003360 <HAL_RCC_OscConfig+0xe0c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	e01b      	b.n	80032d8 <HAL_RCC_OscConfig+0xd84>
 80032a0:	f107 0320 	add.w	r3, r7, #32
 80032a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f107 0320 	add.w	r3, r7, #32
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f2a3 	rbit	r2, r3
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f107 0318 	add.w	r3, r7, #24
 80032be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	f107 0318 	add.w	r3, r7, #24
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	fa93 f2a3 	rbit	r2, r3
 80032ce:	f107 0314 	add.w	r3, r7, #20
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	4b22      	ldr	r3, [pc, #136]	; (8003360 <HAL_RCC_OscConfig+0xe0c>)
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f107 0210 	add.w	r2, r7, #16
 80032dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032e0:	6011      	str	r1, [r2, #0]
 80032e2:	f107 0210 	add.w	r2, r7, #16
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	fa92 f1a2 	rbit	r1, r2
 80032ec:	f107 020c 	add.w	r2, r7, #12
 80032f0:	6011      	str	r1, [r2, #0]
  return result;
 80032f2:	f107 020c 	add.w	r2, r7, #12
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	fab2 f282 	clz	r2, r2
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	f042 0220 	orr.w	r2, r2, #32
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	f002 021f 	and.w	r2, r2, #31
 8003308:	2101      	movs	r1, #1
 800330a:	fa01 f202 	lsl.w	r2, r1, r2
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d19e      	bne.n	8003252 <HAL_RCC_OscConfig+0xcfe>
 8003314:	e01e      	b.n	8003354 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e018      	b.n	8003356 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <HAL_RCC_OscConfig+0xe0c>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800332c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	429a      	cmp	r2, r3
 800333c:	d108      	bne.n	8003350 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800333e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003342:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003346:	1d3b      	adds	r3, r7, #4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000

08003364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b09e      	sub	sp, #120	; 0x78
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e162      	b.n	8003642 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800337c:	4b90      	ldr	r3, [pc, #576]	; (80035c0 <HAL_RCC_ClockConfig+0x25c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d910      	bls.n	80033ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b8d      	ldr	r3, [pc, #564]	; (80035c0 <HAL_RCC_ClockConfig+0x25c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 0207 	bic.w	r2, r3, #7
 8003392:	498b      	ldr	r1, [pc, #556]	; (80035c0 <HAL_RCC_ClockConfig+0x25c>)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b89      	ldr	r3, [pc, #548]	; (80035c0 <HAL_RCC_ClockConfig+0x25c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e14a      	b.n	8003642 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b8:	4b82      	ldr	r3, [pc, #520]	; (80035c4 <HAL_RCC_ClockConfig+0x260>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	497f      	ldr	r1, [pc, #508]	; (80035c4 <HAL_RCC_ClockConfig+0x260>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80dc 	beq.w	8003590 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d13c      	bne.n	800345a <HAL_RCC_ClockConfig+0xf6>
 80033e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d102      	bne.n	800340a <HAL_RCC_ClockConfig+0xa6>
 8003404:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <HAL_RCC_ClockConfig+0x260>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	e00f      	b.n	800342a <HAL_RCC_ClockConfig+0xc6>
 800340a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800340e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	667b      	str	r3, [r7, #100]	; 0x64
 8003418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800341c:	663b      	str	r3, [r7, #96]	; 0x60
 800341e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003426:	4b67      	ldr	r3, [pc, #412]	; (80035c4 <HAL_RCC_ClockConfig+0x260>)
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800342e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003432:	fa92 f2a2 	rbit	r2, r2
 8003436:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003438:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800343a:	fab2 f282 	clz	r2, r2
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	f042 0220 	orr.w	r2, r2, #32
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	f002 021f 	and.w	r2, r2, #31
 800344a:	2101      	movs	r1, #1
 800344c:	fa01 f202 	lsl.w	r2, r1, r2
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d17b      	bne.n	800354e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0f3      	b.n	8003642 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d13c      	bne.n	80034dc <HAL_RCC_ClockConfig+0x178>
 8003462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003466:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <HAL_RCC_ClockConfig+0x128>
 8003486:	4b4f      	ldr	r3, [pc, #316]	; (80035c4 <HAL_RCC_ClockConfig+0x260>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	e00f      	b.n	80034ac <HAL_RCC_ClockConfig+0x148>
 800348c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003490:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	647b      	str	r3, [r7, #68]	; 0x44
 800349a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800349e:	643b      	str	r3, [r7, #64]	; 0x40
 80034a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a2:	fa93 f3a3 	rbit	r3, r3
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a8:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <HAL_RCC_ClockConfig+0x260>)
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80034b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034b4:	fa92 f2a2 	rbit	r2, r2
 80034b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80034ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034bc:	fab2 f282 	clz	r2, r2
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	f042 0220 	orr.w	r2, r2, #32
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	f002 021f 	and.w	r2, r2, #31
 80034cc:	2101      	movs	r1, #1
 80034ce:	fa01 f202 	lsl.w	r2, r1, r2
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d13a      	bne.n	800354e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0b2      	b.n	8003642 <HAL_RCC_ClockConfig+0x2de>
 80034dc:	2302      	movs	r3, #2
 80034de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d102      	bne.n	8003504 <HAL_RCC_ClockConfig+0x1a0>
 80034fe:	4b31      	ldr	r3, [pc, #196]	; (80035c4 <HAL_RCC_ClockConfig+0x260>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	e00d      	b.n	8003520 <HAL_RCC_ClockConfig+0x1bc>
 8003504:	2302      	movs	r3, #2
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
 8003510:	2302      	movs	r3, #2
 8003512:	623b      	str	r3, [r7, #32]
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <HAL_RCC_ClockConfig+0x260>)
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	2202      	movs	r2, #2
 8003522:	61ba      	str	r2, [r7, #24]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	fa92 f2a2 	rbit	r2, r2
 800352a:	617a      	str	r2, [r7, #20]
  return result;
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	fab2 f282 	clz	r2, r2
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	f042 0220 	orr.w	r2, r2, #32
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	f002 021f 	and.w	r2, r2, #31
 800353e:	2101      	movs	r1, #1
 8003540:	fa01 f202 	lsl.w	r2, r1, r2
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e079      	b.n	8003642 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354e:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <HAL_RCC_ClockConfig+0x260>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f023 0203 	bic.w	r2, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	491a      	ldr	r1, [pc, #104]	; (80035c4 <HAL_RCC_ClockConfig+0x260>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003560:	f7fd fbd4 	bl	8000d0c <HAL_GetTick>
 8003564:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003566:	e00a      	b.n	800357e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003568:	f7fd fbd0 	bl	8000d0c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e061      	b.n	8003642 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_RCC_ClockConfig+0x260>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 020c 	and.w	r2, r3, #12
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	429a      	cmp	r2, r3
 800358e:	d1eb      	bne.n	8003568 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_ClockConfig+0x25c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d214      	bcs.n	80035c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <HAL_RCC_ClockConfig+0x25c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 0207 	bic.w	r2, r3, #7
 80035a6:	4906      	ldr	r1, [pc, #24]	; (80035c0 <HAL_RCC_ClockConfig+0x25c>)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <HAL_RCC_ClockConfig+0x25c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e040      	b.n	8003642 <HAL_RCC_ClockConfig+0x2de>
 80035c0:	40022000 	.word	0x40022000
 80035c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d4:	4b1d      	ldr	r3, [pc, #116]	; (800364c <HAL_RCC_ClockConfig+0x2e8>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	491a      	ldr	r1, [pc, #104]	; (800364c <HAL_RCC_ClockConfig+0x2e8>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f2:	4b16      	ldr	r3, [pc, #88]	; (800364c <HAL_RCC_ClockConfig+0x2e8>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4912      	ldr	r1, [pc, #72]	; (800364c <HAL_RCC_ClockConfig+0x2e8>)
 8003602:	4313      	orrs	r3, r2
 8003604:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003606:	f000 f829 	bl	800365c <HAL_RCC_GetSysClockFreq>
 800360a:	4601      	mov	r1, r0
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <HAL_RCC_ClockConfig+0x2e8>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003614:	22f0      	movs	r2, #240	; 0xf0
 8003616:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	fa92 f2a2 	rbit	r2, r2
 800361e:	60fa      	str	r2, [r7, #12]
  return result;
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	fab2 f282 	clz	r2, r2
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	40d3      	lsrs	r3, r2
 800362a:	4a09      	ldr	r2, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x2ec>)
 800362c:	5cd3      	ldrb	r3, [r2, r3]
 800362e:	fa21 f303 	lsr.w	r3, r1, r3
 8003632:	4a08      	ldr	r2, [pc, #32]	; (8003654 <HAL_RCC_ClockConfig+0x2f0>)
 8003634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <HAL_RCC_ClockConfig+0x2f4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd fb22 	bl	8000c84 <HAL_InitTick>
  
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3778      	adds	r7, #120	; 0x78
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	08004344 	.word	0x08004344
 8003654:	20000010 	.word	0x20000010
 8003658:	20000014 	.word	0x20000014

0800365c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800365c:	b480      	push	{r7}
 800365e:	b08b      	sub	sp, #44	; 0x2c
 8003660:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	2300      	movs	r3, #0
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003676:	4b29      	ldr	r3, [pc, #164]	; (800371c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b04      	cmp	r3, #4
 8003684:	d002      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0x30>
 8003686:	2b08      	cmp	r3, #8
 8003688:	d003      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x36>
 800368a:	e03c      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_GetSysClockFreq+0xc4>)
 800368e:	623b      	str	r3, [r7, #32]
      break;
 8003690:	e03c      	b.n	800370c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003698:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800369c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	fa92 f2a2 	rbit	r2, r2
 80036a4:	607a      	str	r2, [r7, #4]
  return result;
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	fab2 f282 	clz	r2, r2
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	40d3      	lsrs	r3, r2
 80036b0:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036b6:	4b19      	ldr	r3, [pc, #100]	; (800371c <HAL_RCC_GetSysClockFreq+0xc0>)
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	220f      	movs	r2, #15
 80036c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	fa92 f2a2 	rbit	r2, r2
 80036c8:	60fa      	str	r2, [r7, #12]
  return result;
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	fab2 f282 	clz	r2, r2
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	40d3      	lsrs	r3, r2
 80036d4:	4a14      	ldr	r2, [pc, #80]	; (8003728 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036d6:	5cd3      	ldrb	r3, [r2, r3]
 80036d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036e4:	4a0e      	ldr	r2, [pc, #56]	; (8003720 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
 80036f4:	e004      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	4a0c      	ldr	r2, [pc, #48]	; (800372c <HAL_RCC_GetSysClockFreq+0xd0>)
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	623b      	str	r3, [r7, #32]
      break;
 8003704:	e002      	b.n	800370c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003708:	623b      	str	r3, [r7, #32]
      break;
 800370a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800370c:	6a3b      	ldr	r3, [r7, #32]
}
 800370e:	4618      	mov	r0, r3
 8003710:	372c      	adds	r7, #44	; 0x2c
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	007a1200 	.word	0x007a1200
 8003724:	0800435c 	.word	0x0800435c
 8003728:	0800436c 	.word	0x0800436c
 800372c:	003d0900 	.word	0x003d0900

08003730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003734:	4b03      	ldr	r3, [pc, #12]	; (8003744 <HAL_RCC_GetHCLKFreq+0x14>)
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20000010 	.word	0x20000010

08003748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800374e:	f7ff ffef 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 8003752:	4601      	mov	r1, r0
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800375c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003760:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	fa92 f2a2 	rbit	r2, r2
 8003768:	603a      	str	r2, [r7, #0]
  return result;
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	fab2 f282 	clz	r2, r2
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	40d3      	lsrs	r3, r2
 8003774:	4a04      	ldr	r2, [pc, #16]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003776:	5cd3      	ldrb	r3, [r2, r3]
 8003778:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	08004354 	.word	0x08004354

0800378c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003792:	f7ff ffcd 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 8003796:	4601      	mov	r1, r0
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80037a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80037a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	fa92 f2a2 	rbit	r2, r2
 80037ac:	603a      	str	r2, [r7, #0]
  return result;
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	40d3      	lsrs	r3, r2
 80037b8:	4a04      	ldr	r2, [pc, #16]	; (80037cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80037ba:	5cd3      	ldrb	r3, [r2, r3]
 80037bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000
 80037cc:	08004354 	.word	0x08004354

080037d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b092      	sub	sp, #72	; 0x48
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80d7 	beq.w	800399c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f4:	4b4e      	ldr	r3, [pc, #312]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10e      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003800:	4b4b      	ldr	r3, [pc, #300]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	4a4a      	ldr	r2, [pc, #296]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380a:	61d3      	str	r3, [r2, #28]
 800380c:	4b48      	ldr	r3, [pc, #288]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003818:	2301      	movs	r3, #1
 800381a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	4b45      	ldr	r3, [pc, #276]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d118      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382a:	4b42      	ldr	r3, [pc, #264]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a41      	ldr	r2, [pc, #260]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003834:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003836:	f7fd fa69 	bl	8000d0c <HAL_GetTick>
 800383a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	e008      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383e:	f7fd fa65 	bl	8000d0c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b64      	cmp	r3, #100	; 0x64
 800384a:	d901      	bls.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e169      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	4b38      	ldr	r3, [pc, #224]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800385c:	4b34      	ldr	r3, [pc, #208]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003864:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8084 	beq.w	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003878:	429a      	cmp	r2, r3
 800387a:	d07c      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800387c:	4b2c      	ldr	r3, [pc, #176]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	4b26      	ldr	r3, [pc, #152]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	461a      	mov	r2, r3
 80038a6:	2301      	movs	r3, #1
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b2:	fa93 f3a3 	rbit	r3, r3
 80038b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	461a      	mov	r2, r3
 80038ca:	2300      	movs	r3, #0
 80038cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038ce:	4a18      	ldr	r2, [pc, #96]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d04b      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038de:	f7fd fa15 	bl	8000d0c <HAL_GetTick>
 80038e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e4:	e00a      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e6:	f7fd fa11 	bl	8000d0c <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d901      	bls.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e113      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80038fc:	2302      	movs	r3, #2
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
 8003908:	2302      	movs	r3, #2
 800390a:	623b      	str	r3, [r7, #32]
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	61fb      	str	r3, [r7, #28]
  return result;
 8003914:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f043 0302 	orr.w	r3, r3, #2
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d108      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800392a:	4b01      	ldr	r3, [pc, #4]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	e00d      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
 8003938:	10908100 	.word	0x10908100
 800393c:	2302      	movs	r3, #2
 800393e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	fa93 f3a3 	rbit	r3, r3
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	4b78      	ldr	r3, [pc, #480]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	2202      	movs	r2, #2
 800394e:	613a      	str	r2, [r7, #16]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	fa92 f2a2 	rbit	r2, r2
 8003956:	60fa      	str	r2, [r7, #12]
  return result;
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	fab2 f282 	clz	r2, r2
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	f002 021f 	and.w	r2, r2, #31
 800396a:	2101      	movs	r1, #1
 800396c:	fa01 f202 	lsl.w	r2, r1, r2
 8003970:	4013      	ands	r3, r2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0b7      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003976:	4b6d      	ldr	r3, [pc, #436]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	496a      	ldr	r1, [pc, #424]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003984:	4313      	orrs	r3, r2
 8003986:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003988:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800398c:	2b01      	cmp	r3, #1
 800398e:	d105      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003990:	4b66      	ldr	r3, [pc, #408]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	4a65      	ldr	r2, [pc, #404]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800399a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a8:	4b60      	ldr	r3, [pc, #384]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	f023 0203 	bic.w	r2, r3, #3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	495d      	ldr	r1, [pc, #372]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039c6:	4b59      	ldr	r3, [pc, #356]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	4956      	ldr	r1, [pc, #344]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039e4:	4b51      	ldr	r3, [pc, #324]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	494e      	ldr	r1, [pc, #312]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a02:	4b4a      	ldr	r3, [pc, #296]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f023 0210 	bic.w	r2, r3, #16
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	4947      	ldr	r1, [pc, #284]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a20:	4b42      	ldr	r3, [pc, #264]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	493f      	ldr	r1, [pc, #252]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f023 0220 	bic.w	r2, r3, #32
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	4938      	ldr	r1, [pc, #224]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a5c:	4b33      	ldr	r3, [pc, #204]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	4930      	ldr	r1, [pc, #192]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a7a:	4b2c      	ldr	r3, [pc, #176]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	4929      	ldr	r1, [pc, #164]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a98:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	4921      	ldr	r1, [pc, #132]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	491a      	ldr	r1, [pc, #104]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003ad4:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	4912      	ldr	r1, [pc, #72]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003af2:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	490b      	ldr	r1, [pc, #44]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	4903      	ldr	r1, [pc, #12]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3748      	adds	r7, #72	; 0x48
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40021000 	.word	0x40021000

08003b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e040      	b.n	8003bc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fc ffd0 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2224      	movs	r2, #36	; 0x24
 8003b5c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f82c 	bl	8003bcc <UART_SetConfig>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e022      	b.n	8003bc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fa3a 	bl	8004000 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fac1 	bl	8004144 <UART_CheckIdleState>
 8003bc2:	4603      	mov	r3, r0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003bfe:	f023 030c 	bic.w	r3, r3, #12
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	6939      	ldr	r1, [r7, #16]
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4aa9      	ldr	r2, [pc, #676]	; (8003ef0 <UART_SetConfig+0x324>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d121      	bne.n	8003c94 <UART_SetConfig+0xc8>
 8003c50:	4ba8      	ldr	r3, [pc, #672]	; (8003ef4 <UART_SetConfig+0x328>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d817      	bhi.n	8003c8c <UART_SetConfig+0xc0>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <UART_SetConfig+0x98>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c75 	.word	0x08003c75
 8003c68:	08003c81 	.word	0x08003c81
 8003c6c:	08003c87 	.word	0x08003c87
 8003c70:	08003c7b 	.word	0x08003c7b
 8003c74:	2301      	movs	r3, #1
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e0b2      	b.n	8003de0 <UART_SetConfig+0x214>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e0af      	b.n	8003de0 <UART_SetConfig+0x214>
 8003c80:	2304      	movs	r3, #4
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e0ac      	b.n	8003de0 <UART_SetConfig+0x214>
 8003c86:	2308      	movs	r3, #8
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e0a9      	b.n	8003de0 <UART_SetConfig+0x214>
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	bf00      	nop
 8003c92:	e0a5      	b.n	8003de0 <UART_SetConfig+0x214>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a97      	ldr	r2, [pc, #604]	; (8003ef8 <UART_SetConfig+0x32c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d123      	bne.n	8003ce6 <UART_SetConfig+0x11a>
 8003c9e:	4b95      	ldr	r3, [pc, #596]	; (8003ef4 <UART_SetConfig+0x328>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003caa:	d012      	beq.n	8003cd2 <UART_SetConfig+0x106>
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb0:	d802      	bhi.n	8003cb8 <UART_SetConfig+0xec>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <UART_SetConfig+0xfa>
 8003cb6:	e012      	b.n	8003cde <UART_SetConfig+0x112>
 8003cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cbc:	d00c      	beq.n	8003cd8 <UART_SetConfig+0x10c>
 8003cbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cc2:	d003      	beq.n	8003ccc <UART_SetConfig+0x100>
 8003cc4:	e00b      	b.n	8003cde <UART_SetConfig+0x112>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e089      	b.n	8003de0 <UART_SetConfig+0x214>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e086      	b.n	8003de0 <UART_SetConfig+0x214>
 8003cd2:	2304      	movs	r3, #4
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e083      	b.n	8003de0 <UART_SetConfig+0x214>
 8003cd8:	2308      	movs	r3, #8
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e080      	b.n	8003de0 <UART_SetConfig+0x214>
 8003cde:	2310      	movs	r3, #16
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	bf00      	nop
 8003ce4:	e07c      	b.n	8003de0 <UART_SetConfig+0x214>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a84      	ldr	r2, [pc, #528]	; (8003efc <UART_SetConfig+0x330>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d123      	bne.n	8003d38 <UART_SetConfig+0x16c>
 8003cf0:	4b80      	ldr	r3, [pc, #512]	; (8003ef4 <UART_SetConfig+0x328>)
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003cf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cfc:	d012      	beq.n	8003d24 <UART_SetConfig+0x158>
 8003cfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d02:	d802      	bhi.n	8003d0a <UART_SetConfig+0x13e>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <UART_SetConfig+0x14c>
 8003d08:	e012      	b.n	8003d30 <UART_SetConfig+0x164>
 8003d0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d0e:	d00c      	beq.n	8003d2a <UART_SetConfig+0x15e>
 8003d10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d14:	d003      	beq.n	8003d1e <UART_SetConfig+0x152>
 8003d16:	e00b      	b.n	8003d30 <UART_SetConfig+0x164>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	77fb      	strb	r3, [r7, #31]
 8003d1c:	e060      	b.n	8003de0 <UART_SetConfig+0x214>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	77fb      	strb	r3, [r7, #31]
 8003d22:	e05d      	b.n	8003de0 <UART_SetConfig+0x214>
 8003d24:	2304      	movs	r3, #4
 8003d26:	77fb      	strb	r3, [r7, #31]
 8003d28:	e05a      	b.n	8003de0 <UART_SetConfig+0x214>
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e057      	b.n	8003de0 <UART_SetConfig+0x214>
 8003d30:	2310      	movs	r3, #16
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	bf00      	nop
 8003d36:	e053      	b.n	8003de0 <UART_SetConfig+0x214>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a70      	ldr	r2, [pc, #448]	; (8003f00 <UART_SetConfig+0x334>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d123      	bne.n	8003d8a <UART_SetConfig+0x1be>
 8003d42:	4b6c      	ldr	r3, [pc, #432]	; (8003ef4 <UART_SetConfig+0x328>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d4e:	d012      	beq.n	8003d76 <UART_SetConfig+0x1aa>
 8003d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d54:	d802      	bhi.n	8003d5c <UART_SetConfig+0x190>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <UART_SetConfig+0x19e>
 8003d5a:	e012      	b.n	8003d82 <UART_SetConfig+0x1b6>
 8003d5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d60:	d00c      	beq.n	8003d7c <UART_SetConfig+0x1b0>
 8003d62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d66:	d003      	beq.n	8003d70 <UART_SetConfig+0x1a4>
 8003d68:	e00b      	b.n	8003d82 <UART_SetConfig+0x1b6>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	77fb      	strb	r3, [r7, #31]
 8003d6e:	e037      	b.n	8003de0 <UART_SetConfig+0x214>
 8003d70:	2302      	movs	r3, #2
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e034      	b.n	8003de0 <UART_SetConfig+0x214>
 8003d76:	2304      	movs	r3, #4
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e031      	b.n	8003de0 <UART_SetConfig+0x214>
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e02e      	b.n	8003de0 <UART_SetConfig+0x214>
 8003d82:	2310      	movs	r3, #16
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	bf00      	nop
 8003d88:	e02a      	b.n	8003de0 <UART_SetConfig+0x214>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a5d      	ldr	r2, [pc, #372]	; (8003f04 <UART_SetConfig+0x338>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d123      	bne.n	8003ddc <UART_SetConfig+0x210>
 8003d94:	4b57      	ldr	r3, [pc, #348]	; (8003ef4 <UART_SetConfig+0x328>)
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003d9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da0:	d012      	beq.n	8003dc8 <UART_SetConfig+0x1fc>
 8003da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da6:	d802      	bhi.n	8003dae <UART_SetConfig+0x1e2>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d007      	beq.n	8003dbc <UART_SetConfig+0x1f0>
 8003dac:	e012      	b.n	8003dd4 <UART_SetConfig+0x208>
 8003dae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003db2:	d00c      	beq.n	8003dce <UART_SetConfig+0x202>
 8003db4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003db8:	d003      	beq.n	8003dc2 <UART_SetConfig+0x1f6>
 8003dba:	e00b      	b.n	8003dd4 <UART_SetConfig+0x208>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e00e      	b.n	8003de0 <UART_SetConfig+0x214>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e00b      	b.n	8003de0 <UART_SetConfig+0x214>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e008      	b.n	8003de0 <UART_SetConfig+0x214>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e005      	b.n	8003de0 <UART_SetConfig+0x214>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	bf00      	nop
 8003dda:	e001      	b.n	8003de0 <UART_SetConfig+0x214>
 8003ddc:	2310      	movs	r3, #16
 8003dde:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de8:	f040 808e 	bne.w	8003f08 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003dec:	7ffb      	ldrb	r3, [r7, #31]
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d85e      	bhi.n	8003eb0 <UART_SetConfig+0x2e4>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <UART_SetConfig+0x22c>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e1d 	.word	0x08003e1d
 8003dfc:	08003e3d 	.word	0x08003e3d
 8003e00:	08003e5d 	.word	0x08003e5d
 8003e04:	08003eb1 	.word	0x08003eb1
 8003e08:	08003e79 	.word	0x08003e79
 8003e0c:	08003eb1 	.word	0x08003eb1
 8003e10:	08003eb1 	.word	0x08003eb1
 8003e14:	08003eb1 	.word	0x08003eb1
 8003e18:	08003e99 	.word	0x08003e99
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e1c:	f7ff fc94 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8003e20:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	005a      	lsls	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	441a      	add	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	61bb      	str	r3, [r7, #24]
        break;
 8003e3a:	e03c      	b.n	8003eb6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e3c:	f7ff fca6 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8003e40:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	005a      	lsls	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	085b      	lsrs	r3, r3, #1
 8003e4c:	441a      	add	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	61bb      	str	r3, [r7, #24]
        break;
 8003e5a:	e02c      	b.n	8003eb6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003e66:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6852      	ldr	r2, [r2, #4]
 8003e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	61bb      	str	r3, [r7, #24]
        break;
 8003e76:	e01e      	b.n	8003eb6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e78:	f7ff fbf0 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8003e7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	005a      	lsls	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	085b      	lsrs	r3, r3, #1
 8003e88:	441a      	add	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	61bb      	str	r3, [r7, #24]
        break;
 8003e96:	e00e      	b.n	8003eb6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	61bb      	str	r3, [r7, #24]
        break;
 8003eae:	e002      	b.n	8003eb6 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]
        break;
 8003eb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b0f      	cmp	r3, #15
 8003eba:	d916      	bls.n	8003eea <UART_SetConfig+0x31e>
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec2:	d212      	bcs.n	8003eea <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f023 030f 	bic.w	r3, r3, #15
 8003ecc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	897b      	ldrh	r3, [r7, #10]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	897a      	ldrh	r2, [r7, #10]
 8003ee6:	60da      	str	r2, [r3, #12]
 8003ee8:	e07e      	b.n	8003fe8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
 8003eee:	e07b      	b.n	8003fe8 <UART_SetConfig+0x41c>
 8003ef0:	40013800 	.word	0x40013800
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40004400 	.word	0x40004400
 8003efc:	40004800 	.word	0x40004800
 8003f00:	40004c00 	.word	0x40004c00
 8003f04:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8003f08:	7ffb      	ldrb	r3, [r7, #31]
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d85b      	bhi.n	8003fc6 <UART_SetConfig+0x3fa>
 8003f0e:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <UART_SetConfig+0x348>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f39 	.word	0x08003f39
 8003f18:	08003f57 	.word	0x08003f57
 8003f1c:	08003f75 	.word	0x08003f75
 8003f20:	08003fc7 	.word	0x08003fc7
 8003f24:	08003f91 	.word	0x08003f91
 8003f28:	08003fc7 	.word	0x08003fc7
 8003f2c:	08003fc7 	.word	0x08003fc7
 8003f30:	08003fc7 	.word	0x08003fc7
 8003f34:	08003faf 	.word	0x08003faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f38:	f7ff fc06 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8003f3c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	085a      	lsrs	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	441a      	add	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	61bb      	str	r3, [r7, #24]
        break;
 8003f54:	e03a      	b.n	8003fcc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f56:	f7ff fc19 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8003f5a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	085a      	lsrs	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	441a      	add	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	61bb      	str	r3, [r7, #24]
        break;
 8003f72:	e02b      	b.n	8003fcc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003f7e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6852      	ldr	r2, [r2, #4]
 8003f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	61bb      	str	r3, [r7, #24]
        break;
 8003f8e:	e01d      	b.n	8003fcc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f90:	f7ff fb64 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8003f94:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	085a      	lsrs	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	441a      	add	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	61bb      	str	r3, [r7, #24]
        break;
 8003fac:	e00e      	b.n	8003fcc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	61bb      	str	r3, [r7, #24]
        break;
 8003fc4:	e002      	b.n	8003fcc <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]
        break;
 8003fca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b0f      	cmp	r3, #15
 8003fd0:	d908      	bls.n	8003fe4 <UART_SetConfig+0x418>
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd8:	d204      	bcs.n	8003fe4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	60da      	str	r2, [r3, #12]
 8003fe2:	e001      	b.n	8003fe8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop

08004000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01a      	beq.n	8004116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fe:	d10a      	bne.n	8004116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
  }
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af02      	add	r7, sp, #8
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004152:	f7fc fddb 	bl	8000d0c <HAL_GetTick>
 8004156:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b08      	cmp	r3, #8
 8004164:	d10e      	bne.n	8004184 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004166:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f82a 	bl	80041ce <UART_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e020      	b.n	80041c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d10e      	bne.n	80041b0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004192:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f814 	bl	80041ce <UART_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e00a      	b.n	80041c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	4613      	mov	r3, r2
 80041dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041de:	e05d      	b.n	800429c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041e6:	d059      	beq.n	800429c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e8:	f7fc fd90 	bl	8000d0c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d302      	bcc.n	80041fe <UART_WaitOnFlagUntilTimeout+0x30>
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d11b      	bne.n	8004236 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800420c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0201 	bic.w	r2, r2, #1
 800421c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e042      	b.n	80042bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d02b      	beq.n	800429c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004252:	d123      	bne.n	800429c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800425c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800426c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0201 	bic.w	r2, r2, #1
 800427c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e00f      	b.n	80042bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4013      	ands	r3, r2
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d092      	beq.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <__libc_init_array>:
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	4e0d      	ldr	r6, [pc, #52]	; (80042fc <__libc_init_array+0x38>)
 80042c8:	4c0d      	ldr	r4, [pc, #52]	; (8004300 <__libc_init_array+0x3c>)
 80042ca:	1ba4      	subs	r4, r4, r6
 80042cc:	10a4      	asrs	r4, r4, #2
 80042ce:	2500      	movs	r5, #0
 80042d0:	42a5      	cmp	r5, r4
 80042d2:	d109      	bne.n	80042e8 <__libc_init_array+0x24>
 80042d4:	4e0b      	ldr	r6, [pc, #44]	; (8004304 <__libc_init_array+0x40>)
 80042d6:	4c0c      	ldr	r4, [pc, #48]	; (8004308 <__libc_init_array+0x44>)
 80042d8:	f000 f820 	bl	800431c <_init>
 80042dc:	1ba4      	subs	r4, r4, r6
 80042de:	10a4      	asrs	r4, r4, #2
 80042e0:	2500      	movs	r5, #0
 80042e2:	42a5      	cmp	r5, r4
 80042e4:	d105      	bne.n	80042f2 <__libc_init_array+0x2e>
 80042e6:	bd70      	pop	{r4, r5, r6, pc}
 80042e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042ec:	4798      	blx	r3
 80042ee:	3501      	adds	r5, #1
 80042f0:	e7ee      	b.n	80042d0 <__libc_init_array+0xc>
 80042f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042f6:	4798      	blx	r3
 80042f8:	3501      	adds	r5, #1
 80042fa:	e7f2      	b.n	80042e2 <__libc_init_array+0x1e>
 80042fc:	0800437c 	.word	0x0800437c
 8004300:	0800437c 	.word	0x0800437c
 8004304:	0800437c 	.word	0x0800437c
 8004308:	08004380 	.word	0x08004380

0800430c <memset>:
 800430c:	4402      	add	r2, r0
 800430e:	4603      	mov	r3, r0
 8004310:	4293      	cmp	r3, r2
 8004312:	d100      	bne.n	8004316 <memset+0xa>
 8004314:	4770      	bx	lr
 8004316:	f803 1b01 	strb.w	r1, [r3], #1
 800431a:	e7f9      	b.n	8004310 <memset+0x4>

0800431c <_init>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr

08004328 <_fini>:
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	bf00      	nop
 800432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432e:	bc08      	pop	{r3}
 8004330:	469e      	mov	lr, r3
 8004332:	4770      	bx	lr
